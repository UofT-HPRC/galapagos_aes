// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kern_enc,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu19eg-ffvc1760-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.814000,HLS_SYN_LAT=4,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=3541,HLS_SYN_LUT=4735,HLS_VERSION=2019_1}" *)

module kern_enc (
        ap_clk,
        ap_rst_n,
        id,
        in_r_TDATA,
        in_r_TVALID,
        in_r_TREADY,
        in_r_TDEST,
        in_r_TLAST,
        in_r_TID,
        in_r_TUSER,
        in_r_TKEEP,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        out_r_TDEST,
        out_r_TLAST,
        out_r_TID,
        out_r_TUSER,
        out_r_TKEEP
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_pp0_stage0 = 16'd2048;
parameter    ap_ST_fsm_state14 = 16'd4096;
parameter    ap_ST_fsm_state15 = 16'd8192;
parameter    ap_ST_fsm_state16 = 16'd16384;
parameter    ap_ST_fsm_state17 = 16'd32768;

input   ap_clk;
input   ap_rst_n;
input  [15:0] id;
input  [511:0] in_r_TDATA;
input   in_r_TVALID;
output   in_r_TREADY;
input  [7:0] in_r_TDEST;
input  [0:0] in_r_TLAST;
input  [7:0] in_r_TID;
input  [15:0] in_r_TUSER;
input  [63:0] in_r_TKEEP;
output  [511:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
output  [7:0] out_r_TDEST;
output  [0:0] out_r_TLAST;
output  [7:0] out_r_TID;
output  [15:0] out_r_TUSER;
output  [63:0] out_r_TKEEP;

reg in_r_TREADY;

 reg    ap_rst_n_inv;
reg   [511:0] out_V_data_V_1_data_out;
reg    out_V_data_V_1_vld_in;
wire    out_V_data_V_1_vld_out;
wire    out_V_data_V_1_ack_in;
wire    out_V_data_V_1_ack_out;
reg   [511:0] out_V_data_V_1_payload_A;
reg   [511:0] out_V_data_V_1_payload_B;
reg    out_V_data_V_1_sel_rd;
reg    out_V_data_V_1_sel_wr;
wire    out_V_data_V_1_sel;
wire    out_V_data_V_1_load_A;
wire    out_V_data_V_1_load_B;
reg   [1:0] out_V_data_V_1_state;
wire    out_V_data_V_1_state_cmp_full;
wire   [7:0] out_V_dest_V_1_data_out;
reg    out_V_dest_V_1_vld_in;
wire    out_V_dest_V_1_vld_out;
wire    out_V_dest_V_1_ack_out;
reg    out_V_dest_V_1_sel_rd;
wire    out_V_dest_V_1_sel;
reg   [1:0] out_V_dest_V_1_state;
wire   [0:0] out_V_last_V_1_data_out;
reg    out_V_last_V_1_vld_in;
wire    out_V_last_V_1_vld_out;
wire    out_V_last_V_1_ack_out;
reg    out_V_last_V_1_sel_rd;
wire    out_V_last_V_1_sel;
reg   [1:0] out_V_last_V_1_state;
wire   [7:0] out_V_id_V_1_data_out;
reg    out_V_id_V_1_vld_in;
wire    out_V_id_V_1_vld_out;
wire    out_V_id_V_1_ack_out;
reg    out_V_id_V_1_sel_rd;
wire    out_V_id_V_1_sel;
reg   [1:0] out_V_id_V_1_state;
wire   [15:0] out_V_user_V_1_data_out;
reg    out_V_user_V_1_vld_in;
wire    out_V_user_V_1_vld_out;
wire    out_V_user_V_1_ack_out;
reg    out_V_user_V_1_sel_rd;
wire    out_V_user_V_1_sel;
reg   [1:0] out_V_user_V_1_state;
wire   [63:0] out_V_keep_V_1_data_out;
reg    out_V_keep_V_1_vld_in;
wire    out_V_keep_V_1_vld_out;
wire    out_V_keep_V_1_ack_out;
reg    out_V_keep_V_1_sel_rd;
wire    out_V_keep_V_1_sel;
reg   [1:0] out_V_keep_V_1_state;
reg   [31:0] flag;
reg   [127:0] plainT_V;
reg   [127:0] keyT_V;
reg   [7:0] SBOX_V_address0;
reg    SBOX_V_ce0;
wire   [7:0] SBOX_V_q0;
reg   [7:0] SBOX_V_address1;
reg    SBOX_V_ce1;
wire   [7:0] SBOX_V_q1;
reg   [7:0] SBOX_V_address2;
reg    SBOX_V_ce2;
wire   [7:0] SBOX_V_q2;
reg   [7:0] SBOX_V_address3;
reg    SBOX_V_ce3;
wire   [7:0] SBOX_V_q3;
reg   [7:0] SBOX_V_address4;
reg    SBOX_V_ce4;
wire   [7:0] SBOX_V_q4;
reg   [7:0] SBOX_V_address5;
reg    SBOX_V_ce5;
wire   [7:0] SBOX_V_q5;
reg   [7:0] SBOX_V_address6;
reg    SBOX_V_ce6;
wire   [7:0] SBOX_V_q6;
reg   [7:0] SBOX_V_address7;
reg    SBOX_V_ce7;
wire   [7:0] SBOX_V_q7;
reg   [7:0] SBOX_V_address8;
reg    SBOX_V_ce8;
wire   [7:0] SBOX_V_q8;
reg   [7:0] SBOX_V_address9;
reg    SBOX_V_ce9;
wire   [7:0] SBOX_V_q9;
reg   [7:0] SBOX_V_address10;
reg    SBOX_V_ce10;
wire   [7:0] SBOX_V_q10;
reg   [7:0] SBOX_V_address11;
reg    SBOX_V_ce11;
wire   [7:0] SBOX_V_q11;
reg   [7:0] SBOX_V_address12;
reg    SBOX_V_ce12;
wire   [7:0] SBOX_V_q12;
reg   [7:0] SBOX_V_address13;
reg    SBOX_V_ce13;
wire   [7:0] SBOX_V_q13;
reg   [7:0] SBOX_V_address14;
reg    SBOX_V_ce14;
wire   [7:0] SBOX_V_q14;
reg   [7:0] SBOX_V_address15;
reg    SBOX_V_ce15;
wire   [7:0] SBOX_V_q15;
reg    in_r_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln50_fu_1213_p2;
wire   [0:0] tmp_nbreadreq_fu_212_p8;
reg    out_r_TDATA_blk_n;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
reg   [0:0] icmp_ln50_reg_4292;
reg   [0:0] icmp_ln116_reg_4296;
reg   [7:0] cipher_V_11_0_reg_914;
reg   [7:0] cipher_V_10_0_reg_924;
reg   [7:0] cipher_V_9_0_reg_934;
reg   [7:0] cipher_V_8_0_reg_944;
reg   [7:0] cipher_V_7_0_reg_954;
reg   [7:0] cipher_V_6_0_reg_964;
reg   [7:0] cipher_V_5_0_reg_974;
reg   [7:0] cipher_V_4_0_reg_984;
reg   [7:0] cipher_V_3_0_reg_994;
reg   [7:0] cipher_V_2_0_reg_1004;
reg   [7:0] cipher_V_1_0_reg_1014;
reg   [7:0] cipher_V_0_0_reg_1024;
reg   [7:0] cipher_V_12_0_reg_1034;
reg   [7:0] cipher_V_13_0_reg_1044;
reg   [7:0] cipher_V_14_0_reg_1054;
reg   [7:0] cipher_V_15_0_reg_1064;
reg   [3:0] p_02329_1_reg_1074;
reg   [7:0] reg_1187;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state9;
reg   [7:0] reg_1191;
reg   [7:0] reg_1195;
reg    ap_predicate_op76_read_state1;
reg    ap_block_state1;
wire   [0:0] icmp_ln116_fu_1219_p2;
wire   [0:0] icmp_ln334_fu_1235_p2;
reg   [0:0] icmp_ln334_reg_4300;
wire   [7:0] trunc_ln214_fu_1245_p1;
reg   [7:0] trunc_ln214_reg_4304;
wire   [7:0] trunc_ln214_1_fu_1249_p4;
reg   [7:0] trunc_ln214_1_reg_4313;
wire   [7:0] trunc_ln214_2_fu_1259_p4;
reg   [7:0] trunc_ln214_2_reg_4322;
wire   [7:0] trunc_ln214_3_fu_1269_p4;
reg   [7:0] trunc_ln214_3_reg_4331;
reg   [7:0] trunc_ln214_4_reg_4340;
reg   [7:0] trunc_ln214_5_reg_4347;
reg   [7:0] trunc_ln214_6_reg_4354;
reg   [7:0] trunc_ln214_7_reg_4361;
reg   [7:0] trunc_ln214_8_reg_4368;
reg   [7:0] trunc_ln214_9_reg_4376;
reg   [7:0] trunc_ln214_s_reg_4384;
reg   [7:0] trunc_ln214_10_reg_4392;
reg   [7:0] trunc_ln214_11_reg_4400;
reg   [7:0] trunc_ln214_12_reg_4407;
reg   [7:0] trunc_ln214_13_reg_4414;
reg   [7:0] trunc_ln214_14_reg_4421;
reg   [511:0] tmp_data_V_reg_4450;
wire   [31:0] add_ln92_fu_1449_p2;
wire   [0:0] icmp_ln58_fu_1433_p2;
wire   [0:0] icmp_ln94_fu_1455_p2;
reg   [0:0] icmp_ln94_reg_4463;
wire   [7:0] xor_ln1357_fu_1466_p2;
reg   [7:0] xor_ln1357_reg_4467;
wire    ap_CS_fsm_state2;
wire   [7:0] xor_ln1357_1_fu_1472_p2;
reg   [7:0] xor_ln1357_1_reg_4473;
wire   [7:0] xor_ln1357_2_fu_1477_p2;
reg   [7:0] xor_ln1357_2_reg_4479;
wire   [7:0] xor_ln1357_3_fu_1482_p2;
reg   [7:0] xor_ln1357_3_reg_4485;
wire   [7:0] xor_ln1357_4_fu_1487_p2;
reg   [7:0] xor_ln1357_4_reg_4491;
wire   [7:0] xor_ln1357_5_fu_1492_p2;
reg   [7:0] xor_ln1357_5_reg_4496;
wire   [7:0] xor_ln1357_6_fu_1497_p2;
reg   [7:0] xor_ln1357_6_reg_4501;
wire   [7:0] xor_ln1357_7_fu_1502_p2;
reg   [7:0] xor_ln1357_7_reg_4506;
wire   [7:0] xor_ln1357_8_fu_1507_p2;
reg   [7:0] xor_ln1357_8_reg_4511;
wire   [7:0] xor_ln1357_9_fu_1512_p2;
reg   [7:0] xor_ln1357_9_reg_4518;
wire   [7:0] xor_ln1357_10_fu_1517_p2;
reg   [7:0] xor_ln1357_10_reg_4525;
wire   [7:0] xor_ln1357_11_fu_1522_p2;
reg   [7:0] xor_ln1357_11_reg_4532;
wire   [7:0] xor_ln1357_12_fu_1527_p2;
reg   [7:0] xor_ln1357_12_reg_4539;
wire   [7:0] xor_ln1357_13_fu_1532_p2;
reg   [7:0] xor_ln1357_13_reg_4544;
wire   [7:0] xor_ln1357_14_fu_1537_p2;
reg   [7:0] xor_ln1357_14_reg_4549;
wire   [7:0] xor_ln1357_15_fu_1542_p2;
reg   [7:0] xor_ln1357_15_reg_4554;
wire   [7:0] xor_ln719_fu_1567_p2;
reg   [7:0] xor_ln719_reg_4579;
wire   [7:0] xor_ln1357_20_fu_1573_p2;
reg   [7:0] xor_ln1357_20_reg_4584;
wire   [7:0] xor_ln1357_21_fu_1578_p2;
reg   [7:0] xor_ln1357_21_reg_4592;
wire   [7:0] xor_ln1357_22_fu_1583_p2;
reg   [7:0] xor_ln1357_22_reg_4600;
wire   [7:0] xor_ln1357_23_fu_1588_p2;
reg   [7:0] xor_ln1357_23_reg_4608;
wire   [7:0] xor_ln1357_28_fu_1593_p2;
reg   [7:0] xor_ln1357_28_reg_4616;
wire   [7:0] xor_ln1357_29_fu_1598_p2;
reg   [7:0] xor_ln1357_29_reg_4622;
wire   [7:0] xor_ln1357_30_fu_1603_p2;
reg   [7:0] xor_ln1357_30_reg_4628;
wire   [7:0] xor_ln1357_31_fu_1608_p2;
reg   [7:0] xor_ln1357_31_reg_4634;
wire   [7:0] xor_ln1357_16_fu_1633_p2;
reg   [7:0] xor_ln1357_16_reg_4660;
wire    ap_CS_fsm_state4;
wire   [7:0] xor_ln1357_17_fu_1637_p2;
reg   [7:0] xor_ln1357_17_reg_4665;
wire   [7:0] xor_ln1357_18_fu_1642_p2;
reg   [7:0] xor_ln1357_18_reg_4670;
wire   [7:0] xor_ln1357_19_fu_1647_p2;
reg   [7:0] xor_ln1357_19_reg_4675;
wire   [7:0] xor_ln1357_32_fu_1658_p2;
reg   [7:0] xor_ln1357_32_reg_4680;
wire   [7:0] xor_ln1357_33_fu_1664_p2;
reg   [7:0] xor_ln1357_33_reg_4687;
wire   [7:0] xor_ln1357_34_fu_1670_p2;
reg   [7:0] xor_ln1357_34_reg_4694;
wire   [7:0] xor_ln1357_35_fu_1676_p2;
reg   [7:0] xor_ln1357_35_reg_4701;
wire   [7:0] xor_ln1357_40_fu_1682_p2;
reg   [7:0] xor_ln1357_40_reg_4708;
wire   [7:0] xor_ln1357_41_fu_1687_p2;
reg   [7:0] xor_ln1357_41_reg_4715;
wire   [7:0] xor_ln1357_42_fu_1692_p2;
reg   [7:0] xor_ln1357_42_reg_4722;
wire   [7:0] xor_ln1357_43_fu_1697_p2;
reg   [7:0] xor_ln1357_43_reg_4729;
wire   [7:0] xor_ln1357_44_fu_1702_p2;
reg   [7:0] xor_ln1357_44_reg_4736;
wire   [7:0] xor_ln1357_45_fu_1707_p2;
reg   [7:0] xor_ln1357_45_reg_4741;
wire   [7:0] xor_ln1357_46_fu_1712_p2;
reg   [7:0] xor_ln1357_46_reg_4746;
wire   [7:0] xor_ln1357_47_fu_1717_p2;
reg   [7:0] xor_ln1357_47_reg_4751;
wire   [7:0] xor_ln719_1_fu_1742_p2;
reg   [7:0] xor_ln719_1_reg_4776;
wire   [7:0] xor_ln1357_60_fu_1748_p2;
reg   [7:0] xor_ln1357_60_reg_4782;
wire   [7:0] xor_ln1357_61_fu_1753_p2;
reg   [7:0] xor_ln1357_61_reg_4790;
wire   [7:0] xor_ln1357_62_fu_1758_p2;
reg   [7:0] xor_ln1357_62_reg_4798;
wire   [7:0] xor_ln1357_63_fu_1763_p2;
reg   [7:0] xor_ln1357_63_reg_4806;
wire   [7:0] xor_ln1357_48_fu_1788_p2;
reg   [7:0] xor_ln1357_48_reg_4834;
wire    ap_CS_fsm_state6;
wire   [7:0] xor_ln1357_49_fu_1792_p2;
reg   [7:0] xor_ln1357_49_reg_4839;
wire   [7:0] xor_ln1357_50_fu_1797_p2;
reg   [7:0] xor_ln1357_50_reg_4844;
wire   [7:0] xor_ln1357_51_fu_1802_p2;
reg   [7:0] xor_ln1357_51_reg_4849;
wire   [7:0] xor_ln1357_64_fu_1813_p2;
reg   [7:0] xor_ln1357_64_reg_4854;
wire   [7:0] xor_ln1357_65_fu_1819_p2;
reg   [7:0] xor_ln1357_65_reg_4861;
wire   [7:0] xor_ln1357_66_fu_1825_p2;
reg   [7:0] xor_ln1357_66_reg_4868;
wire   [7:0] xor_ln1357_67_fu_1831_p2;
reg   [7:0] xor_ln1357_67_reg_4875;
wire   [7:0] xor_ln1357_72_fu_1837_p2;
reg   [7:0] xor_ln1357_72_reg_4882;
wire   [7:0] xor_ln1357_73_fu_1842_p2;
reg   [7:0] xor_ln1357_73_reg_4889;
wire   [7:0] xor_ln1357_74_fu_1847_p2;
reg   [7:0] xor_ln1357_74_reg_4896;
wire   [7:0] xor_ln1357_75_fu_1852_p2;
reg   [7:0] xor_ln1357_75_reg_4903;
wire   [7:0] xor_ln1357_76_fu_1857_p2;
reg   [7:0] xor_ln1357_76_reg_4910;
wire   [7:0] xor_ln1357_77_fu_1862_p2;
reg   [7:0] xor_ln1357_77_reg_4915;
wire   [7:0] xor_ln1357_78_fu_1867_p2;
reg   [7:0] xor_ln1357_78_reg_4920;
wire   [7:0] xor_ln1357_79_fu_1872_p2;
reg   [7:0] xor_ln1357_79_reg_4925;
wire   [7:0] xor_ln1357_52_fu_1897_p2;
reg   [7:0] xor_ln1357_52_reg_4950;
wire   [7:0] xor_ln1357_53_fu_1901_p2;
reg   [7:0] xor_ln1357_53_reg_4957;
wire   [7:0] xor_ln1357_54_fu_1906_p2;
reg   [7:0] xor_ln1357_54_reg_4964;
wire   [7:0] xor_ln1357_55_fu_1911_p2;
reg   [7:0] xor_ln1357_55_reg_4971;
wire   [7:0] xor_ln719_2_fu_1916_p2;
reg   [7:0] xor_ln719_2_reg_4978;
wire   [7:0] xor_ln1357_84_fu_1922_p2;
reg   [7:0] xor_ln1357_84_reg_4983;
wire   [7:0] xor_ln1357_85_fu_1928_p2;
reg   [7:0] xor_ln1357_85_reg_4991;
wire   [7:0] xor_ln1357_86_fu_1934_p2;
reg   [7:0] xor_ln1357_86_reg_4999;
wire   [7:0] xor_ln1357_87_fu_1940_p2;
reg   [7:0] xor_ln1357_87_reg_5007;
wire   [7:0] xor_ln1357_92_fu_1946_p2;
reg   [7:0] xor_ln1357_92_reg_5015;
wire   [7:0] xor_ln1357_93_fu_1951_p2;
reg   [7:0] xor_ln1357_93_reg_5021;
wire   [7:0] xor_ln1357_94_fu_1956_p2;
reg   [7:0] xor_ln1357_94_reg_5027;
wire   [7:0] xor_ln1357_95_fu_1961_p2;
reg   [7:0] xor_ln1357_95_reg_5033;
wire   [7:0] xor_ln1357_80_fu_1986_p2;
reg   [7:0] xor_ln1357_80_reg_5059;
wire    ap_CS_fsm_state8;
wire   [7:0] xor_ln1357_81_fu_1990_p2;
reg   [7:0] xor_ln1357_81_reg_5064;
wire   [7:0] xor_ln1357_82_fu_1995_p2;
reg   [7:0] xor_ln1357_82_reg_5069;
wire   [7:0] xor_ln1357_83_fu_2000_p2;
reg   [7:0] xor_ln1357_83_reg_5074;
wire   [7:0] xor_ln1357_96_fu_2011_p2;
reg   [7:0] xor_ln1357_96_reg_5079;
wire   [7:0] xor_ln1357_97_fu_2017_p2;
reg   [7:0] xor_ln1357_97_reg_5086;
wire   [7:0] xor_ln1357_98_fu_2023_p2;
reg   [7:0] xor_ln1357_98_reg_5093;
wire   [7:0] xor_ln1357_99_fu_2029_p2;
reg   [7:0] xor_ln1357_99_reg_5100;
wire   [7:0] xor_ln1357_104_fu_2035_p2;
reg   [7:0] xor_ln1357_104_reg_5107;
wire   [7:0] xor_ln1357_105_fu_2040_p2;
reg   [7:0] xor_ln1357_105_reg_5114;
wire   [7:0] xor_ln1357_106_fu_2045_p2;
reg   [7:0] xor_ln1357_106_reg_5121;
wire   [7:0] xor_ln1357_107_fu_2050_p2;
reg   [7:0] xor_ln1357_107_reg_5128;
wire   [7:0] xor_ln1357_108_fu_2055_p2;
reg   [7:0] xor_ln1357_108_reg_5135;
wire   [7:0] xor_ln1357_109_fu_2060_p2;
reg   [7:0] xor_ln1357_109_reg_5140;
wire   [7:0] xor_ln1357_110_fu_2065_p2;
reg   [7:0] xor_ln1357_110_reg_5145;
wire   [7:0] xor_ln1357_111_fu_2070_p2;
reg   [7:0] xor_ln1357_111_reg_5150;
wire   [7:0] xor_ln719_3_fu_2095_p2;
reg   [7:0] xor_ln719_3_reg_5175;
wire   [7:0] xor_ln1357_124_fu_2101_p2;
reg   [7:0] xor_ln1357_124_reg_5181;
wire   [7:0] xor_ln1357_125_fu_2106_p2;
reg   [7:0] xor_ln1357_125_reg_5188;
wire   [7:0] xor_ln1357_126_fu_2111_p2;
reg   [7:0] xor_ln1357_126_reg_5195;
wire   [7:0] xor_ln1357_127_fu_2116_p2;
reg   [7:0] xor_ln1357_127_reg_5202;
wire   [7:0] xor_ln1357_112_fu_2141_p2;
reg   [7:0] xor_ln1357_112_reg_5229;
wire    ap_CS_fsm_state10;
wire   [7:0] xor_ln1357_113_fu_2145_p2;
reg   [7:0] xor_ln1357_113_reg_5234;
wire   [7:0] xor_ln1357_114_fu_2150_p2;
reg   [7:0] xor_ln1357_114_reg_5239;
wire   [7:0] xor_ln1357_115_fu_2155_p2;
reg   [7:0] xor_ln1357_115_reg_5244;
wire   [7:0] xor_ln1357_128_fu_2166_p2;
reg   [7:0] xor_ln1357_128_reg_5249;
wire   [7:0] xor_ln1357_129_fu_2172_p2;
reg   [7:0] xor_ln1357_129_reg_5256;
wire   [7:0] xor_ln1357_130_fu_2178_p2;
reg   [7:0] xor_ln1357_130_reg_5263;
wire   [7:0] xor_ln1357_131_fu_2184_p2;
reg   [7:0] xor_ln1357_131_reg_5270;
wire   [7:0] xor_ln1357_136_fu_2190_p2;
reg   [7:0] xor_ln1357_136_reg_5277;
wire   [7:0] xor_ln1357_137_fu_2195_p2;
reg   [7:0] xor_ln1357_137_reg_5283;
wire   [7:0] xor_ln1357_138_fu_2200_p2;
reg   [7:0] xor_ln1357_138_reg_5289;
wire   [7:0] xor_ln1357_139_fu_2205_p2;
reg   [7:0] xor_ln1357_139_reg_5295;
wire   [7:0] xor_ln1357_140_fu_2210_p2;
reg   [7:0] xor_ln1357_140_reg_5301;
wire   [7:0] xor_ln1357_141_fu_2215_p2;
reg   [7:0] xor_ln1357_141_reg_5306;
wire   [7:0] xor_ln1357_142_fu_2220_p2;
reg   [7:0] xor_ln1357_142_reg_5311;
wire   [7:0] xor_ln1357_143_fu_2225_p2;
reg   [7:0] xor_ln1357_143_reg_5316;
wire   [7:0] xor_ln1357_24_fu_2250_p2;
reg   [7:0] xor_ln1357_24_reg_5341;
wire    ap_CS_fsm_state11;
wire   [7:0] xor_ln1357_25_fu_2254_p2;
reg   [7:0] xor_ln1357_25_reg_5346;
wire   [7:0] xor_ln1357_26_fu_2258_p2;
reg   [7:0] xor_ln1357_26_reg_5351;
wire   [7:0] xor_ln1357_27_fu_2262_p2;
reg   [7:0] xor_ln1357_27_reg_5356;
wire   [7:0] xor_ln1357_36_fu_2266_p2;
reg   [7:0] xor_ln1357_36_reg_5361;
wire   [7:0] xor_ln1357_37_fu_2270_p2;
reg   [7:0] xor_ln1357_37_reg_5366;
wire   [7:0] xor_ln1357_38_fu_2274_p2;
reg   [7:0] xor_ln1357_38_reg_5371;
wire   [7:0] xor_ln1357_39_fu_2278_p2;
reg   [7:0] xor_ln1357_39_reg_5376;
wire   [7:0] xor_ln1357_56_fu_2282_p2;
reg   [7:0] xor_ln1357_56_reg_5381;
wire   [7:0] xor_ln1357_57_fu_2286_p2;
reg   [7:0] xor_ln1357_57_reg_5386;
wire   [7:0] xor_ln1357_58_fu_2290_p2;
reg   [7:0] xor_ln1357_58_reg_5391;
wire   [7:0] xor_ln1357_59_fu_2294_p2;
reg   [7:0] xor_ln1357_59_reg_5396;
wire   [7:0] xor_ln1357_68_fu_2298_p2;
reg   [7:0] xor_ln1357_68_reg_5401;
wire   [7:0] xor_ln1357_69_fu_2302_p2;
reg   [7:0] xor_ln1357_69_reg_5406;
wire   [7:0] xor_ln1357_70_fu_2306_p2;
reg   [7:0] xor_ln1357_70_reg_5411;
wire   [7:0] xor_ln1357_71_fu_2310_p2;
reg   [7:0] xor_ln1357_71_reg_5416;
wire   [7:0] xor_ln1357_88_fu_2314_p2;
reg   [7:0] xor_ln1357_88_reg_5421;
wire   [7:0] xor_ln1357_89_fu_2318_p2;
reg   [7:0] xor_ln1357_89_reg_5426;
wire   [7:0] xor_ln1357_90_fu_2322_p2;
reg   [7:0] xor_ln1357_90_reg_5431;
wire   [7:0] xor_ln1357_91_fu_2326_p2;
reg   [7:0] xor_ln1357_91_reg_5436;
wire   [7:0] xor_ln1357_100_fu_2330_p2;
reg   [7:0] xor_ln1357_100_reg_5441;
wire   [7:0] xor_ln1357_101_fu_2334_p2;
reg   [7:0] xor_ln1357_101_reg_5446;
wire   [7:0] xor_ln1357_102_fu_2338_p2;
reg   [7:0] xor_ln1357_102_reg_5451;
wire   [7:0] xor_ln1357_103_fu_2342_p2;
reg   [7:0] xor_ln1357_103_reg_5456;
wire   [7:0] xor_ln1357_116_fu_2346_p2;
reg   [7:0] xor_ln1357_116_reg_5461;
wire   [7:0] xor_ln1357_117_fu_2350_p2;
reg   [7:0] xor_ln1357_117_reg_5466;
wire   [7:0] xor_ln1357_118_fu_2355_p2;
reg   [7:0] xor_ln1357_118_reg_5471;
wire   [7:0] xor_ln1357_119_fu_2360_p2;
reg   [7:0] xor_ln1357_119_reg_5476;
wire   [7:0] xor_ln1357_120_fu_2365_p2;
reg   [7:0] xor_ln1357_120_reg_5481;
wire   [7:0] xor_ln1357_121_fu_2370_p2;
reg   [7:0] xor_ln1357_121_reg_5486;
wire   [7:0] xor_ln1357_122_fu_2375_p2;
reg   [7:0] xor_ln1357_122_reg_5491;
wire   [7:0] xor_ln1357_123_fu_2380_p2;
reg   [7:0] xor_ln1357_123_reg_5496;
wire   [7:0] xor_ln1357_132_fu_2385_p2;
reg   [7:0] xor_ln1357_132_reg_5501;
wire   [7:0] xor_ln1357_133_fu_2390_p2;
reg   [7:0] xor_ln1357_133_reg_5506;
wire   [7:0] xor_ln1357_134_fu_2395_p2;
reg   [7:0] xor_ln1357_134_reg_5511;
wire   [7:0] xor_ln1357_135_fu_2400_p2;
reg   [7:0] xor_ln1357_135_reg_5516;
wire   [7:0] xor_ln719_4_fu_2405_p2;
reg   [7:0] xor_ln719_4_reg_5521;
wire   [7:0] xor_ln1357_145_fu_2411_p2;
reg   [7:0] xor_ln1357_145_reg_5526;
wire   [7:0] xor_ln1357_146_fu_2416_p2;
reg   [7:0] xor_ln1357_146_reg_5537;
wire   [7:0] xor_ln1357_147_fu_2421_p2;
reg   [7:0] xor_ln1357_147_reg_5548;
wire   [7:0] xor_ln1357_148_fu_2426_p2;
reg   [7:0] xor_ln1357_148_reg_5559;
wire   [7:0] xor_ln1357_149_fu_2432_p2;
reg   [7:0] xor_ln1357_149_reg_5570;
wire   [7:0] xor_ln1357_150_fu_2438_p2;
reg   [7:0] xor_ln1357_150_reg_5581;
wire   [7:0] xor_ln1357_151_fu_2444_p2;
reg   [7:0] xor_ln1357_151_reg_5592;
wire   [7:0] xor_ln1357_152_fu_2450_p2;
reg   [7:0] xor_ln1357_152_reg_5603;
wire   [7:0] xor_ln1357_153_fu_2455_p2;
reg   [7:0] xor_ln1357_153_reg_5614;
wire   [7:0] xor_ln1357_154_fu_2460_p2;
reg   [7:0] xor_ln1357_154_reg_5625;
wire   [7:0] xor_ln1357_155_fu_2465_p2;
reg   [7:0] xor_ln1357_155_reg_5636;
wire   [7:0] xor_ln1357_156_fu_2470_p2;
reg   [7:0] xor_ln1357_156_reg_5647;
wire   [7:0] xor_ln1357_157_fu_2475_p2;
reg   [7:0] xor_ln1357_157_reg_5658;
wire   [7:0] xor_ln1357_158_fu_2480_p2;
reg   [7:0] xor_ln1357_158_reg_5669;
wire   [7:0] xor_ln1357_159_fu_2485_p2;
reg   [7:0] xor_ln1357_159_reg_5680;
wire   [7:0] cipher_0_V_fu_2654_p2;
wire   [7:0] cipher_1_V_fu_2659_p2;
wire   [7:0] cipher_2_V_fu_2664_p2;
wire   [7:0] cipher_3_V_fu_2669_p2;
wire   [7:0] cipher_4_V_fu_2674_p2;
wire   [7:0] cipher_5_V_fu_2679_p2;
wire   [7:0] cipher_6_V_fu_2684_p2;
wire   [7:0] cipher_7_V_fu_2689_p2;
wire   [7:0] cipher_8_V_fu_2694_p2;
wire   [7:0] cipher_9_V_fu_2699_p2;
wire   [7:0] cipher_10_V_fu_2704_p2;
wire   [7:0] cipher_11_V_fu_2709_p2;
wire   [7:0] cipher_12_V_fu_2714_p2;
wire   [7:0] cipher_13_V_fu_2719_p2;
wire   [7:0] cipher_14_V_fu_2724_p2;
wire   [7:0] cipher_15_V_fu_2729_p2;
wire   [0:0] icmp_ln196_fu_2734_p2;
reg   [0:0] icmp_ln196_reg_5771;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state12_pp0_stage0_iter0;
wire    ap_block_state13_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] j_V_fu_2820_p2;
reg   [3:0] j_V_reg_5855;
reg    ap_enable_reg_pp0_iter0;
wire   [7:0] cipher_0_V_3_fu_3298_p2;
reg    ap_enable_reg_pp0_iter1;
wire   [7:0] cipher_1_V_4_fu_3350_p2;
wire   [7:0] cipher_2_V_4_fu_3396_p2;
wire   [7:0] cipher_3_V_4_fu_3448_p2;
wire   [7:0] cipher_4_V_3_fu_3500_p2;
wire   [7:0] cipher_5_V_4_fu_3552_p2;
wire   [7:0] cipher_6_V_4_fu_3598_p2;
wire   [7:0] cipher_7_V_4_fu_3650_p2;
wire   [7:0] cipher_8_V_3_fu_3702_p2;
wire   [7:0] cipher_9_V_4_fu_3754_p2;
wire   [7:0] cipher_10_V_4_fu_3800_p2;
wire   [7:0] cipher_11_V_4_fu_3852_p2;
wire   [7:0] cipher_12_V_3_fu_3904_p2;
wire   [7:0] cipher_13_V_4_fu_3956_p2;
wire   [7:0] cipher_14_V_4_fu_4002_p2;
wire   [7:0] cipher_15_V_4_fu_4054_p2;
wire    ap_CS_fsm_state14;
wire   [511:0] data_data_V_fu_4261_p1;
wire   [31:0] add_ln112_fu_4281_p2;
wire    ap_CS_fsm_state17;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state12;
reg   [7:0] ap_phi_mux_cipher_V_11_0_phi_fu_917_p4;
wire    ap_block_pp0_stage0;
reg   [7:0] ap_phi_mux_cipher_V_10_0_phi_fu_927_p4;
reg   [7:0] ap_phi_mux_cipher_V_9_0_phi_fu_937_p4;
reg   [7:0] ap_phi_mux_cipher_V_8_0_phi_fu_947_p4;
reg   [7:0] ap_phi_mux_cipher_V_7_0_phi_fu_957_p4;
reg   [7:0] ap_phi_mux_cipher_V_6_0_phi_fu_967_p4;
reg   [7:0] ap_phi_mux_cipher_V_5_0_phi_fu_977_p4;
reg   [7:0] ap_phi_mux_cipher_V_4_0_phi_fu_987_p4;
reg   [7:0] ap_phi_mux_cipher_V_3_0_phi_fu_997_p4;
reg   [7:0] ap_phi_mux_cipher_V_2_0_phi_fu_1007_p4;
reg   [7:0] ap_phi_mux_cipher_V_1_0_phi_fu_1017_p4;
reg   [7:0] ap_phi_mux_cipher_V_0_0_phi_fu_1027_p4;
reg   [7:0] ap_phi_mux_cipher_V_12_0_phi_fu_1037_p4;
reg   [7:0] ap_phi_mux_cipher_V_13_0_phi_fu_1047_p4;
reg   [7:0] ap_phi_mux_cipher_V_14_0_phi_fu_1057_p4;
reg   [7:0] ap_phi_mux_cipher_V_15_0_phi_fu_1067_p4;
reg   [3:0] ap_phi_mux_p_02329_1_phi_fu_1078_p4;
wire   [7:0] ap_phi_reg_pp0_iter0_phi_ln719_reg_1086;
reg   [7:0] ap_phi_reg_pp0_iter1_phi_ln719_reg_1086;
reg   [0:0] ap_phi_mux_flag_flag_3_phi_fu_1113_p4;
reg   [0:0] flag_flag_3_reg_1109;
reg    ap_block_state16;
reg    ap_predicate_op777_write_state16;
reg    ap_block_state16_io;
reg   [0:0] ap_phi_mux_flag_flag_4_phi_fu_1126_p10;
reg   [0:0] flag_flag_4_reg_1121;
reg   [31:0] ap_phi_mux_flag_new_4_phi_fu_1146_p10;
reg   [31:0] flag_new_4_reg_1142;
reg   [0:0] flag_flag_0_reg_1161;
reg   [31:0] flag_load_2_reg_1176;
wire   [63:0] zext_ln544_fu_1405_p1;
wire   [63:0] zext_ln544_1_fu_1410_p1;
wire   [63:0] zext_ln544_2_fu_1415_p1;
wire   [63:0] zext_ln544_3_fu_1420_p1;
wire   [63:0] zext_ln544_4_fu_1547_p1;
wire   [63:0] zext_ln544_5_fu_1552_p1;
wire   [63:0] zext_ln544_6_fu_1557_p1;
wire   [63:0] zext_ln544_7_fu_1562_p1;
wire   [63:0] zext_ln544_8_fu_1613_p1;
wire   [63:0] zext_ln544_9_fu_1618_p1;
wire   [63:0] zext_ln544_10_fu_1623_p1;
wire   [63:0] zext_ln544_11_fu_1628_p1;
wire   [63:0] zext_ln544_12_fu_1722_p1;
wire   [63:0] zext_ln544_13_fu_1727_p1;
wire   [63:0] zext_ln544_14_fu_1732_p1;
wire   [63:0] zext_ln544_15_fu_1737_p1;
wire   [63:0] zext_ln544_16_fu_1768_p1;
wire   [63:0] zext_ln544_17_fu_1773_p1;
wire   [63:0] zext_ln544_18_fu_1778_p1;
wire   [63:0] zext_ln544_19_fu_1783_p1;
wire   [63:0] zext_ln544_20_fu_1877_p1;
wire   [63:0] zext_ln544_21_fu_1882_p1;
wire   [63:0] zext_ln544_22_fu_1887_p1;
wire   [63:0] zext_ln544_23_fu_1892_p1;
wire   [63:0] zext_ln544_24_fu_1966_p1;
wire   [63:0] zext_ln544_25_fu_1971_p1;
wire   [63:0] zext_ln544_26_fu_1976_p1;
wire   [63:0] zext_ln544_27_fu_1981_p1;
wire   [63:0] zext_ln544_28_fu_2075_p1;
wire   [63:0] zext_ln544_29_fu_2080_p1;
wire   [63:0] zext_ln544_30_fu_2085_p1;
wire   [63:0] zext_ln544_31_fu_2090_p1;
wire   [63:0] zext_ln544_32_fu_2121_p1;
wire   [63:0] zext_ln544_33_fu_2126_p1;
wire   [63:0] zext_ln544_34_fu_2131_p1;
wire   [63:0] zext_ln544_35_fu_2136_p1;
wire   [63:0] zext_ln544_36_fu_2230_p1;
wire   [63:0] zext_ln544_37_fu_2235_p1;
wire   [63:0] zext_ln544_38_fu_2240_p1;
wire   [63:0] zext_ln544_39_fu_2245_p1;
wire   [63:0] zext_ln544_56_fu_2740_p1;
wire   [63:0] zext_ln544_57_fu_2745_p1;
wire   [63:0] zext_ln544_58_fu_2750_p1;
wire   [63:0] zext_ln544_59_fu_2755_p1;
wire   [63:0] zext_ln544_60_fu_2760_p1;
wire   [63:0] zext_ln544_61_fu_2765_p1;
wire   [63:0] zext_ln544_62_fu_2770_p1;
wire   [63:0] zext_ln544_63_fu_2775_p1;
wire   [63:0] zext_ln544_64_fu_2780_p1;
wire   [63:0] zext_ln544_65_fu_2785_p1;
wire   [63:0] zext_ln544_66_fu_2790_p1;
wire   [63:0] zext_ln544_67_fu_2795_p1;
wire   [63:0] zext_ln544_68_fu_2800_p1;
wire   [63:0] zext_ln544_69_fu_2805_p1;
wire   [63:0] zext_ln544_70_fu_2810_p1;
wire   [63:0] zext_ln544_71_fu_2815_p1;
wire   [63:0] zext_ln544_40_fu_4060_p1;
wire   [63:0] zext_ln544_41_fu_4065_p1;
wire   [63:0] zext_ln544_42_fu_4070_p1;
wire   [63:0] zext_ln544_43_fu_4075_p1;
wire   [63:0] zext_ln544_44_fu_4080_p1;
wire   [63:0] zext_ln544_45_fu_4085_p1;
wire   [63:0] zext_ln544_46_fu_4090_p1;
wire   [63:0] zext_ln544_47_fu_4095_p1;
wire   [63:0] zext_ln544_48_fu_4100_p1;
wire   [63:0] zext_ln544_49_fu_4105_p1;
wire   [63:0] zext_ln544_50_fu_4110_p1;
wire   [63:0] zext_ln544_51_fu_4115_p1;
wire   [63:0] zext_ln544_52_fu_4120_p1;
wire   [63:0] zext_ln544_53_fu_4125_p1;
wire   [63:0] zext_ln544_54_fu_4130_p1;
wire   [63:0] zext_ln544_55_fu_4135_p1;
wire   [127:0] trunc_ln209_fu_1439_p1;
wire   [127:0] trunc_ln209_1_fu_4272_p1;
wire   [30:0] tmp_2_fu_1203_p4;
wire   [29:0] tmp_3_fu_1225_p4;
wire   [7:0] xor_ln1357_144_fu_1461_p2;
wire   [7:0] xor_ln1357_160_fu_1652_p2;
wire   [7:0] xor_ln1357_161_fu_1807_p2;
wire   [7:0] xor_ln1357_162_fu_2005_p2;
wire   [7:0] xor_ln1357_163_fu_2160_p2;
wire   [7:0] trunc_ln214_30_fu_2638_p4;
wire   [7:0] trunc_ln214_29_fu_2628_p4;
wire   [7:0] trunc_ln214_28_fu_2618_p4;
wire   [7:0] trunc_ln214_27_fu_2608_p4;
wire   [7:0] trunc_ln214_26_fu_2598_p4;
wire   [7:0] trunc_ln214_25_fu_2588_p4;
wire   [7:0] trunc_ln214_24_fu_2578_p4;
wire   [7:0] trunc_ln214_23_fu_2568_p4;
wire   [7:0] trunc_ln214_22_fu_2558_p4;
wire   [7:0] trunc_ln214_21_fu_2548_p4;
wire   [7:0] trunc_ln214_20_fu_2538_p4;
wire   [7:0] trunc_ln214_19_fu_2528_p4;
wire   [7:0] trunc_ln214_18_fu_2518_p4;
wire   [7:0] trunc_ln214_17_fu_2508_p4;
wire   [7:0] trunc_ln214_16_fu_2498_p4;
wire   [7:0] trunc_ln214_15_fu_2494_p1;
wire   [7:0] shl_ln1503_fu_2834_p2;
wire   [0:0] tmp_4_fu_2826_p3;
wire   [7:0] xor_ln1503_fu_2840_p2;
wire   [7:0] shl_ln1503_1_fu_2862_p2;
wire   [0:0] tmp_5_fu_2854_p3;
wire   [7:0] xor_ln1503_1_fu_2868_p2;
wire   [7:0] shl_ln1503_2_fu_2890_p2;
wire   [0:0] tmp_6_fu_2882_p3;
wire   [7:0] xor_ln1503_2_fu_2896_p2;
wire   [7:0] shl_ln1503_3_fu_2918_p2;
wire   [0:0] tmp_7_fu_2910_p3;
wire   [7:0] xor_ln1503_3_fu_2924_p2;
wire   [7:0] shl_ln1503_4_fu_2946_p2;
wire   [0:0] tmp_8_fu_2938_p3;
wire   [7:0] xor_ln1503_4_fu_2952_p2;
wire   [7:0] shl_ln1503_5_fu_2974_p2;
wire   [0:0] tmp_9_fu_2966_p3;
wire   [7:0] xor_ln1503_5_fu_2980_p2;
wire   [7:0] shl_ln1503_6_fu_3002_p2;
wire   [0:0] tmp_10_fu_2994_p3;
wire   [7:0] xor_ln1503_6_fu_3008_p2;
wire   [7:0] shl_ln1503_7_fu_3030_p2;
wire   [0:0] tmp_11_fu_3022_p3;
wire   [7:0] xor_ln1503_7_fu_3036_p2;
wire   [7:0] shl_ln1503_8_fu_3058_p2;
wire   [0:0] tmp_12_fu_3050_p3;
wire   [7:0] xor_ln1503_8_fu_3064_p2;
wire   [7:0] shl_ln1503_9_fu_3086_p2;
wire   [0:0] tmp_13_fu_3078_p3;
wire   [7:0] xor_ln1503_9_fu_3092_p2;
wire   [7:0] shl_ln1503_10_fu_3114_p2;
wire   [0:0] tmp_14_fu_3106_p3;
wire   [7:0] xor_ln1503_10_fu_3120_p2;
wire   [7:0] shl_ln1503_11_fu_3142_p2;
wire   [0:0] tmp_15_fu_3134_p3;
wire   [7:0] xor_ln1503_11_fu_3148_p2;
wire   [7:0] shl_ln1503_12_fu_3170_p2;
wire   [0:0] tmp_16_fu_3162_p3;
wire   [7:0] xor_ln1503_12_fu_3176_p2;
wire   [7:0] shl_ln1503_13_fu_3198_p2;
wire   [0:0] tmp_17_fu_3190_p3;
wire   [7:0] xor_ln1503_13_fu_3204_p2;
wire   [7:0] shl_ln1503_14_fu_3226_p2;
wire   [0:0] tmp_18_fu_3218_p3;
wire   [7:0] xor_ln1503_14_fu_3232_p2;
wire   [7:0] shl_ln1503_15_fu_3254_p2;
wire   [0:0] tmp_19_fu_3246_p3;
wire   [7:0] xor_ln1503_15_fu_3260_p2;
wire   [7:0] xor_ln719_22_fu_3274_p2;
wire   [7:0] temp_column_b_1_V_fu_2874_p3;
wire   [7:0] xor_ln719_24_fu_3286_p2;
wire   [7:0] temp_column_b_0_V_fu_2846_p3;
wire   [7:0] xor_ln719_25_fu_3292_p2;
wire   [7:0] xor_ln719_23_fu_3280_p2;
wire   [7:0] xor_ln719_27_fu_3326_p2;
wire   [7:0] temp_column_b_2_V_fu_2902_p3;
wire   [7:0] phi_ln719_1_fu_3304_p18;
wire   [7:0] xor_ln719_29_fu_3338_p2;
wire   [7:0] xor_ln719_30_fu_3344_p2;
wire   [7:0] xor_ln719_28_fu_3332_p2;
wire   [7:0] temp_column_b_3_V_fu_2930_p3;
wire   [7:0] phi_ln719_2_fu_3356_p18;
wire   [7:0] xor_ln719_33_fu_3384_p2;
wire   [7:0] xor_ln719_34_fu_3390_p2;
wire   [7:0] xor_ln719_32_fu_3378_p2;
wire   [7:0] xor_ln719_36_fu_3424_p2;
wire   [7:0] phi_ln719_3_fu_3402_p18;
wire   [7:0] xor_ln719_38_fu_3436_p2;
wire   [7:0] xor_ln719_39_fu_3442_p2;
wire   [7:0] xor_ln719_37_fu_3430_p2;
wire   [7:0] xor_ln719_41_fu_3476_p2;
wire   [7:0] temp_column_b_1_V_1_fu_2986_p3;
wire   [7:0] phi_ln719_4_fu_3454_p18;
wire   [7:0] xor_ln719_43_fu_3488_p2;
wire   [7:0] temp_column_b_0_V_1_fu_2958_p3;
wire   [7:0] xor_ln719_44_fu_3494_p2;
wire   [7:0] xor_ln719_42_fu_3482_p2;
wire   [7:0] xor_ln719_46_fu_3528_p2;
wire   [7:0] temp_column_b_2_V_1_fu_3014_p3;
wire   [7:0] phi_ln719_5_fu_3506_p18;
wire   [7:0] xor_ln719_48_fu_3540_p2;
wire   [7:0] xor_ln719_49_fu_3546_p2;
wire   [7:0] xor_ln719_47_fu_3534_p2;
wire   [7:0] temp_column_b_3_V_1_fu_3042_p3;
wire   [7:0] phi_ln719_6_fu_3558_p18;
wire   [7:0] xor_ln719_52_fu_3586_p2;
wire   [7:0] xor_ln719_53_fu_3592_p2;
wire   [7:0] xor_ln719_51_fu_3580_p2;
wire   [7:0] xor_ln719_55_fu_3626_p2;
wire   [7:0] phi_ln719_7_fu_3604_p18;
wire   [7:0] xor_ln719_57_fu_3638_p2;
wire   [7:0] xor_ln719_58_fu_3644_p2;
wire   [7:0] xor_ln719_56_fu_3632_p2;
wire   [7:0] xor_ln719_60_fu_3678_p2;
wire   [7:0] temp_column_b_1_V_2_fu_3098_p3;
wire   [7:0] phi_ln719_8_fu_3656_p18;
wire   [7:0] xor_ln719_62_fu_3690_p2;
wire   [7:0] temp_column_b_0_V_2_fu_3070_p3;
wire   [7:0] xor_ln719_63_fu_3696_p2;
wire   [7:0] xor_ln719_61_fu_3684_p2;
wire   [7:0] xor_ln719_65_fu_3730_p2;
wire   [7:0] temp_column_b_2_V_2_fu_3126_p3;
wire   [7:0] phi_ln719_9_fu_3708_p18;
wire   [7:0] xor_ln719_67_fu_3742_p2;
wire   [7:0] xor_ln719_68_fu_3748_p2;
wire   [7:0] xor_ln719_66_fu_3736_p2;
wire   [7:0] temp_column_b_3_V_2_fu_3154_p3;
wire   [7:0] phi_ln719_s_fu_3760_p18;
wire   [7:0] xor_ln719_71_fu_3788_p2;
wire   [7:0] xor_ln719_72_fu_3794_p2;
wire   [7:0] xor_ln719_70_fu_3782_p2;
wire   [7:0] xor_ln719_74_fu_3828_p2;
wire   [7:0] phi_ln719_10_fu_3806_p18;
wire   [7:0] xor_ln719_76_fu_3840_p2;
wire   [7:0] xor_ln719_77_fu_3846_p2;
wire   [7:0] xor_ln719_75_fu_3834_p2;
wire   [7:0] xor_ln719_79_fu_3880_p2;
wire   [7:0] temp_column_b_1_V_3_fu_3210_p3;
wire   [7:0] phi_ln719_11_fu_3858_p18;
wire   [7:0] xor_ln719_81_fu_3892_p2;
wire   [7:0] temp_column_b_0_V_3_fu_3182_p3;
wire   [7:0] xor_ln719_82_fu_3898_p2;
wire   [7:0] xor_ln719_80_fu_3886_p2;
wire   [7:0] xor_ln719_84_fu_3932_p2;
wire   [7:0] temp_column_b_2_V_3_fu_3238_p3;
wire   [7:0] phi_ln719_12_fu_3910_p18;
wire   [7:0] xor_ln719_86_fu_3944_p2;
wire   [7:0] xor_ln719_87_fu_3950_p2;
wire   [7:0] xor_ln719_85_fu_3938_p2;
wire   [7:0] temp_column_b_3_V_3_fu_3266_p3;
wire   [7:0] phi_ln719_13_fu_3962_p18;
wire   [7:0] xor_ln719_90_fu_3990_p2;
wire   [7:0] xor_ln719_91_fu_3996_p2;
wire   [7:0] xor_ln719_89_fu_3984_p2;
wire   [7:0] xor_ln719_93_fu_4030_p2;
wire   [7:0] phi_ln719_14_fu_4008_p18;
wire   [7:0] xor_ln719_95_fu_4042_p2;
wire   [7:0] xor_ln719_96_fu_4048_p2;
wire   [7:0] xor_ln719_94_fu_4036_p2;
wire   [7:0] xor_ln719_5_fu_4140_p2;
wire   [7:0] cipher_15_V_3_fu_4220_p2;
wire   [7:0] cipher_14_V_3_fu_4215_p2;
wire   [7:0] cipher_13_V_3_fu_4210_p2;
wire   [7:0] cipher_12_V_2_fu_4205_p2;
wire   [7:0] cipher_11_V_3_fu_4200_p2;
wire   [7:0] cipher_10_V_3_fu_4195_p2;
wire   [7:0] cipher_9_V_3_fu_4190_p2;
wire   [7:0] cipher_8_V_2_fu_4185_p2;
wire   [7:0] cipher_7_V_3_fu_4180_p2;
wire   [7:0] cipher_6_V_3_fu_4175_p2;
wire   [7:0] cipher_5_V_3_fu_4170_p2;
wire   [7:0] cipher_4_V_2_fu_4165_p2;
wire   [7:0] cipher_3_V_3_fu_4160_p2;
wire   [7:0] cipher_2_V_3_fu_4155_p2;
wire   [7:0] cipher_1_V_3_fu_4150_p2;
wire   [7:0] cipher_0_V_2_fu_4144_p2;
wire   [127:0] cipherT_V_fu_4225_p17;
reg   [15:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_1306;
reg    ap_condition_1135;
reg    ap_condition_611;

// power-on initialization
initial begin
#0 out_V_data_V_1_sel_rd = 1'b0;
#0 out_V_data_V_1_sel_wr = 1'b0;
#0 out_V_data_V_1_state = 2'd0;
#0 out_V_dest_V_1_sel_rd = 1'b0;
#0 out_V_dest_V_1_state = 2'd0;
#0 out_V_last_V_1_sel_rd = 1'b0;
#0 out_V_last_V_1_state = 2'd0;
#0 out_V_id_V_1_sel_rd = 1'b0;
#0 out_V_id_V_1_state = 2'd0;
#0 out_V_user_V_1_sel_rd = 1'b0;
#0 out_V_user_V_1_state = 2'd0;
#0 out_V_keep_V_1_sel_rd = 1'b0;
#0 out_V_keep_V_1_state = 2'd0;
#0 flag = 32'd0;
#0 plainT_V = 128'd0;
#0 keyT_V = 128'd0;
#0 ap_CS_fsm = 16'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

kern_enc_SBOX_V #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
SBOX_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(SBOX_V_address0),
    .ce0(SBOX_V_ce0),
    .q0(SBOX_V_q0),
    .address1(SBOX_V_address1),
    .ce1(SBOX_V_ce1),
    .q1(SBOX_V_q1),
    .address2(SBOX_V_address2),
    .ce2(SBOX_V_ce2),
    .q2(SBOX_V_q2),
    .address3(SBOX_V_address3),
    .ce3(SBOX_V_ce3),
    .q3(SBOX_V_q3),
    .address4(SBOX_V_address4),
    .ce4(SBOX_V_ce4),
    .q4(SBOX_V_q4),
    .address5(SBOX_V_address5),
    .ce5(SBOX_V_ce5),
    .q5(SBOX_V_q5),
    .address6(SBOX_V_address6),
    .ce6(SBOX_V_ce6),
    .q6(SBOX_V_q6),
    .address7(SBOX_V_address7),
    .ce7(SBOX_V_ce7),
    .q7(SBOX_V_q7),
    .address8(SBOX_V_address8),
    .ce8(SBOX_V_ce8),
    .q8(SBOX_V_q8),
    .address9(SBOX_V_address9),
    .ce9(SBOX_V_ce9),
    .q9(SBOX_V_q9),
    .address10(SBOX_V_address10),
    .ce10(SBOX_V_ce10),
    .q10(SBOX_V_q10),
    .address11(SBOX_V_address11),
    .ce11(SBOX_V_ce11),
    .q11(SBOX_V_q11),
    .address12(SBOX_V_address12),
    .ce12(SBOX_V_ce12),
    .q12(SBOX_V_q12),
    .address13(SBOX_V_address13),
    .ce13(SBOX_V_ce13),
    .q13(SBOX_V_q13),
    .address14(SBOX_V_address14),
    .ce14(SBOX_V_ce14),
    .q14(SBOX_V_q14),
    .address15(SBOX_V_address15),
    .ce15(SBOX_V_ce15),
    .q15(SBOX_V_q15)
);

kern_enc_mux_164_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
kern_enc_mux_164_8_1_1_U1(
    .din0(trunc_ln214_13_reg_4414),
    .din1(xor_ln1357_1_reg_4473),
    .din2(xor_ln1357_17_reg_4665),
    .din3(xor_ln1357_33_reg_4687),
    .din4(xor_ln1357_49_reg_4839),
    .din5(xor_ln1357_65_reg_4861),
    .din6(xor_ln1357_81_reg_5064),
    .din7(xor_ln1357_97_reg_5086),
    .din8(xor_ln1357_113_reg_5234),
    .din9(xor_ln1357_129_reg_5256),
    .din10(xor_ln1357_145_reg_5526),
    .din11(xor_ln1357_145_reg_5526),
    .din12(xor_ln1357_145_reg_5526),
    .din13(xor_ln1357_145_reg_5526),
    .din14(xor_ln1357_145_reg_5526),
    .din15(xor_ln1357_145_reg_5526),
    .din16(p_02329_1_reg_1074),
    .dout(phi_ln719_1_fu_3304_p18)
);

kern_enc_mux_164_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
kern_enc_mux_164_8_1_1_U2(
    .din0(trunc_ln214_12_reg_4407),
    .din1(xor_ln1357_2_reg_4479),
    .din2(xor_ln1357_18_reg_4670),
    .din3(xor_ln1357_34_reg_4694),
    .din4(xor_ln1357_50_reg_4844),
    .din5(xor_ln1357_66_reg_4868),
    .din6(xor_ln1357_82_reg_5069),
    .din7(xor_ln1357_98_reg_5093),
    .din8(xor_ln1357_114_reg_5239),
    .din9(xor_ln1357_130_reg_5263),
    .din10(xor_ln1357_146_reg_5537),
    .din11(xor_ln1357_146_reg_5537),
    .din12(xor_ln1357_146_reg_5537),
    .din13(xor_ln1357_146_reg_5537),
    .din14(xor_ln1357_146_reg_5537),
    .din15(xor_ln1357_146_reg_5537),
    .din16(p_02329_1_reg_1074),
    .dout(phi_ln719_2_fu_3356_p18)
);

kern_enc_mux_164_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
kern_enc_mux_164_8_1_1_U3(
    .din0(trunc_ln214_11_reg_4400),
    .din1(xor_ln1357_3_reg_4485),
    .din2(xor_ln1357_19_reg_4675),
    .din3(xor_ln1357_35_reg_4701),
    .din4(xor_ln1357_51_reg_4849),
    .din5(xor_ln1357_67_reg_4875),
    .din6(xor_ln1357_83_reg_5074),
    .din7(xor_ln1357_99_reg_5100),
    .din8(xor_ln1357_115_reg_5244),
    .din9(xor_ln1357_131_reg_5270),
    .din10(xor_ln1357_147_reg_5548),
    .din11(xor_ln1357_147_reg_5548),
    .din12(xor_ln1357_147_reg_5548),
    .din13(xor_ln1357_147_reg_5548),
    .din14(xor_ln1357_147_reg_5548),
    .din15(xor_ln1357_147_reg_5548),
    .din16(p_02329_1_reg_1074),
    .dout(phi_ln719_3_fu_3402_p18)
);

kern_enc_mux_164_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
kern_enc_mux_164_8_1_1_U4(
    .din0(trunc_ln214_10_reg_4392),
    .din1(xor_ln1357_4_reg_4491),
    .din2(xor_ln1357_20_reg_4584),
    .din3(xor_ln1357_36_reg_5361),
    .din4(xor_ln1357_52_reg_4950),
    .din5(xor_ln1357_68_reg_5401),
    .din6(xor_ln1357_84_reg_4983),
    .din7(xor_ln1357_100_reg_5441),
    .din8(xor_ln1357_116_reg_5461),
    .din9(xor_ln1357_132_reg_5501),
    .din10(xor_ln1357_148_reg_5559),
    .din11(xor_ln1357_148_reg_5559),
    .din12(xor_ln1357_148_reg_5559),
    .din13(xor_ln1357_148_reg_5559),
    .din14(xor_ln1357_148_reg_5559),
    .din15(xor_ln1357_148_reg_5559),
    .din16(p_02329_1_reg_1074),
    .dout(phi_ln719_4_fu_3454_p18)
);

kern_enc_mux_164_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
kern_enc_mux_164_8_1_1_U5(
    .din0(trunc_ln214_s_reg_4384),
    .din1(xor_ln1357_5_reg_4496),
    .din2(xor_ln1357_21_reg_4592),
    .din3(xor_ln1357_37_reg_5366),
    .din4(xor_ln1357_53_reg_4957),
    .din5(xor_ln1357_69_reg_5406),
    .din6(xor_ln1357_85_reg_4991),
    .din7(xor_ln1357_101_reg_5446),
    .din8(xor_ln1357_117_reg_5466),
    .din9(xor_ln1357_133_reg_5506),
    .din10(xor_ln1357_149_reg_5570),
    .din11(xor_ln1357_149_reg_5570),
    .din12(xor_ln1357_149_reg_5570),
    .din13(xor_ln1357_149_reg_5570),
    .din14(xor_ln1357_149_reg_5570),
    .din15(xor_ln1357_149_reg_5570),
    .din16(p_02329_1_reg_1074),
    .dout(phi_ln719_5_fu_3506_p18)
);

kern_enc_mux_164_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
kern_enc_mux_164_8_1_1_U6(
    .din0(trunc_ln214_9_reg_4376),
    .din1(xor_ln1357_6_reg_4501),
    .din2(xor_ln1357_22_reg_4600),
    .din3(xor_ln1357_38_reg_5371),
    .din4(xor_ln1357_54_reg_4964),
    .din5(xor_ln1357_70_reg_5411),
    .din6(xor_ln1357_86_reg_4999),
    .din7(xor_ln1357_102_reg_5451),
    .din8(xor_ln1357_118_reg_5471),
    .din9(xor_ln1357_134_reg_5511),
    .din10(xor_ln1357_150_reg_5581),
    .din11(xor_ln1357_150_reg_5581),
    .din12(xor_ln1357_150_reg_5581),
    .din13(xor_ln1357_150_reg_5581),
    .din14(xor_ln1357_150_reg_5581),
    .din15(xor_ln1357_150_reg_5581),
    .din16(p_02329_1_reg_1074),
    .dout(phi_ln719_6_fu_3558_p18)
);

kern_enc_mux_164_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
kern_enc_mux_164_8_1_1_U7(
    .din0(trunc_ln214_8_reg_4368),
    .din1(xor_ln1357_7_reg_4506),
    .din2(xor_ln1357_23_reg_4608),
    .din3(xor_ln1357_39_reg_5376),
    .din4(xor_ln1357_55_reg_4971),
    .din5(xor_ln1357_71_reg_5416),
    .din6(xor_ln1357_87_reg_5007),
    .din7(xor_ln1357_103_reg_5456),
    .din8(xor_ln1357_119_reg_5476),
    .din9(xor_ln1357_135_reg_5516),
    .din10(xor_ln1357_151_reg_5592),
    .din11(xor_ln1357_151_reg_5592),
    .din12(xor_ln1357_151_reg_5592),
    .din13(xor_ln1357_151_reg_5592),
    .din14(xor_ln1357_151_reg_5592),
    .din15(xor_ln1357_151_reg_5592),
    .din16(p_02329_1_reg_1074),
    .dout(phi_ln719_7_fu_3604_p18)
);

kern_enc_mux_164_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
kern_enc_mux_164_8_1_1_U8(
    .din0(trunc_ln214_7_reg_4361),
    .din1(xor_ln1357_8_reg_4511),
    .din2(xor_ln1357_24_reg_5341),
    .din3(xor_ln1357_40_reg_4708),
    .din4(xor_ln1357_56_reg_5381),
    .din5(xor_ln1357_72_reg_4882),
    .din6(xor_ln1357_88_reg_5421),
    .din7(xor_ln1357_104_reg_5107),
    .din8(xor_ln1357_120_reg_5481),
    .din9(xor_ln1357_136_reg_5277),
    .din10(xor_ln1357_152_reg_5603),
    .din11(xor_ln1357_152_reg_5603),
    .din12(xor_ln1357_152_reg_5603),
    .din13(xor_ln1357_152_reg_5603),
    .din14(xor_ln1357_152_reg_5603),
    .din15(xor_ln1357_152_reg_5603),
    .din16(p_02329_1_reg_1074),
    .dout(phi_ln719_8_fu_3656_p18)
);

kern_enc_mux_164_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
kern_enc_mux_164_8_1_1_U9(
    .din0(trunc_ln214_6_reg_4354),
    .din1(xor_ln1357_9_reg_4518),
    .din2(xor_ln1357_25_reg_5346),
    .din3(xor_ln1357_41_reg_4715),
    .din4(xor_ln1357_57_reg_5386),
    .din5(xor_ln1357_73_reg_4889),
    .din6(xor_ln1357_89_reg_5426),
    .din7(xor_ln1357_105_reg_5114),
    .din8(xor_ln1357_121_reg_5486),
    .din9(xor_ln1357_137_reg_5283),
    .din10(xor_ln1357_153_reg_5614),
    .din11(xor_ln1357_153_reg_5614),
    .din12(xor_ln1357_153_reg_5614),
    .din13(xor_ln1357_153_reg_5614),
    .din14(xor_ln1357_153_reg_5614),
    .din15(xor_ln1357_153_reg_5614),
    .din16(p_02329_1_reg_1074),
    .dout(phi_ln719_9_fu_3708_p18)
);

kern_enc_mux_164_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
kern_enc_mux_164_8_1_1_U10(
    .din0(trunc_ln214_5_reg_4347),
    .din1(xor_ln1357_10_reg_4525),
    .din2(xor_ln1357_26_reg_5351),
    .din3(xor_ln1357_42_reg_4722),
    .din4(xor_ln1357_58_reg_5391),
    .din5(xor_ln1357_74_reg_4896),
    .din6(xor_ln1357_90_reg_5431),
    .din7(xor_ln1357_106_reg_5121),
    .din8(xor_ln1357_122_reg_5491),
    .din9(xor_ln1357_138_reg_5289),
    .din10(xor_ln1357_154_reg_5625),
    .din11(xor_ln1357_154_reg_5625),
    .din12(xor_ln1357_154_reg_5625),
    .din13(xor_ln1357_154_reg_5625),
    .din14(xor_ln1357_154_reg_5625),
    .din15(xor_ln1357_154_reg_5625),
    .din16(p_02329_1_reg_1074),
    .dout(phi_ln719_s_fu_3760_p18)
);

kern_enc_mux_164_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
kern_enc_mux_164_8_1_1_U11(
    .din0(trunc_ln214_4_reg_4340),
    .din1(xor_ln1357_11_reg_4532),
    .din2(xor_ln1357_27_reg_5356),
    .din3(xor_ln1357_43_reg_4729),
    .din4(xor_ln1357_59_reg_5396),
    .din5(xor_ln1357_75_reg_4903),
    .din6(xor_ln1357_91_reg_5436),
    .din7(xor_ln1357_107_reg_5128),
    .din8(xor_ln1357_123_reg_5496),
    .din9(xor_ln1357_139_reg_5295),
    .din10(xor_ln1357_155_reg_5636),
    .din11(xor_ln1357_155_reg_5636),
    .din12(xor_ln1357_155_reg_5636),
    .din13(xor_ln1357_155_reg_5636),
    .din14(xor_ln1357_155_reg_5636),
    .din15(xor_ln1357_155_reg_5636),
    .din16(p_02329_1_reg_1074),
    .dout(phi_ln719_10_fu_3806_p18)
);

kern_enc_mux_164_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
kern_enc_mux_164_8_1_1_U12(
    .din0(trunc_ln214_3_reg_4331),
    .din1(xor_ln1357_12_reg_4539),
    .din2(xor_ln1357_28_reg_4616),
    .din3(xor_ln1357_44_reg_4736),
    .din4(xor_ln1357_60_reg_4782),
    .din5(xor_ln1357_76_reg_4910),
    .din6(xor_ln1357_92_reg_5015),
    .din7(xor_ln1357_108_reg_5135),
    .din8(xor_ln1357_124_reg_5181),
    .din9(xor_ln1357_140_reg_5301),
    .din10(xor_ln1357_156_reg_5647),
    .din11(xor_ln1357_156_reg_5647),
    .din12(xor_ln1357_156_reg_5647),
    .din13(xor_ln1357_156_reg_5647),
    .din14(xor_ln1357_156_reg_5647),
    .din15(xor_ln1357_156_reg_5647),
    .din16(p_02329_1_reg_1074),
    .dout(phi_ln719_11_fu_3858_p18)
);

kern_enc_mux_164_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
kern_enc_mux_164_8_1_1_U13(
    .din0(trunc_ln214_2_reg_4322),
    .din1(xor_ln1357_13_reg_4544),
    .din2(xor_ln1357_29_reg_4622),
    .din3(xor_ln1357_45_reg_4741),
    .din4(xor_ln1357_61_reg_4790),
    .din5(xor_ln1357_77_reg_4915),
    .din6(xor_ln1357_93_reg_5021),
    .din7(xor_ln1357_109_reg_5140),
    .din8(xor_ln1357_125_reg_5188),
    .din9(xor_ln1357_141_reg_5306),
    .din10(xor_ln1357_157_reg_5658),
    .din11(xor_ln1357_157_reg_5658),
    .din12(xor_ln1357_157_reg_5658),
    .din13(xor_ln1357_157_reg_5658),
    .din14(xor_ln1357_157_reg_5658),
    .din15(xor_ln1357_157_reg_5658),
    .din16(p_02329_1_reg_1074),
    .dout(phi_ln719_12_fu_3910_p18)
);

kern_enc_mux_164_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
kern_enc_mux_164_8_1_1_U14(
    .din0(trunc_ln214_1_reg_4313),
    .din1(xor_ln1357_14_reg_4549),
    .din2(xor_ln1357_30_reg_4628),
    .din3(xor_ln1357_46_reg_4746),
    .din4(xor_ln1357_62_reg_4798),
    .din5(xor_ln1357_78_reg_4920),
    .din6(xor_ln1357_94_reg_5027),
    .din7(xor_ln1357_110_reg_5145),
    .din8(xor_ln1357_126_reg_5195),
    .din9(xor_ln1357_142_reg_5311),
    .din10(xor_ln1357_158_reg_5669),
    .din11(xor_ln1357_158_reg_5669),
    .din12(xor_ln1357_158_reg_5669),
    .din13(xor_ln1357_158_reg_5669),
    .din14(xor_ln1357_158_reg_5669),
    .din15(xor_ln1357_158_reg_5669),
    .din16(p_02329_1_reg_1074),
    .dout(phi_ln719_13_fu_3962_p18)
);

kern_enc_mux_164_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
kern_enc_mux_164_8_1_1_U15(
    .din0(trunc_ln214_reg_4304),
    .din1(xor_ln1357_15_reg_4554),
    .din2(xor_ln1357_31_reg_4634),
    .din3(xor_ln1357_47_reg_4751),
    .din4(xor_ln1357_63_reg_4806),
    .din5(xor_ln1357_79_reg_4925),
    .din6(xor_ln1357_95_reg_5033),
    .din7(xor_ln1357_111_reg_5150),
    .din8(xor_ln1357_127_reg_5202),
    .din9(xor_ln1357_143_reg_5316),
    .din10(xor_ln1357_159_reg_5680),
    .din11(xor_ln1357_159_reg_5680),
    .din12(xor_ln1357_159_reg_5680),
    .din13(xor_ln1357_159_reg_5680),
    .din14(xor_ln1357_159_reg_5680),
    .din15(xor_ln1357_159_reg_5680),
    .din16(p_02329_1_reg_1074),
    .dout(phi_ln719_14_fu_4008_p18)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state12) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state12) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state12);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_data_V_1_ack_out == 1'b1) & (out_V_data_V_1_vld_out == 1'b1))) begin
            out_V_data_V_1_sel_rd <= ~out_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_V_data_V_1_ack_in == 1'b1) & (out_V_data_V_1_vld_in == 1'b1))) begin
            out_V_data_V_1_sel_wr <= ~out_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_data_V_1_state == 2'd2) & (out_V_data_V_1_vld_in == 1'b0)) | ((out_V_data_V_1_state == 2'd3) & (out_V_data_V_1_vld_in == 1'b0) & (out_V_data_V_1_ack_out == 1'b1)))) begin
            out_V_data_V_1_state <= 2'd2;
        end else if ((((out_V_data_V_1_state == 2'd1) & (out_r_TREADY == 1'b0)) | ((out_V_data_V_1_state == 2'd3) & (out_r_TREADY == 1'b0) & (out_V_data_V_1_vld_in == 1'b1)))) begin
            out_V_data_V_1_state <= 2'd1;
        end else if (((~((out_V_data_V_1_vld_in == 1'b0) & (out_V_data_V_1_ack_out == 1'b1)) & ~((out_r_TREADY == 1'b0) & (out_V_data_V_1_vld_in == 1'b1)) & (out_V_data_V_1_state == 2'd3)) | ((out_V_data_V_1_state == 2'd1) & (out_V_data_V_1_ack_out == 1'b1)) | ((out_V_data_V_1_state == 2'd2) & (out_V_data_V_1_vld_in == 1'b1)))) begin
            out_V_data_V_1_state <= 2'd3;
        end else begin
            out_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_dest_V_1_ack_out == 1'b1) & (out_V_dest_V_1_vld_out == 1'b1))) begin
            out_V_dest_V_1_sel_rd <= ~out_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_dest_V_1_state == 2'd2) & (out_V_dest_V_1_vld_in == 1'b0)) | ((out_V_dest_V_1_state == 2'd3) & (out_V_dest_V_1_vld_in == 1'b0) & (out_V_dest_V_1_ack_out == 1'b1)))) begin
            out_V_dest_V_1_state <= 2'd2;
        end else if ((((out_V_dest_V_1_state == 2'd1) & (out_r_TREADY == 1'b0)) | ((out_V_dest_V_1_state == 2'd3) & (out_r_TREADY == 1'b0) & (out_V_dest_V_1_vld_in == 1'b1)))) begin
            out_V_dest_V_1_state <= 2'd1;
        end else if (((~((out_V_dest_V_1_vld_in == 1'b0) & (out_V_dest_V_1_ack_out == 1'b1)) & ~((out_r_TREADY == 1'b0) & (out_V_dest_V_1_vld_in == 1'b1)) & (out_V_dest_V_1_state == 2'd3)) | ((out_V_dest_V_1_state == 2'd1) & (out_V_dest_V_1_ack_out == 1'b1)) | ((out_V_dest_V_1_state == 2'd2) & (out_V_dest_V_1_vld_in == 1'b1)))) begin
            out_V_dest_V_1_state <= 2'd3;
        end else begin
            out_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_id_V_1_ack_out == 1'b1) & (out_V_id_V_1_vld_out == 1'b1))) begin
            out_V_id_V_1_sel_rd <= ~out_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_id_V_1_state == 2'd2) & (out_V_id_V_1_vld_in == 1'b0)) | ((out_V_id_V_1_state == 2'd3) & (out_V_id_V_1_vld_in == 1'b0) & (out_V_id_V_1_ack_out == 1'b1)))) begin
            out_V_id_V_1_state <= 2'd2;
        end else if ((((out_V_id_V_1_state == 2'd1) & (out_r_TREADY == 1'b0)) | ((out_V_id_V_1_state == 2'd3) & (out_r_TREADY == 1'b0) & (out_V_id_V_1_vld_in == 1'b1)))) begin
            out_V_id_V_1_state <= 2'd1;
        end else if (((~((out_V_id_V_1_vld_in == 1'b0) & (out_V_id_V_1_ack_out == 1'b1)) & ~((out_r_TREADY == 1'b0) & (out_V_id_V_1_vld_in == 1'b1)) & (out_V_id_V_1_state == 2'd3)) | ((out_V_id_V_1_state == 2'd1) & (out_V_id_V_1_ack_out == 1'b1)) | ((out_V_id_V_1_state == 2'd2) & (out_V_id_V_1_vld_in == 1'b1)))) begin
            out_V_id_V_1_state <= 2'd3;
        end else begin
            out_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_keep_V_1_ack_out == 1'b1) & (out_V_keep_V_1_vld_out == 1'b1))) begin
            out_V_keep_V_1_sel_rd <= ~out_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_keep_V_1_state == 2'd2) & (out_V_keep_V_1_vld_in == 1'b0)) | ((out_V_keep_V_1_state == 2'd3) & (out_V_keep_V_1_vld_in == 1'b0) & (out_V_keep_V_1_ack_out == 1'b1)))) begin
            out_V_keep_V_1_state <= 2'd2;
        end else if ((((out_V_keep_V_1_state == 2'd1) & (out_r_TREADY == 1'b0)) | ((out_V_keep_V_1_state == 2'd3) & (out_r_TREADY == 1'b0) & (out_V_keep_V_1_vld_in == 1'b1)))) begin
            out_V_keep_V_1_state <= 2'd1;
        end else if (((~((out_V_keep_V_1_vld_in == 1'b0) & (out_V_keep_V_1_ack_out == 1'b1)) & ~((out_r_TREADY == 1'b0) & (out_V_keep_V_1_vld_in == 1'b1)) & (out_V_keep_V_1_state == 2'd3)) | ((out_V_keep_V_1_state == 2'd1) & (out_V_keep_V_1_ack_out == 1'b1)) | ((out_V_keep_V_1_state == 2'd2) & (out_V_keep_V_1_vld_in == 1'b1)))) begin
            out_V_keep_V_1_state <= 2'd3;
        end else begin
            out_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_last_V_1_ack_out == 1'b1) & (out_V_last_V_1_vld_out == 1'b1))) begin
            out_V_last_V_1_sel_rd <= ~out_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_last_V_1_state == 2'd2) & (out_V_last_V_1_vld_in == 1'b0)) | ((out_V_last_V_1_state == 2'd3) & (out_V_last_V_1_vld_in == 1'b0) & (out_V_last_V_1_ack_out == 1'b1)))) begin
            out_V_last_V_1_state <= 2'd2;
        end else if ((((out_V_last_V_1_state == 2'd1) & (out_r_TREADY == 1'b0)) | ((out_V_last_V_1_state == 2'd3) & (out_r_TREADY == 1'b0) & (out_V_last_V_1_vld_in == 1'b1)))) begin
            out_V_last_V_1_state <= 2'd1;
        end else if (((~((out_V_last_V_1_vld_in == 1'b0) & (out_V_last_V_1_ack_out == 1'b1)) & ~((out_r_TREADY == 1'b0) & (out_V_last_V_1_vld_in == 1'b1)) & (out_V_last_V_1_state == 2'd3)) | ((out_V_last_V_1_state == 2'd1) & (out_V_last_V_1_ack_out == 1'b1)) | ((out_V_last_V_1_state == 2'd2) & (out_V_last_V_1_vld_in == 1'b1)))) begin
            out_V_last_V_1_state <= 2'd3;
        end else begin
            out_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_user_V_1_ack_out == 1'b1) & (out_V_user_V_1_vld_out == 1'b1))) begin
            out_V_user_V_1_sel_rd <= ~out_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_user_V_1_state == 2'd2) & (out_V_user_V_1_vld_in == 1'b0)) | ((out_V_user_V_1_state == 2'd3) & (out_V_user_V_1_vld_in == 1'b0) & (out_V_user_V_1_ack_out == 1'b1)))) begin
            out_V_user_V_1_state <= 2'd2;
        end else if ((((out_V_user_V_1_state == 2'd1) & (out_r_TREADY == 1'b0)) | ((out_V_user_V_1_state == 2'd3) & (out_r_TREADY == 1'b0) & (out_V_user_V_1_vld_in == 1'b1)))) begin
            out_V_user_V_1_state <= 2'd1;
        end else if (((~((out_V_user_V_1_vld_in == 1'b0) & (out_V_user_V_1_ack_out == 1'b1)) & ~((out_r_TREADY == 1'b0) & (out_V_user_V_1_vld_in == 1'b1)) & (out_V_user_V_1_state == 2'd3)) | ((out_V_user_V_1_state == 2'd1) & (out_V_user_V_1_ack_out == 1'b1)) | ((out_V_user_V_1_state == 2'd2) & (out_V_user_V_1_vld_in == 1'b1)))) begin
            out_V_user_V_1_state <= 2'd3;
        end else begin
            out_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1135)) begin
        if (((icmp_ln196_fu_2734_p2 == 1'd0) & (ap_phi_mux_p_02329_1_phi_fu_1078_p4 == 4'd1))) begin
            ap_phi_reg_pp0_iter1_phi_ln719_reg_1086 <= xor_ln1357_reg_4467;
        end else if ((1'b1 == ap_condition_1306)) begin
            ap_phi_reg_pp0_iter1_phi_ln719_reg_1086 <= xor_ln1357_128_reg_5249;
        end else if (((icmp_ln196_fu_2734_p2 == 1'd0) & (ap_phi_mux_p_02329_1_phi_fu_1078_p4 == 4'd8))) begin
            ap_phi_reg_pp0_iter1_phi_ln719_reg_1086 <= xor_ln1357_112_reg_5229;
        end else if (((icmp_ln196_fu_2734_p2 == 1'd0) & (ap_phi_mux_p_02329_1_phi_fu_1078_p4 == 4'd7))) begin
            ap_phi_reg_pp0_iter1_phi_ln719_reg_1086 <= xor_ln1357_96_reg_5079;
        end else if (((icmp_ln196_fu_2734_p2 == 1'd0) & (ap_phi_mux_p_02329_1_phi_fu_1078_p4 == 4'd6))) begin
            ap_phi_reg_pp0_iter1_phi_ln719_reg_1086 <= xor_ln1357_80_reg_5059;
        end else if (((icmp_ln196_fu_2734_p2 == 1'd0) & (ap_phi_mux_p_02329_1_phi_fu_1078_p4 == 4'd5))) begin
            ap_phi_reg_pp0_iter1_phi_ln719_reg_1086 <= xor_ln1357_64_reg_4854;
        end else if (((icmp_ln196_fu_2734_p2 == 1'd0) & (ap_phi_mux_p_02329_1_phi_fu_1078_p4 == 4'd4))) begin
            ap_phi_reg_pp0_iter1_phi_ln719_reg_1086 <= xor_ln1357_48_reg_4834;
        end else if (((icmp_ln196_fu_2734_p2 == 1'd0) & (ap_phi_mux_p_02329_1_phi_fu_1078_p4 == 4'd3))) begin
            ap_phi_reg_pp0_iter1_phi_ln719_reg_1086 <= xor_ln1357_32_reg_4680;
        end else if (((icmp_ln196_fu_2734_p2 == 1'd0) & (ap_phi_mux_p_02329_1_phi_fu_1078_p4 == 4'd2))) begin
            ap_phi_reg_pp0_iter1_phi_ln719_reg_1086 <= xor_ln1357_16_reg_4660;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_phi_ln719_reg_1086 <= ap_phi_reg_pp0_iter0_phi_ln719_reg_1086;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln196_reg_5771 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cipher_V_0_0_reg_1024 <= cipher_0_V_3_fu_3298_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cipher_V_0_0_reg_1024 <= cipher_0_V_fu_2654_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln196_reg_5771 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cipher_V_10_0_reg_924 <= cipher_10_V_4_fu_3800_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cipher_V_10_0_reg_924 <= cipher_10_V_fu_2704_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln196_reg_5771 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cipher_V_11_0_reg_914 <= cipher_11_V_4_fu_3852_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cipher_V_11_0_reg_914 <= cipher_11_V_fu_2709_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln196_reg_5771 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cipher_V_12_0_reg_1034 <= cipher_12_V_3_fu_3904_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cipher_V_12_0_reg_1034 <= cipher_12_V_fu_2714_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln196_reg_5771 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cipher_V_13_0_reg_1044 <= cipher_13_V_4_fu_3956_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cipher_V_13_0_reg_1044 <= cipher_13_V_fu_2719_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln196_reg_5771 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cipher_V_14_0_reg_1054 <= cipher_14_V_4_fu_4002_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cipher_V_14_0_reg_1054 <= cipher_14_V_fu_2724_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln196_reg_5771 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cipher_V_15_0_reg_1064 <= cipher_15_V_4_fu_4054_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cipher_V_15_0_reg_1064 <= cipher_15_V_fu_2729_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln196_reg_5771 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cipher_V_1_0_reg_1014 <= cipher_1_V_4_fu_3350_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cipher_V_1_0_reg_1014 <= cipher_1_V_fu_2659_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln196_reg_5771 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cipher_V_2_0_reg_1004 <= cipher_2_V_4_fu_3396_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cipher_V_2_0_reg_1004 <= cipher_2_V_fu_2664_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln196_reg_5771 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cipher_V_3_0_reg_994 <= cipher_3_V_4_fu_3448_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cipher_V_3_0_reg_994 <= cipher_3_V_fu_2669_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln196_reg_5771 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cipher_V_4_0_reg_984 <= cipher_4_V_3_fu_3500_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cipher_V_4_0_reg_984 <= cipher_4_V_fu_2674_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln196_reg_5771 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cipher_V_5_0_reg_974 <= cipher_5_V_4_fu_3552_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cipher_V_5_0_reg_974 <= cipher_5_V_fu_2679_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln196_reg_5771 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cipher_V_6_0_reg_964 <= cipher_6_V_4_fu_3598_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cipher_V_6_0_reg_964 <= cipher_6_V_fu_2684_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln196_reg_5771 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cipher_V_7_0_reg_954 <= cipher_7_V_4_fu_3650_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cipher_V_7_0_reg_954 <= cipher_7_V_fu_2689_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln196_reg_5771 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cipher_V_8_0_reg_944 <= cipher_8_V_3_fu_3702_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cipher_V_8_0_reg_944 <= cipher_8_V_fu_2694_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln196_reg_5771 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cipher_V_9_0_reg_934 <= cipher_9_V_4_fu_3754_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cipher_V_9_0_reg_934 <= cipher_9_V_fu_2699_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_611)) begin
        if ((icmp_ln58_fu_1433_p2 == 1'd0)) begin
            flag_flag_0_reg_1161 <= 1'd0;
        end else if ((icmp_ln58_fu_1433_p2 == 1'd1)) begin
            flag_flag_0_reg_1161 <= 1'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op76_read_state1 == 1'b1) & (in_r_TVALID == 1'b0)) & (icmp_ln334_fu_1235_p2 == 1'd0) & (icmp_ln116_fu_1219_p2 == 1'd0) & (icmp_ln50_fu_1213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        flag_flag_3_reg_1109 <= 1'd0;
    end else if ((~((out_V_keep_V_1_state == 2'd1) | (out_V_user_V_1_state == 2'd1) | (out_V_id_V_1_state == 2'd1) | (out_V_last_V_1_state == 2'd1) | (out_V_dest_V_1_state == 2'd1) | (1'b1 == ap_block_state16_io) | (out_V_data_V_1_state == 2'd1) | ((out_V_data_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_keep_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_user_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_id_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_last_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_dest_V_1_state == 2'd3) & (out_r_TREADY == 1'b0))) & (icmp_ln116_reg_4296 == 1'd1) & (icmp_ln50_reg_4292 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        flag_flag_3_reg_1109 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln94_reg_4463 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        flag_flag_4_reg_1121 <= flag_flag_0_reg_1161;
    end else if (((icmp_ln94_reg_4463 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        flag_flag_4_reg_1121 <= 1'd1;
    end else if (((~((ap_predicate_op76_read_state1 == 1'b1) & (in_r_TVALID == 1'b0)) & (icmp_ln334_fu_1235_p2 == 1'd1) & (icmp_ln116_fu_1219_p2 == 1'd0) & (icmp_ln50_fu_1213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | (~((ap_predicate_op76_read_state1 == 1'b1) & (in_r_TVALID == 1'b0)) & (icmp_ln50_fu_1213_p2 == 1'd1) & (tmp_nbreadreq_fu_212_p8 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        flag_flag_4_reg_1121 <= 1'd0;
    end else if ((~((out_V_keep_V_1_state == 2'd1) | (out_V_user_V_1_state == 2'd1) | (out_V_id_V_1_state == 2'd1) | (out_V_last_V_1_state == 2'd1) | (out_V_dest_V_1_state == 2'd1) | (1'b1 == ap_block_state16_io) | (out_V_data_V_1_state == 2'd1) | ((out_V_data_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_keep_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_user_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_id_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_last_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_dest_V_1_state == 2'd3) & (out_r_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state16) & (((icmp_ln116_reg_4296 == 1'd1) & (icmp_ln50_reg_4292 == 1'd0)) | ((icmp_ln334_reg_4300 == 1'd0) & (icmp_ln50_reg_4292 == 1'd0))))) begin
        flag_flag_4_reg_1121 <= ap_phi_mux_flag_flag_3_phi_fu_1113_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_611)) begin
        if ((icmp_ln58_fu_1433_p2 == 1'd0)) begin
            flag_load_2_reg_1176 <= flag;
        end else if ((icmp_ln58_fu_1433_p2 == 1'd1)) begin
            flag_load_2_reg_1176 <= add_ln92_fu_1449_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln94_reg_4463 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        flag_new_4_reg_1142 <= flag_load_2_reg_1176;
    end else if (((icmp_ln94_reg_4463 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        flag_new_4_reg_1142 <= add_ln112_fu_4281_p2;
    end else if ((~((out_V_keep_V_1_state == 2'd1) | (out_V_user_V_1_state == 2'd1) | (out_V_id_V_1_state == 2'd1) | (out_V_last_V_1_state == 2'd1) | (out_V_dest_V_1_state == 2'd1) | (1'b1 == ap_block_state16_io) | (out_V_data_V_1_state == 2'd1) | ((out_V_data_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_keep_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_user_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_id_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_last_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_dest_V_1_state == 2'd3) & (out_r_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state16) & (((icmp_ln116_reg_4296 == 1'd1) & (icmp_ln50_reg_4292 == 1'd0)) | ((icmp_ln334_reg_4300 == 1'd0) & (icmp_ln50_reg_4292 == 1'd0))))) begin
        flag_new_4_reg_1142 <= 32'd24;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln94_reg_4463 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        keyT_V <= trunc_ln209_1_fu_4272_p1;
    end else if ((~((ap_predicate_op76_read_state1 == 1'b1) & (in_r_TVALID == 1'b0)) & (icmp_ln116_fu_1219_p2 == 1'd1) & (icmp_ln50_fu_1213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        keyT_V <= 128'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln196_reg_5771 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_02329_1_reg_1074 <= j_V_reg_5855;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        p_02329_1_reg_1074 <= 4'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        plainT_V <= 128'd0;
    end else if ((~((ap_predicate_op76_read_state1 == 1'b1) & (in_r_TVALID == 1'b0)) & (icmp_ln58_fu_1433_p2 == 1'd1) & (tmp_nbreadreq_fu_212_p8 == 1'd1) & (icmp_ln50_fu_1213_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        plainT_V <= trunc_ln209_fu_1439_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_V_keep_V_1_state == 2'd1) | (out_V_user_V_1_state == 2'd1) | (out_V_id_V_1_state == 2'd1) | (out_V_last_V_1_state == 2'd1) | (out_V_dest_V_1_state == 2'd1) | (1'b1 == ap_block_state16_io) | (out_V_data_V_1_state == 2'd1) | ((out_V_data_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_keep_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_user_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_id_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_last_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_dest_V_1_state == 2'd3) & (out_r_TREADY == 1'b0))) & (ap_phi_mux_flag_flag_4_phi_fu_1126_p10 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        flag <= ap_phi_mux_flag_new_4_phi_fu_1146_p10;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op76_read_state1 == 1'b1) & (in_r_TVALID == 1'b0)) & (icmp_ln50_fu_1213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln116_reg_4296 <= icmp_ln116_fu_1219_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln196_reg_5771 <= icmp_ln196_fu_2734_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op76_read_state1 == 1'b1) & (in_r_TVALID == 1'b0)) & (icmp_ln116_fu_1219_p2 == 1'd0) & (icmp_ln50_fu_1213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln334_reg_4300 <= icmp_ln334_fu_1235_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op76_read_state1 == 1'b1) & (in_r_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln50_reg_4292 <= icmp_ln50_fu_1213_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op76_read_state1 == 1'b1) & (in_r_TVALID == 1'b0)) & (tmp_nbreadreq_fu_212_p8 == 1'd1) & (icmp_ln50_fu_1213_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln94_reg_4463 <= icmp_ln94_fu_1455_p2;
        tmp_data_V_reg_4450 <= in_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln196_fu_2734_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_V_reg_5855 <= j_V_fu_2820_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_data_V_1_load_A == 1'b1)) begin
        out_V_data_V_1_payload_A <= data_data_V_fu_4261_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_data_V_1_load_B == 1'b1)) begin
        out_V_data_V_1_payload_B <= data_data_V_fu_4261_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_1187 <= SBOX_V_q0;
        reg_1191 <= SBOX_V_q2;
        reg_1195 <= SBOX_V_q3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op76_read_state1 == 1'b1) & (in_r_TVALID == 1'b0)) & (icmp_ln116_fu_1219_p2 == 1'd1) & (icmp_ln50_fu_1213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        trunc_ln214_10_reg_4392 <= {{keyT_V[95:88]}};
        trunc_ln214_11_reg_4400 <= {{keyT_V[103:96]}};
        trunc_ln214_12_reg_4407 <= {{keyT_V[111:104]}};
        trunc_ln214_13_reg_4414 <= {{keyT_V[119:112]}};
        trunc_ln214_14_reg_4421 <= {{keyT_V[127:120]}};
        trunc_ln214_1_reg_4313 <= {{keyT_V[15:8]}};
        trunc_ln214_2_reg_4322 <= {{keyT_V[23:16]}};
        trunc_ln214_3_reg_4331 <= {{keyT_V[31:24]}};
        trunc_ln214_4_reg_4340 <= {{keyT_V[39:32]}};
        trunc_ln214_5_reg_4347 <= {{keyT_V[47:40]}};
        trunc_ln214_6_reg_4354 <= {{keyT_V[55:48]}};
        trunc_ln214_7_reg_4361 <= {{keyT_V[63:56]}};
        trunc_ln214_8_reg_4368 <= {{keyT_V[71:64]}};
        trunc_ln214_9_reg_4376 <= {{keyT_V[79:72]}};
        trunc_ln214_reg_4304 <= trunc_ln214_fu_1245_p1;
        trunc_ln214_s_reg_4384 <= {{keyT_V[87:80]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        xor_ln1357_100_reg_5441 <= xor_ln1357_100_fu_2330_p2;
        xor_ln1357_101_reg_5446 <= xor_ln1357_101_fu_2334_p2;
        xor_ln1357_102_reg_5451 <= xor_ln1357_102_fu_2338_p2;
        xor_ln1357_103_reg_5456 <= xor_ln1357_103_fu_2342_p2;
        xor_ln1357_116_reg_5461 <= xor_ln1357_116_fu_2346_p2;
        xor_ln1357_117_reg_5466 <= xor_ln1357_117_fu_2350_p2;
        xor_ln1357_118_reg_5471 <= xor_ln1357_118_fu_2355_p2;
        xor_ln1357_119_reg_5476 <= xor_ln1357_119_fu_2360_p2;
        xor_ln1357_120_reg_5481 <= xor_ln1357_120_fu_2365_p2;
        xor_ln1357_121_reg_5486 <= xor_ln1357_121_fu_2370_p2;
        xor_ln1357_122_reg_5491 <= xor_ln1357_122_fu_2375_p2;
        xor_ln1357_123_reg_5496 <= xor_ln1357_123_fu_2380_p2;
        xor_ln1357_132_reg_5501 <= xor_ln1357_132_fu_2385_p2;
        xor_ln1357_133_reg_5506 <= xor_ln1357_133_fu_2390_p2;
        xor_ln1357_134_reg_5511 <= xor_ln1357_134_fu_2395_p2;
        xor_ln1357_135_reg_5516 <= xor_ln1357_135_fu_2400_p2;
        xor_ln1357_145_reg_5526 <= xor_ln1357_145_fu_2411_p2;
        xor_ln1357_146_reg_5537 <= xor_ln1357_146_fu_2416_p2;
        xor_ln1357_147_reg_5548 <= xor_ln1357_147_fu_2421_p2;
        xor_ln1357_148_reg_5559 <= xor_ln1357_148_fu_2426_p2;
        xor_ln1357_149_reg_5570 <= xor_ln1357_149_fu_2432_p2;
        xor_ln1357_150_reg_5581 <= xor_ln1357_150_fu_2438_p2;
        xor_ln1357_151_reg_5592 <= xor_ln1357_151_fu_2444_p2;
        xor_ln1357_152_reg_5603 <= xor_ln1357_152_fu_2450_p2;
        xor_ln1357_153_reg_5614 <= xor_ln1357_153_fu_2455_p2;
        xor_ln1357_154_reg_5625 <= xor_ln1357_154_fu_2460_p2;
        xor_ln1357_155_reg_5636 <= xor_ln1357_155_fu_2465_p2;
        xor_ln1357_156_reg_5647 <= xor_ln1357_156_fu_2470_p2;
        xor_ln1357_157_reg_5658 <= xor_ln1357_157_fu_2475_p2;
        xor_ln1357_158_reg_5669 <= xor_ln1357_158_fu_2480_p2;
        xor_ln1357_159_reg_5680 <= xor_ln1357_159_fu_2485_p2;
        xor_ln1357_24_reg_5341 <= xor_ln1357_24_fu_2250_p2;
        xor_ln1357_25_reg_5346 <= xor_ln1357_25_fu_2254_p2;
        xor_ln1357_26_reg_5351 <= xor_ln1357_26_fu_2258_p2;
        xor_ln1357_27_reg_5356 <= xor_ln1357_27_fu_2262_p2;
        xor_ln1357_36_reg_5361 <= xor_ln1357_36_fu_2266_p2;
        xor_ln1357_37_reg_5366 <= xor_ln1357_37_fu_2270_p2;
        xor_ln1357_38_reg_5371 <= xor_ln1357_38_fu_2274_p2;
        xor_ln1357_39_reg_5376 <= xor_ln1357_39_fu_2278_p2;
        xor_ln1357_56_reg_5381 <= xor_ln1357_56_fu_2282_p2;
        xor_ln1357_57_reg_5386 <= xor_ln1357_57_fu_2286_p2;
        xor_ln1357_58_reg_5391 <= xor_ln1357_58_fu_2290_p2;
        xor_ln1357_59_reg_5396 <= xor_ln1357_59_fu_2294_p2;
        xor_ln1357_68_reg_5401 <= xor_ln1357_68_fu_2298_p2;
        xor_ln1357_69_reg_5406 <= xor_ln1357_69_fu_2302_p2;
        xor_ln1357_70_reg_5411 <= xor_ln1357_70_fu_2306_p2;
        xor_ln1357_71_reg_5416 <= xor_ln1357_71_fu_2310_p2;
        xor_ln1357_88_reg_5421 <= xor_ln1357_88_fu_2314_p2;
        xor_ln1357_89_reg_5426 <= xor_ln1357_89_fu_2318_p2;
        xor_ln1357_90_reg_5431 <= xor_ln1357_90_fu_2322_p2;
        xor_ln1357_91_reg_5436 <= xor_ln1357_91_fu_2326_p2;
        xor_ln719_4_reg_5521 <= xor_ln719_4_fu_2405_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        xor_ln1357_104_reg_5107 <= xor_ln1357_104_fu_2035_p2;
        xor_ln1357_105_reg_5114 <= xor_ln1357_105_fu_2040_p2;
        xor_ln1357_106_reg_5121 <= xor_ln1357_106_fu_2045_p2;
        xor_ln1357_107_reg_5128 <= xor_ln1357_107_fu_2050_p2;
        xor_ln1357_108_reg_5135 <= xor_ln1357_108_fu_2055_p2;
        xor_ln1357_109_reg_5140 <= xor_ln1357_109_fu_2060_p2;
        xor_ln1357_110_reg_5145 <= xor_ln1357_110_fu_2065_p2;
        xor_ln1357_111_reg_5150 <= xor_ln1357_111_fu_2070_p2;
        xor_ln1357_80_reg_5059 <= xor_ln1357_80_fu_1986_p2;
        xor_ln1357_81_reg_5064 <= xor_ln1357_81_fu_1990_p2;
        xor_ln1357_82_reg_5069 <= xor_ln1357_82_fu_1995_p2;
        xor_ln1357_83_reg_5074 <= xor_ln1357_83_fu_2000_p2;
        xor_ln1357_96_reg_5079 <= xor_ln1357_96_fu_2011_p2;
        xor_ln1357_97_reg_5086 <= xor_ln1357_97_fu_2017_p2;
        xor_ln1357_98_reg_5093 <= xor_ln1357_98_fu_2023_p2;
        xor_ln1357_99_reg_5100 <= xor_ln1357_99_fu_2029_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        xor_ln1357_10_reg_4525 <= xor_ln1357_10_fu_1517_p2;
        xor_ln1357_11_reg_4532 <= xor_ln1357_11_fu_1522_p2;
        xor_ln1357_12_reg_4539 <= xor_ln1357_12_fu_1527_p2;
        xor_ln1357_13_reg_4544 <= xor_ln1357_13_fu_1532_p2;
        xor_ln1357_14_reg_4549 <= xor_ln1357_14_fu_1537_p2;
        xor_ln1357_15_reg_4554 <= xor_ln1357_15_fu_1542_p2;
        xor_ln1357_1_reg_4473 <= xor_ln1357_1_fu_1472_p2;
        xor_ln1357_2_reg_4479 <= xor_ln1357_2_fu_1477_p2;
        xor_ln1357_3_reg_4485 <= xor_ln1357_3_fu_1482_p2;
        xor_ln1357_4_reg_4491 <= xor_ln1357_4_fu_1487_p2;
        xor_ln1357_5_reg_4496 <= xor_ln1357_5_fu_1492_p2;
        xor_ln1357_6_reg_4501 <= xor_ln1357_6_fu_1497_p2;
        xor_ln1357_7_reg_4506 <= xor_ln1357_7_fu_1502_p2;
        xor_ln1357_8_reg_4511 <= xor_ln1357_8_fu_1507_p2;
        xor_ln1357_9_reg_4518 <= xor_ln1357_9_fu_1512_p2;
        xor_ln1357_reg_4467 <= xor_ln1357_fu_1466_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        xor_ln1357_112_reg_5229 <= xor_ln1357_112_fu_2141_p2;
        xor_ln1357_113_reg_5234 <= xor_ln1357_113_fu_2145_p2;
        xor_ln1357_114_reg_5239 <= xor_ln1357_114_fu_2150_p2;
        xor_ln1357_115_reg_5244 <= xor_ln1357_115_fu_2155_p2;
        xor_ln1357_128_reg_5249 <= xor_ln1357_128_fu_2166_p2;
        xor_ln1357_129_reg_5256 <= xor_ln1357_129_fu_2172_p2;
        xor_ln1357_130_reg_5263 <= xor_ln1357_130_fu_2178_p2;
        xor_ln1357_131_reg_5270 <= xor_ln1357_131_fu_2184_p2;
        xor_ln1357_136_reg_5277 <= xor_ln1357_136_fu_2190_p2;
        xor_ln1357_137_reg_5283 <= xor_ln1357_137_fu_2195_p2;
        xor_ln1357_138_reg_5289 <= xor_ln1357_138_fu_2200_p2;
        xor_ln1357_139_reg_5295 <= xor_ln1357_139_fu_2205_p2;
        xor_ln1357_140_reg_5301 <= xor_ln1357_140_fu_2210_p2;
        xor_ln1357_141_reg_5306 <= xor_ln1357_141_fu_2215_p2;
        xor_ln1357_142_reg_5311 <= xor_ln1357_142_fu_2220_p2;
        xor_ln1357_143_reg_5316 <= xor_ln1357_143_fu_2225_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        xor_ln1357_124_reg_5181 <= xor_ln1357_124_fu_2101_p2;
        xor_ln1357_125_reg_5188 <= xor_ln1357_125_fu_2106_p2;
        xor_ln1357_126_reg_5195 <= xor_ln1357_126_fu_2111_p2;
        xor_ln1357_127_reg_5202 <= xor_ln1357_127_fu_2116_p2;
        xor_ln719_3_reg_5175 <= xor_ln719_3_fu_2095_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        xor_ln1357_16_reg_4660 <= xor_ln1357_16_fu_1633_p2;
        xor_ln1357_17_reg_4665 <= xor_ln1357_17_fu_1637_p2;
        xor_ln1357_18_reg_4670 <= xor_ln1357_18_fu_1642_p2;
        xor_ln1357_19_reg_4675 <= xor_ln1357_19_fu_1647_p2;
        xor_ln1357_32_reg_4680 <= xor_ln1357_32_fu_1658_p2;
        xor_ln1357_33_reg_4687 <= xor_ln1357_33_fu_1664_p2;
        xor_ln1357_34_reg_4694 <= xor_ln1357_34_fu_1670_p2;
        xor_ln1357_35_reg_4701 <= xor_ln1357_35_fu_1676_p2;
        xor_ln1357_40_reg_4708 <= xor_ln1357_40_fu_1682_p2;
        xor_ln1357_41_reg_4715 <= xor_ln1357_41_fu_1687_p2;
        xor_ln1357_42_reg_4722 <= xor_ln1357_42_fu_1692_p2;
        xor_ln1357_43_reg_4729 <= xor_ln1357_43_fu_1697_p2;
        xor_ln1357_44_reg_4736 <= xor_ln1357_44_fu_1702_p2;
        xor_ln1357_45_reg_4741 <= xor_ln1357_45_fu_1707_p2;
        xor_ln1357_46_reg_4746 <= xor_ln1357_46_fu_1712_p2;
        xor_ln1357_47_reg_4751 <= xor_ln1357_47_fu_1717_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        xor_ln1357_20_reg_4584 <= xor_ln1357_20_fu_1573_p2;
        xor_ln1357_21_reg_4592 <= xor_ln1357_21_fu_1578_p2;
        xor_ln1357_22_reg_4600 <= xor_ln1357_22_fu_1583_p2;
        xor_ln1357_23_reg_4608 <= xor_ln1357_23_fu_1588_p2;
        xor_ln1357_28_reg_4616 <= xor_ln1357_28_fu_1593_p2;
        xor_ln1357_29_reg_4622 <= xor_ln1357_29_fu_1598_p2;
        xor_ln1357_30_reg_4628 <= xor_ln1357_30_fu_1603_p2;
        xor_ln1357_31_reg_4634 <= xor_ln1357_31_fu_1608_p2;
        xor_ln719_reg_4579 <= xor_ln719_fu_1567_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        xor_ln1357_48_reg_4834 <= xor_ln1357_48_fu_1788_p2;
        xor_ln1357_49_reg_4839 <= xor_ln1357_49_fu_1792_p2;
        xor_ln1357_50_reg_4844 <= xor_ln1357_50_fu_1797_p2;
        xor_ln1357_51_reg_4849 <= xor_ln1357_51_fu_1802_p2;
        xor_ln1357_64_reg_4854 <= xor_ln1357_64_fu_1813_p2;
        xor_ln1357_65_reg_4861 <= xor_ln1357_65_fu_1819_p2;
        xor_ln1357_66_reg_4868 <= xor_ln1357_66_fu_1825_p2;
        xor_ln1357_67_reg_4875 <= xor_ln1357_67_fu_1831_p2;
        xor_ln1357_72_reg_4882 <= xor_ln1357_72_fu_1837_p2;
        xor_ln1357_73_reg_4889 <= xor_ln1357_73_fu_1842_p2;
        xor_ln1357_74_reg_4896 <= xor_ln1357_74_fu_1847_p2;
        xor_ln1357_75_reg_4903 <= xor_ln1357_75_fu_1852_p2;
        xor_ln1357_76_reg_4910 <= xor_ln1357_76_fu_1857_p2;
        xor_ln1357_77_reg_4915 <= xor_ln1357_77_fu_1862_p2;
        xor_ln1357_78_reg_4920 <= xor_ln1357_78_fu_1867_p2;
        xor_ln1357_79_reg_4925 <= xor_ln1357_79_fu_1872_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        xor_ln1357_52_reg_4950 <= xor_ln1357_52_fu_1897_p2;
        xor_ln1357_53_reg_4957 <= xor_ln1357_53_fu_1901_p2;
        xor_ln1357_54_reg_4964 <= xor_ln1357_54_fu_1906_p2;
        xor_ln1357_55_reg_4971 <= xor_ln1357_55_fu_1911_p2;
        xor_ln1357_84_reg_4983 <= xor_ln1357_84_fu_1922_p2;
        xor_ln1357_85_reg_4991 <= xor_ln1357_85_fu_1928_p2;
        xor_ln1357_86_reg_4999 <= xor_ln1357_86_fu_1934_p2;
        xor_ln1357_87_reg_5007 <= xor_ln1357_87_fu_1940_p2;
        xor_ln1357_92_reg_5015 <= xor_ln1357_92_fu_1946_p2;
        xor_ln1357_93_reg_5021 <= xor_ln1357_93_fu_1951_p2;
        xor_ln1357_94_reg_5027 <= xor_ln1357_94_fu_1956_p2;
        xor_ln1357_95_reg_5033 <= xor_ln1357_95_fu_1961_p2;
        xor_ln719_2_reg_4978 <= xor_ln719_2_fu_1916_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        xor_ln1357_60_reg_4782 <= xor_ln1357_60_fu_1748_p2;
        xor_ln1357_61_reg_4790 <= xor_ln1357_61_fu_1753_p2;
        xor_ln1357_62_reg_4798 <= xor_ln1357_62_fu_1758_p2;
        xor_ln1357_63_reg_4806 <= xor_ln1357_63_fu_1763_p2;
        xor_ln719_1_reg_4776 <= xor_ln719_1_fu_1742_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        SBOX_V_address0 = zext_ln544_40_fu_4060_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        SBOX_V_address0 = zext_ln544_56_fu_2740_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        SBOX_V_address0 = zext_ln544_36_fu_2230_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        SBOX_V_address0 = zext_ln544_32_fu_2121_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        SBOX_V_address0 = zext_ln544_28_fu_2075_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        SBOX_V_address0 = zext_ln544_24_fu_1966_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        SBOX_V_address0 = zext_ln544_20_fu_1877_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        SBOX_V_address0 = zext_ln544_16_fu_1768_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        SBOX_V_address0 = zext_ln544_12_fu_1722_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        SBOX_V_address0 = zext_ln544_8_fu_1613_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        SBOX_V_address0 = zext_ln544_4_fu_1547_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        SBOX_V_address0 = zext_ln544_fu_1405_p1;
    end else begin
        SBOX_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        SBOX_V_address1 = zext_ln544_41_fu_4065_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        SBOX_V_address1 = zext_ln544_57_fu_2745_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        SBOX_V_address1 = zext_ln544_37_fu_2235_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        SBOX_V_address1 = zext_ln544_33_fu_2126_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        SBOX_V_address1 = zext_ln544_29_fu_2080_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        SBOX_V_address1 = zext_ln544_25_fu_1971_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        SBOX_V_address1 = zext_ln544_21_fu_1882_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        SBOX_V_address1 = zext_ln544_17_fu_1773_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        SBOX_V_address1 = zext_ln544_13_fu_1727_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        SBOX_V_address1 = zext_ln544_9_fu_1618_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        SBOX_V_address1 = zext_ln544_5_fu_1552_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        SBOX_V_address1 = zext_ln544_1_fu_1410_p1;
    end else begin
        SBOX_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        SBOX_V_address10 = zext_ln544_50_fu_4110_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        SBOX_V_address10 = zext_ln544_66_fu_2790_p1;
    end else begin
        SBOX_V_address10 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        SBOX_V_address11 = zext_ln544_51_fu_4115_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        SBOX_V_address11 = zext_ln544_67_fu_2795_p1;
    end else begin
        SBOX_V_address11 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        SBOX_V_address12 = zext_ln544_52_fu_4120_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        SBOX_V_address12 = zext_ln544_68_fu_2800_p1;
    end else begin
        SBOX_V_address12 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        SBOX_V_address13 = zext_ln544_53_fu_4125_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        SBOX_V_address13 = zext_ln544_69_fu_2805_p1;
    end else begin
        SBOX_V_address13 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        SBOX_V_address14 = zext_ln544_54_fu_4130_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        SBOX_V_address14 = zext_ln544_70_fu_2810_p1;
    end else begin
        SBOX_V_address14 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        SBOX_V_address15 = zext_ln544_55_fu_4135_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        SBOX_V_address15 = zext_ln544_71_fu_2815_p1;
    end else begin
        SBOX_V_address15 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        SBOX_V_address2 = zext_ln544_42_fu_4070_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        SBOX_V_address2 = zext_ln544_58_fu_2750_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        SBOX_V_address2 = zext_ln544_38_fu_2240_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        SBOX_V_address2 = zext_ln544_34_fu_2131_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        SBOX_V_address2 = zext_ln544_30_fu_2085_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        SBOX_V_address2 = zext_ln544_26_fu_1976_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        SBOX_V_address2 = zext_ln544_22_fu_1887_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        SBOX_V_address2 = zext_ln544_18_fu_1778_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        SBOX_V_address2 = zext_ln544_14_fu_1732_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        SBOX_V_address2 = zext_ln544_10_fu_1623_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        SBOX_V_address2 = zext_ln544_6_fu_1557_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        SBOX_V_address2 = zext_ln544_2_fu_1415_p1;
    end else begin
        SBOX_V_address2 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        SBOX_V_address3 = zext_ln544_43_fu_4075_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        SBOX_V_address3 = zext_ln544_59_fu_2755_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        SBOX_V_address3 = zext_ln544_39_fu_2245_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        SBOX_V_address3 = zext_ln544_35_fu_2136_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        SBOX_V_address3 = zext_ln544_31_fu_2090_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        SBOX_V_address3 = zext_ln544_27_fu_1981_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        SBOX_V_address3 = zext_ln544_23_fu_1892_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        SBOX_V_address3 = zext_ln544_19_fu_1783_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        SBOX_V_address3 = zext_ln544_15_fu_1737_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        SBOX_V_address3 = zext_ln544_11_fu_1628_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        SBOX_V_address3 = zext_ln544_7_fu_1562_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        SBOX_V_address3 = zext_ln544_3_fu_1420_p1;
    end else begin
        SBOX_V_address3 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        SBOX_V_address4 = zext_ln544_44_fu_4080_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        SBOX_V_address4 = zext_ln544_60_fu_2760_p1;
    end else begin
        SBOX_V_address4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        SBOX_V_address5 = zext_ln544_45_fu_4085_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        SBOX_V_address5 = zext_ln544_61_fu_2765_p1;
    end else begin
        SBOX_V_address5 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        SBOX_V_address6 = zext_ln544_46_fu_4090_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        SBOX_V_address6 = zext_ln544_62_fu_2770_p1;
    end else begin
        SBOX_V_address6 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        SBOX_V_address7 = zext_ln544_47_fu_4095_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        SBOX_V_address7 = zext_ln544_63_fu_2775_p1;
    end else begin
        SBOX_V_address7 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        SBOX_V_address8 = zext_ln544_48_fu_4100_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        SBOX_V_address8 = zext_ln544_64_fu_2780_p1;
    end else begin
        SBOX_V_address8 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        SBOX_V_address9 = zext_ln544_49_fu_4105_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        SBOX_V_address9 = zext_ln544_65_fu_2785_p1;
    end else begin
        SBOX_V_address9 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state14) | (~((ap_predicate_op76_read_state1 == 1'b1) & (in_r_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        SBOX_V_ce0 = 1'b1;
    end else begin
        SBOX_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state14) | (~((ap_predicate_op76_read_state1 == 1'b1) & (in_r_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        SBOX_V_ce1 = 1'b1;
    end else begin
        SBOX_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        SBOX_V_ce10 = 1'b1;
    end else begin
        SBOX_V_ce10 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        SBOX_V_ce11 = 1'b1;
    end else begin
        SBOX_V_ce11 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        SBOX_V_ce12 = 1'b1;
    end else begin
        SBOX_V_ce12 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        SBOX_V_ce13 = 1'b1;
    end else begin
        SBOX_V_ce13 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        SBOX_V_ce14 = 1'b1;
    end else begin
        SBOX_V_ce14 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        SBOX_V_ce15 = 1'b1;
    end else begin
        SBOX_V_ce15 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state14) | (~((ap_predicate_op76_read_state1 == 1'b1) & (in_r_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        SBOX_V_ce2 = 1'b1;
    end else begin
        SBOX_V_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state14) | (~((ap_predicate_op76_read_state1 == 1'b1) & (in_r_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        SBOX_V_ce3 = 1'b1;
    end else begin
        SBOX_V_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        SBOX_V_ce4 = 1'b1;
    end else begin
        SBOX_V_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        SBOX_V_ce5 = 1'b1;
    end else begin
        SBOX_V_ce5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        SBOX_V_ce6 = 1'b1;
    end else begin
        SBOX_V_ce6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        SBOX_V_ce7 = 1'b1;
    end else begin
        SBOX_V_ce7 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        SBOX_V_ce8 = 1'b1;
    end else begin
        SBOX_V_ce8 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        SBOX_V_ce9 = 1'b1;
    end else begin
        SBOX_V_ce9 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln196_fu_2734_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state12 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state12 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln196_reg_5771 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_cipher_V_0_0_phi_fu_1027_p4 = cipher_0_V_3_fu_3298_p2;
    end else begin
        ap_phi_mux_cipher_V_0_0_phi_fu_1027_p4 = cipher_V_0_0_reg_1024;
    end
end

always @ (*) begin
    if (((icmp_ln196_reg_5771 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_cipher_V_10_0_phi_fu_927_p4 = cipher_10_V_4_fu_3800_p2;
    end else begin
        ap_phi_mux_cipher_V_10_0_phi_fu_927_p4 = cipher_V_10_0_reg_924;
    end
end

always @ (*) begin
    if (((icmp_ln196_reg_5771 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_cipher_V_11_0_phi_fu_917_p4 = cipher_11_V_4_fu_3852_p2;
    end else begin
        ap_phi_mux_cipher_V_11_0_phi_fu_917_p4 = cipher_V_11_0_reg_914;
    end
end

always @ (*) begin
    if (((icmp_ln196_reg_5771 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_cipher_V_12_0_phi_fu_1037_p4 = cipher_12_V_3_fu_3904_p2;
    end else begin
        ap_phi_mux_cipher_V_12_0_phi_fu_1037_p4 = cipher_V_12_0_reg_1034;
    end
end

always @ (*) begin
    if (((icmp_ln196_reg_5771 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_cipher_V_13_0_phi_fu_1047_p4 = cipher_13_V_4_fu_3956_p2;
    end else begin
        ap_phi_mux_cipher_V_13_0_phi_fu_1047_p4 = cipher_V_13_0_reg_1044;
    end
end

always @ (*) begin
    if (((icmp_ln196_reg_5771 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_cipher_V_14_0_phi_fu_1057_p4 = cipher_14_V_4_fu_4002_p2;
    end else begin
        ap_phi_mux_cipher_V_14_0_phi_fu_1057_p4 = cipher_V_14_0_reg_1054;
    end
end

always @ (*) begin
    if (((icmp_ln196_reg_5771 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_cipher_V_15_0_phi_fu_1067_p4 = cipher_15_V_4_fu_4054_p2;
    end else begin
        ap_phi_mux_cipher_V_15_0_phi_fu_1067_p4 = cipher_V_15_0_reg_1064;
    end
end

always @ (*) begin
    if (((icmp_ln196_reg_5771 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_cipher_V_1_0_phi_fu_1017_p4 = cipher_1_V_4_fu_3350_p2;
    end else begin
        ap_phi_mux_cipher_V_1_0_phi_fu_1017_p4 = cipher_V_1_0_reg_1014;
    end
end

always @ (*) begin
    if (((icmp_ln196_reg_5771 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_cipher_V_2_0_phi_fu_1007_p4 = cipher_2_V_4_fu_3396_p2;
    end else begin
        ap_phi_mux_cipher_V_2_0_phi_fu_1007_p4 = cipher_V_2_0_reg_1004;
    end
end

always @ (*) begin
    if (((icmp_ln196_reg_5771 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_cipher_V_3_0_phi_fu_997_p4 = cipher_3_V_4_fu_3448_p2;
    end else begin
        ap_phi_mux_cipher_V_3_0_phi_fu_997_p4 = cipher_V_3_0_reg_994;
    end
end

always @ (*) begin
    if (((icmp_ln196_reg_5771 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_cipher_V_4_0_phi_fu_987_p4 = cipher_4_V_3_fu_3500_p2;
    end else begin
        ap_phi_mux_cipher_V_4_0_phi_fu_987_p4 = cipher_V_4_0_reg_984;
    end
end

always @ (*) begin
    if (((icmp_ln196_reg_5771 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_cipher_V_5_0_phi_fu_977_p4 = cipher_5_V_4_fu_3552_p2;
    end else begin
        ap_phi_mux_cipher_V_5_0_phi_fu_977_p4 = cipher_V_5_0_reg_974;
    end
end

always @ (*) begin
    if (((icmp_ln196_reg_5771 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_cipher_V_6_0_phi_fu_967_p4 = cipher_6_V_4_fu_3598_p2;
    end else begin
        ap_phi_mux_cipher_V_6_0_phi_fu_967_p4 = cipher_V_6_0_reg_964;
    end
end

always @ (*) begin
    if (((icmp_ln196_reg_5771 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_cipher_V_7_0_phi_fu_957_p4 = cipher_7_V_4_fu_3650_p2;
    end else begin
        ap_phi_mux_cipher_V_7_0_phi_fu_957_p4 = cipher_V_7_0_reg_954;
    end
end

always @ (*) begin
    if (((icmp_ln196_reg_5771 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_cipher_V_8_0_phi_fu_947_p4 = cipher_8_V_3_fu_3702_p2;
    end else begin
        ap_phi_mux_cipher_V_8_0_phi_fu_947_p4 = cipher_V_8_0_reg_944;
    end
end

always @ (*) begin
    if (((icmp_ln196_reg_5771 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_cipher_V_9_0_phi_fu_937_p4 = cipher_9_V_4_fu_3754_p2;
    end else begin
        ap_phi_mux_cipher_V_9_0_phi_fu_937_p4 = cipher_V_9_0_reg_934;
    end
end

always @ (*) begin
    if (((icmp_ln116_reg_4296 == 1'd1) & (icmp_ln50_reg_4292 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_phi_mux_flag_flag_3_phi_fu_1113_p4 = 1'd1;
    end else begin
        ap_phi_mux_flag_flag_3_phi_fu_1113_p4 = flag_flag_3_reg_1109;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) & (((icmp_ln116_reg_4296 == 1'd1) & (icmp_ln50_reg_4292 == 1'd0)) | ((icmp_ln334_reg_4300 == 1'd0) & (icmp_ln50_reg_4292 == 1'd0))))) begin
        ap_phi_mux_flag_flag_4_phi_fu_1126_p10 = ap_phi_mux_flag_flag_3_phi_fu_1113_p4;
    end else begin
        ap_phi_mux_flag_flag_4_phi_fu_1126_p10 = flag_flag_4_reg_1121;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) & (((icmp_ln116_reg_4296 == 1'd1) & (icmp_ln50_reg_4292 == 1'd0)) | ((icmp_ln334_reg_4300 == 1'd0) & (icmp_ln50_reg_4292 == 1'd0))))) begin
        ap_phi_mux_flag_new_4_phi_fu_1146_p10 = 32'd24;
    end else begin
        ap_phi_mux_flag_new_4_phi_fu_1146_p10 = flag_new_4_reg_1142;
    end
end

always @ (*) begin
    if (((icmp_ln196_reg_5771 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_p_02329_1_phi_fu_1078_p4 = j_V_reg_5855;
    end else begin
        ap_phi_mux_p_02329_1_phi_fu_1078_p4 = p_02329_1_reg_1074;
    end
end

always @ (*) begin
    if (((tmp_nbreadreq_fu_212_p8 == 1'd1) & (icmp_ln50_fu_1213_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        in_r_TDATA_blk_n = in_r_TVALID;
    end else begin
        in_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_predicate_op76_read_state1 == 1'b1) & (in_r_TVALID == 1'b0)) & (ap_predicate_op76_read_state1 == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        in_r_TREADY = 1'b1;
    end else begin
        in_r_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((out_V_data_V_1_sel == 1'b1)) begin
        out_V_data_V_1_data_out = out_V_data_V_1_payload_B;
    end else begin
        out_V_data_V_1_data_out = out_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        out_V_data_V_1_vld_in = 1'b1;
    end else begin
        out_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        out_V_dest_V_1_vld_in = 1'b1;
    end else begin
        out_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        out_V_id_V_1_vld_in = 1'b1;
    end else begin
        out_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        out_V_keep_V_1_vld_in = 1'b1;
    end else begin
        out_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        out_V_last_V_1_vld_in = 1'b1;
    end else begin
        out_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        out_V_user_V_1_vld_in = 1'b1;
    end else begin
        out_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | ((icmp_ln116_reg_4296 == 1'd1) & (icmp_ln50_reg_4292 == 1'd0) & (1'b1 == ap_CS_fsm_state16)))) begin
        out_r_TDATA_blk_n = out_V_data_V_1_state[1'd1];
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_predicate_op76_read_state1 == 1'b1) & (in_r_TVALID == 1'b0)) & (tmp_nbreadreq_fu_212_p8 == 1'd1) & (icmp_ln50_fu_1213_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else if ((~((ap_predicate_op76_read_state1 == 1'b1) & (in_r_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (((icmp_ln116_fu_1219_p2 == 1'd0) & (icmp_ln50_fu_1213_p2 == 1'd0)) | ((icmp_ln50_fu_1213_p2 == 1'd1) & (tmp_nbreadreq_fu_212_p8 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else if ((~((ap_predicate_op76_read_state1 == 1'b1) & (in_r_TVALID == 1'b0)) & (icmp_ln116_fu_1219_p2 == 1'd1) & (icmp_ln50_fu_1213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln196_fu_2734_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln196_fu_2734_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if ((~((out_V_keep_V_1_state == 2'd1) | (out_V_user_V_1_state == 2'd1) | (out_V_id_V_1_state == 2'd1) | (out_V_last_V_1_state == 2'd1) | (out_V_dest_V_1_state == 2'd1) | (1'b1 == ap_block_state16_io) | (out_V_data_V_1_state == 2'd1) | ((out_V_data_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_keep_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_user_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_id_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_last_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_dest_V_1_state == 2'd3) & (out_r_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln112_fu_4281_p2 = (32'd1 + flag_load_2_reg_1176);

assign add_ln92_fu_1449_p2 = (32'd1 + flag);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_predicate_op76_read_state1 == 1'b1) & (in_r_TVALID == 1'b0));
end

assign ap_block_state12_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state16 = ((out_V_keep_V_1_state == 2'd1) | (out_V_user_V_1_state == 2'd1) | (out_V_id_V_1_state == 2'd1) | (out_V_last_V_1_state == 2'd1) | (out_V_dest_V_1_state == 2'd1) | (out_V_data_V_1_state == 2'd1) | ((out_V_data_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_keep_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_user_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_id_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_last_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_dest_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)));
end

always @ (*) begin
    ap_block_state16_io = ((ap_predicate_op777_write_state16 == 1'b1) & (out_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_condition_1135 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_1306 = (~(ap_phi_mux_p_02329_1_phi_fu_1078_p4 == 4'd1) & ~(ap_phi_mux_p_02329_1_phi_fu_1078_p4 == 4'd8) & ~(ap_phi_mux_p_02329_1_phi_fu_1078_p4 == 4'd7) & ~(ap_phi_mux_p_02329_1_phi_fu_1078_p4 == 4'd6) & ~(ap_phi_mux_p_02329_1_phi_fu_1078_p4 == 4'd5) & ~(ap_phi_mux_p_02329_1_phi_fu_1078_p4 == 4'd4) & ~(ap_phi_mux_p_02329_1_phi_fu_1078_p4 == 4'd3) & ~(ap_phi_mux_p_02329_1_phi_fu_1078_p4 == 4'd2) & (icmp_ln196_fu_2734_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_611 = (~((ap_predicate_op76_read_state1 == 1'b1) & (in_r_TVALID == 1'b0)) & (tmp_nbreadreq_fu_212_p8 == 1'd1) & (icmp_ln50_fu_1213_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_phi_ln719_reg_1086 = 'bx;

always @ (*) begin
    ap_predicate_op76_read_state1 = ((tmp_nbreadreq_fu_212_p8 == 1'd1) & (icmp_ln50_fu_1213_p2 == 1'd1));
end

always @ (*) begin
    ap_predicate_op777_write_state16 = ((icmp_ln116_reg_4296 == 1'd1) & (icmp_ln50_reg_4292 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cipherT_V_fu_4225_p17 = {{{{{{{{{{{{{{{{cipher_15_V_3_fu_4220_p2}, {cipher_14_V_3_fu_4215_p2}}, {cipher_13_V_3_fu_4210_p2}}, {cipher_12_V_2_fu_4205_p2}}, {cipher_11_V_3_fu_4200_p2}}, {cipher_10_V_3_fu_4195_p2}}, {cipher_9_V_3_fu_4190_p2}}, {cipher_8_V_2_fu_4185_p2}}, {cipher_7_V_3_fu_4180_p2}}, {cipher_6_V_3_fu_4175_p2}}, {cipher_5_V_3_fu_4170_p2}}, {cipher_4_V_2_fu_4165_p2}}, {cipher_3_V_3_fu_4160_p2}}, {cipher_2_V_3_fu_4155_p2}}, {cipher_1_V_3_fu_4150_p2}}, {cipher_0_V_2_fu_4144_p2}};

assign cipher_0_V_2_fu_4144_p2 = (xor_ln719_5_fu_4140_p2 ^ SBOX_V_q0);

assign cipher_0_V_3_fu_3298_p2 = (xor_ln719_25_fu_3292_p2 ^ xor_ln719_23_fu_3280_p2);

assign cipher_0_V_fu_2654_p2 = (trunc_ln214_30_fu_2638_p4 ^ trunc_ln214_14_reg_4421);

assign cipher_10_V_3_fu_4195_p2 = (xor_ln1357_154_reg_5625 ^ SBOX_V_q2);

assign cipher_10_V_4_fu_3800_p2 = (xor_ln719_72_fu_3794_p2 ^ xor_ln719_70_fu_3782_p2);

assign cipher_10_V_fu_2704_p2 = (trunc_ln214_5_reg_4347 ^ trunc_ln214_20_fu_2538_p4);

assign cipher_11_V_3_fu_4200_p2 = (xor_ln1357_155_reg_5636 ^ SBOX_V_q7);

assign cipher_11_V_4_fu_3852_p2 = (xor_ln719_77_fu_3846_p2 ^ xor_ln719_75_fu_3834_p2);

assign cipher_11_V_fu_2709_p2 = (trunc_ln214_4_reg_4340 ^ trunc_ln214_19_fu_2528_p4);

assign cipher_12_V_2_fu_4205_p2 = (xor_ln1357_156_reg_5647 ^ SBOX_V_q12);

assign cipher_12_V_3_fu_3904_p2 = (xor_ln719_82_fu_3898_p2 ^ xor_ln719_80_fu_3886_p2);

assign cipher_12_V_fu_2714_p2 = (trunc_ln214_3_reg_4331 ^ trunc_ln214_18_fu_2518_p4);

assign cipher_13_V_3_fu_4210_p2 = (xor_ln1357_157_reg_5658 ^ SBOX_V_q1);

assign cipher_13_V_4_fu_3956_p2 = (xor_ln719_87_fu_3950_p2 ^ xor_ln719_85_fu_3938_p2);

assign cipher_13_V_fu_2719_p2 = (trunc_ln214_2_reg_4322 ^ trunc_ln214_17_fu_2508_p4);

assign cipher_14_V_3_fu_4215_p2 = (xor_ln1357_158_reg_5669 ^ SBOX_V_q6);

assign cipher_14_V_4_fu_4002_p2 = (xor_ln719_91_fu_3996_p2 ^ xor_ln719_89_fu_3984_p2);

assign cipher_14_V_fu_2724_p2 = (trunc_ln214_1_reg_4313 ^ trunc_ln214_16_fu_2498_p4);

assign cipher_15_V_3_fu_4220_p2 = (xor_ln1357_159_reg_5680 ^ SBOX_V_q11);

assign cipher_15_V_4_fu_4054_p2 = (xor_ln719_96_fu_4048_p2 ^ xor_ln719_94_fu_4036_p2);

assign cipher_15_V_fu_2729_p2 = (trunc_ln214_reg_4304 ^ trunc_ln214_15_fu_2494_p1);

assign cipher_1_V_3_fu_4150_p2 = (xor_ln1357_145_reg_5526 ^ SBOX_V_q5);

assign cipher_1_V_4_fu_3350_p2 = (xor_ln719_30_fu_3344_p2 ^ xor_ln719_28_fu_3332_p2);

assign cipher_1_V_fu_2659_p2 = (trunc_ln214_29_fu_2628_p4 ^ trunc_ln214_13_reg_4414);

assign cipher_2_V_3_fu_4155_p2 = (xor_ln1357_146_reg_5537 ^ SBOX_V_q10);

assign cipher_2_V_4_fu_3396_p2 = (xor_ln719_34_fu_3390_p2 ^ xor_ln719_32_fu_3378_p2);

assign cipher_2_V_fu_2664_p2 = (trunc_ln214_28_fu_2618_p4 ^ trunc_ln214_12_reg_4407);

assign cipher_3_V_3_fu_4160_p2 = (xor_ln1357_147_reg_5548 ^ SBOX_V_q15);

assign cipher_3_V_4_fu_3448_p2 = (xor_ln719_39_fu_3442_p2 ^ xor_ln719_37_fu_3430_p2);

assign cipher_3_V_fu_2669_p2 = (trunc_ln214_27_fu_2608_p4 ^ trunc_ln214_11_reg_4400);

assign cipher_4_V_2_fu_4165_p2 = (xor_ln1357_148_reg_5559 ^ SBOX_V_q4);

assign cipher_4_V_3_fu_3500_p2 = (xor_ln719_44_fu_3494_p2 ^ xor_ln719_42_fu_3482_p2);

assign cipher_4_V_fu_2674_p2 = (trunc_ln214_26_fu_2598_p4 ^ trunc_ln214_10_reg_4392);

assign cipher_5_V_3_fu_4170_p2 = (xor_ln1357_149_reg_5570 ^ SBOX_V_q9);

assign cipher_5_V_4_fu_3552_p2 = (xor_ln719_49_fu_3546_p2 ^ xor_ln719_47_fu_3534_p2);

assign cipher_5_V_fu_2679_p2 = (trunc_ln214_s_reg_4384 ^ trunc_ln214_25_fu_2588_p4);

assign cipher_6_V_3_fu_4175_p2 = (xor_ln1357_150_reg_5581 ^ SBOX_V_q14);

assign cipher_6_V_4_fu_3598_p2 = (xor_ln719_53_fu_3592_p2 ^ xor_ln719_51_fu_3580_p2);

assign cipher_6_V_fu_2684_p2 = (trunc_ln214_9_reg_4376 ^ trunc_ln214_24_fu_2578_p4);

assign cipher_7_V_3_fu_4180_p2 = (xor_ln1357_151_reg_5592 ^ SBOX_V_q3);

assign cipher_7_V_4_fu_3650_p2 = (xor_ln719_58_fu_3644_p2 ^ xor_ln719_56_fu_3632_p2);

assign cipher_7_V_fu_2689_p2 = (trunc_ln214_8_reg_4368 ^ trunc_ln214_23_fu_2568_p4);

assign cipher_8_V_2_fu_4185_p2 = (xor_ln1357_152_reg_5603 ^ SBOX_V_q8);

assign cipher_8_V_3_fu_3702_p2 = (xor_ln719_63_fu_3696_p2 ^ xor_ln719_61_fu_3684_p2);

assign cipher_8_V_fu_2694_p2 = (trunc_ln214_7_reg_4361 ^ trunc_ln214_22_fu_2558_p4);

assign cipher_9_V_3_fu_4190_p2 = (xor_ln1357_153_reg_5614 ^ SBOX_V_q13);

assign cipher_9_V_4_fu_3754_p2 = (xor_ln719_68_fu_3748_p2 ^ xor_ln719_66_fu_3736_p2);

assign cipher_9_V_fu_2699_p2 = (trunc_ln214_6_reg_4354 ^ trunc_ln214_21_fu_2548_p4);

assign data_data_V_fu_4261_p1 = cipherT_V_fu_4225_p17;

assign icmp_ln116_fu_1219_p2 = ((flag == 32'd2) ? 1'b1 : 1'b0);

assign icmp_ln196_fu_2734_p2 = ((ap_phi_mux_p_02329_1_phi_fu_1078_p4 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln334_fu_1235_p2 = (($signed(tmp_3_fu_1225_p4) > $signed(30'd0)) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_1213_p2 = (($signed(tmp_2_fu_1203_p4) < $signed(31'd1)) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_1433_p2 = ((in_r_TID == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln94_fu_1455_p2 = ((in_r_TID == 8'd1) ? 1'b1 : 1'b0);

assign j_V_fu_2820_p2 = (ap_phi_mux_p_02329_1_phi_fu_1078_p4 + 4'd1);

assign out_V_data_V_1_ack_in = out_V_data_V_1_state[1'd1];

assign out_V_data_V_1_ack_out = out_r_TREADY;

assign out_V_data_V_1_load_A = (out_V_data_V_1_state_cmp_full & ~out_V_data_V_1_sel_wr);

assign out_V_data_V_1_load_B = (out_V_data_V_1_state_cmp_full & out_V_data_V_1_sel_wr);

assign out_V_data_V_1_sel = out_V_data_V_1_sel_rd;

assign out_V_data_V_1_state_cmp_full = ((out_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_V_data_V_1_vld_out = out_V_data_V_1_state[1'd0];

assign out_V_dest_V_1_ack_out = out_r_TREADY;

assign out_V_dest_V_1_data_out = 8'd4;

assign out_V_dest_V_1_sel = out_V_dest_V_1_sel_rd;

assign out_V_dest_V_1_vld_out = out_V_dest_V_1_state[1'd0];

assign out_V_id_V_1_ack_out = out_r_TREADY;

assign out_V_id_V_1_data_out = 8'd3;

assign out_V_id_V_1_sel = out_V_id_V_1_sel_rd;

assign out_V_id_V_1_vld_out = out_V_id_V_1_state[1'd0];

assign out_V_keep_V_1_ack_out = out_r_TREADY;

assign out_V_keep_V_1_data_out = 64'd18446744073709551615;

assign out_V_keep_V_1_sel = out_V_keep_V_1_sel_rd;

assign out_V_keep_V_1_vld_out = out_V_keep_V_1_state[1'd0];

assign out_V_last_V_1_ack_out = out_r_TREADY;

assign out_V_last_V_1_data_out = 1'd1;

assign out_V_last_V_1_sel = out_V_last_V_1_sel_rd;

assign out_V_last_V_1_vld_out = out_V_last_V_1_state[1'd0];

assign out_V_user_V_1_ack_out = out_r_TREADY;

assign out_V_user_V_1_data_out = 16'd0;

assign out_V_user_V_1_sel = out_V_user_V_1_sel_rd;

assign out_V_user_V_1_vld_out = out_V_user_V_1_state[1'd0];

assign out_r_TDATA = out_V_data_V_1_data_out;

assign out_r_TDEST = out_V_dest_V_1_data_out;

assign out_r_TID = out_V_id_V_1_data_out;

assign out_r_TKEEP = out_V_keep_V_1_data_out;

assign out_r_TLAST = out_V_last_V_1_data_out;

assign out_r_TUSER = out_V_user_V_1_data_out;

assign out_r_TVALID = out_V_keep_V_1_state[1'd0];

assign shl_ln1503_10_fu_3114_p2 = SBOX_V_q2 << 8'd1;

assign shl_ln1503_11_fu_3142_p2 = SBOX_V_q7 << 8'd1;

assign shl_ln1503_12_fu_3170_p2 = SBOX_V_q12 << 8'd1;

assign shl_ln1503_13_fu_3198_p2 = SBOX_V_q1 << 8'd1;

assign shl_ln1503_14_fu_3226_p2 = SBOX_V_q6 << 8'd1;

assign shl_ln1503_15_fu_3254_p2 = SBOX_V_q11 << 8'd1;

assign shl_ln1503_1_fu_2862_p2 = SBOX_V_q5 << 8'd1;

assign shl_ln1503_2_fu_2890_p2 = SBOX_V_q10 << 8'd1;

assign shl_ln1503_3_fu_2918_p2 = SBOX_V_q15 << 8'd1;

assign shl_ln1503_4_fu_2946_p2 = SBOX_V_q4 << 8'd1;

assign shl_ln1503_5_fu_2974_p2 = SBOX_V_q9 << 8'd1;

assign shl_ln1503_6_fu_3002_p2 = SBOX_V_q14 << 8'd1;

assign shl_ln1503_7_fu_3030_p2 = SBOX_V_q3 << 8'd1;

assign shl_ln1503_8_fu_3058_p2 = SBOX_V_q8 << 8'd1;

assign shl_ln1503_9_fu_3086_p2 = SBOX_V_q13 << 8'd1;

assign shl_ln1503_fu_2834_p2 = SBOX_V_q0 << 8'd1;

assign temp_column_b_0_V_1_fu_2958_p3 = ((tmp_8_fu_2938_p3[0:0] === 1'b1) ? xor_ln1503_4_fu_2952_p2 : shl_ln1503_4_fu_2946_p2);

assign temp_column_b_0_V_2_fu_3070_p3 = ((tmp_12_fu_3050_p3[0:0] === 1'b1) ? xor_ln1503_8_fu_3064_p2 : shl_ln1503_8_fu_3058_p2);

assign temp_column_b_0_V_3_fu_3182_p3 = ((tmp_16_fu_3162_p3[0:0] === 1'b1) ? xor_ln1503_12_fu_3176_p2 : shl_ln1503_12_fu_3170_p2);

assign temp_column_b_0_V_fu_2846_p3 = ((tmp_4_fu_2826_p3[0:0] === 1'b1) ? xor_ln1503_fu_2840_p2 : shl_ln1503_fu_2834_p2);

assign temp_column_b_1_V_1_fu_2986_p3 = ((tmp_9_fu_2966_p3[0:0] === 1'b1) ? xor_ln1503_5_fu_2980_p2 : shl_ln1503_5_fu_2974_p2);

assign temp_column_b_1_V_2_fu_3098_p3 = ((tmp_13_fu_3078_p3[0:0] === 1'b1) ? xor_ln1503_9_fu_3092_p2 : shl_ln1503_9_fu_3086_p2);

assign temp_column_b_1_V_3_fu_3210_p3 = ((tmp_17_fu_3190_p3[0:0] === 1'b1) ? xor_ln1503_13_fu_3204_p2 : shl_ln1503_13_fu_3198_p2);

assign temp_column_b_1_V_fu_2874_p3 = ((tmp_5_fu_2854_p3[0:0] === 1'b1) ? xor_ln1503_1_fu_2868_p2 : shl_ln1503_1_fu_2862_p2);

assign temp_column_b_2_V_1_fu_3014_p3 = ((tmp_10_fu_2994_p3[0:0] === 1'b1) ? xor_ln1503_6_fu_3008_p2 : shl_ln1503_6_fu_3002_p2);

assign temp_column_b_2_V_2_fu_3126_p3 = ((tmp_14_fu_3106_p3[0:0] === 1'b1) ? xor_ln1503_10_fu_3120_p2 : shl_ln1503_10_fu_3114_p2);

assign temp_column_b_2_V_3_fu_3238_p3 = ((tmp_18_fu_3218_p3[0:0] === 1'b1) ? xor_ln1503_14_fu_3232_p2 : shl_ln1503_14_fu_3226_p2);

assign temp_column_b_2_V_fu_2902_p3 = ((tmp_6_fu_2882_p3[0:0] === 1'b1) ? xor_ln1503_2_fu_2896_p2 : shl_ln1503_2_fu_2890_p2);

assign temp_column_b_3_V_1_fu_3042_p3 = ((tmp_11_fu_3022_p3[0:0] === 1'b1) ? xor_ln1503_7_fu_3036_p2 : shl_ln1503_7_fu_3030_p2);

assign temp_column_b_3_V_2_fu_3154_p3 = ((tmp_15_fu_3134_p3[0:0] === 1'b1) ? xor_ln1503_11_fu_3148_p2 : shl_ln1503_11_fu_3142_p2);

assign temp_column_b_3_V_3_fu_3266_p3 = ((tmp_19_fu_3246_p3[0:0] === 1'b1) ? xor_ln1503_15_fu_3260_p2 : shl_ln1503_15_fu_3254_p2);

assign temp_column_b_3_V_fu_2930_p3 = ((tmp_7_fu_2910_p3[0:0] === 1'b1) ? xor_ln1503_3_fu_2924_p2 : shl_ln1503_3_fu_2918_p2);

assign tmp_10_fu_2994_p3 = SBOX_V_q14[32'd7];

assign tmp_11_fu_3022_p3 = SBOX_V_q3[32'd7];

assign tmp_12_fu_3050_p3 = SBOX_V_q8[32'd7];

assign tmp_13_fu_3078_p3 = SBOX_V_q13[32'd7];

assign tmp_14_fu_3106_p3 = SBOX_V_q2[32'd7];

assign tmp_15_fu_3134_p3 = SBOX_V_q7[32'd7];

assign tmp_16_fu_3162_p3 = SBOX_V_q12[32'd7];

assign tmp_17_fu_3190_p3 = SBOX_V_q1[32'd7];

assign tmp_18_fu_3218_p3 = SBOX_V_q6[32'd7];

assign tmp_19_fu_3246_p3 = SBOX_V_q11[32'd7];

assign tmp_2_fu_1203_p4 = {{flag[31:1]}};

assign tmp_3_fu_1225_p4 = {{flag[31:2]}};

assign tmp_4_fu_2826_p3 = SBOX_V_q0[32'd7];

assign tmp_5_fu_2854_p3 = SBOX_V_q5[32'd7];

assign tmp_6_fu_2882_p3 = SBOX_V_q10[32'd7];

assign tmp_7_fu_2910_p3 = SBOX_V_q15[32'd7];

assign tmp_8_fu_2938_p3 = SBOX_V_q4[32'd7];

assign tmp_9_fu_2966_p3 = SBOX_V_q9[32'd7];

assign tmp_nbreadreq_fu_212_p8 = in_r_TVALID;

assign trunc_ln209_1_fu_4272_p1 = tmp_data_V_reg_4450[127:0];

assign trunc_ln209_fu_1439_p1 = in_r_TDATA[127:0];

assign trunc_ln214_15_fu_2494_p1 = plainT_V[7:0];

assign trunc_ln214_16_fu_2498_p4 = {{plainT_V[15:8]}};

assign trunc_ln214_17_fu_2508_p4 = {{plainT_V[23:16]}};

assign trunc_ln214_18_fu_2518_p4 = {{plainT_V[31:24]}};

assign trunc_ln214_19_fu_2528_p4 = {{plainT_V[39:32]}};

assign trunc_ln214_1_fu_1249_p4 = {{keyT_V[15:8]}};

assign trunc_ln214_20_fu_2538_p4 = {{plainT_V[47:40]}};

assign trunc_ln214_21_fu_2548_p4 = {{plainT_V[55:48]}};

assign trunc_ln214_22_fu_2558_p4 = {{plainT_V[63:56]}};

assign trunc_ln214_23_fu_2568_p4 = {{plainT_V[71:64]}};

assign trunc_ln214_24_fu_2578_p4 = {{plainT_V[79:72]}};

assign trunc_ln214_25_fu_2588_p4 = {{plainT_V[87:80]}};

assign trunc_ln214_26_fu_2598_p4 = {{plainT_V[95:88]}};

assign trunc_ln214_27_fu_2608_p4 = {{plainT_V[103:96]}};

assign trunc_ln214_28_fu_2618_p4 = {{plainT_V[111:104]}};

assign trunc_ln214_29_fu_2628_p4 = {{plainT_V[119:112]}};

assign trunc_ln214_2_fu_1259_p4 = {{keyT_V[23:16]}};

assign trunc_ln214_30_fu_2638_p4 = {{plainT_V[127:120]}};

assign trunc_ln214_3_fu_1269_p4 = {{keyT_V[31:24]}};

assign trunc_ln214_fu_1245_p1 = keyT_V[7:0];

assign xor_ln1357_100_fu_2330_p2 = (xor_ln1357_96_reg_5079 ^ xor_ln1357_84_reg_4983);

assign xor_ln1357_101_fu_2334_p2 = (xor_ln1357_97_reg_5086 ^ xor_ln1357_85_reg_4991);

assign xor_ln1357_102_fu_2338_p2 = (xor_ln1357_98_reg_5093 ^ xor_ln1357_86_reg_4999);

assign xor_ln1357_103_fu_2342_p2 = (xor_ln1357_99_reg_5100 ^ xor_ln1357_87_reg_5007);

assign xor_ln1357_104_fu_2035_p2 = (xor_ln1357_96_fu_2011_p2 ^ xor_ln1357_72_reg_4882);

assign xor_ln1357_105_fu_2040_p2 = (xor_ln1357_97_fu_2017_p2 ^ xor_ln1357_73_reg_4889);

assign xor_ln1357_106_fu_2045_p2 = (xor_ln1357_98_fu_2023_p2 ^ xor_ln1357_74_reg_4896);

assign xor_ln1357_107_fu_2050_p2 = (xor_ln1357_99_fu_2029_p2 ^ xor_ln1357_75_reg_4903);

assign xor_ln1357_108_fu_2055_p2 = (xor_ln1357_92_reg_5015 ^ xor_ln1357_104_fu_2035_p2);

assign xor_ln1357_109_fu_2060_p2 = (xor_ln1357_93_reg_5021 ^ xor_ln1357_105_fu_2040_p2);

assign xor_ln1357_10_fu_1517_p2 = (xor_ln1357_6_fu_1497_p2 ^ trunc_ln214_5_reg_4347);

assign xor_ln1357_110_fu_2065_p2 = (xor_ln1357_94_reg_5027 ^ xor_ln1357_106_fu_2045_p2);

assign xor_ln1357_111_fu_2070_p2 = (xor_ln1357_95_reg_5033 ^ xor_ln1357_107_fu_2050_p2);

assign xor_ln1357_112_fu_2141_p2 = (xor_ln719_3_reg_5175 ^ xor_ln1357_96_reg_5079);

assign xor_ln1357_113_fu_2145_p2 = (xor_ln1357_97_reg_5086 ^ reg_1191);

assign xor_ln1357_114_fu_2150_p2 = (xor_ln1357_98_reg_5093 ^ reg_1195);

assign xor_ln1357_115_fu_2155_p2 = (xor_ln1357_99_reg_5100 ^ reg_1187);

assign xor_ln1357_116_fu_2346_p2 = (xor_ln719_3_reg_5175 ^ xor_ln1357_84_reg_4983);

assign xor_ln1357_117_fu_2350_p2 = (xor_ln1357_85_reg_4991 ^ reg_1191);

assign xor_ln1357_118_fu_2355_p2 = (xor_ln1357_86_reg_4999 ^ reg_1195);

assign xor_ln1357_119_fu_2360_p2 = (xor_ln1357_87_reg_5007 ^ reg_1187);

assign xor_ln1357_11_fu_1522_p2 = (xor_ln1357_7_fu_1502_p2 ^ trunc_ln214_4_reg_4340);

assign xor_ln1357_120_fu_2365_p2 = (xor_ln1357_116_fu_2346_p2 ^ xor_ln1357_104_reg_5107);

assign xor_ln1357_121_fu_2370_p2 = (xor_ln1357_117_fu_2350_p2 ^ xor_ln1357_105_reg_5114);

assign xor_ln1357_122_fu_2375_p2 = (xor_ln1357_118_fu_2355_p2 ^ xor_ln1357_106_reg_5121);

assign xor_ln1357_123_fu_2380_p2 = (xor_ln1357_119_fu_2360_p2 ^ xor_ln1357_107_reg_5128);

assign xor_ln1357_124_fu_2101_p2 = (xor_ln719_3_fu_2095_p2 ^ xor_ln1357_60_reg_4782);

assign xor_ln1357_125_fu_2106_p2 = (xor_ln1357_61_reg_4790 ^ SBOX_V_q2);

assign xor_ln1357_126_fu_2111_p2 = (xor_ln1357_62_reg_4798 ^ SBOX_V_q3);

assign xor_ln1357_127_fu_2116_p2 = (xor_ln1357_63_reg_4806 ^ SBOX_V_q0);

assign xor_ln1357_128_fu_2166_p2 = (xor_ln1357_163_fu_2160_p2 ^ SBOX_V_q1);

assign xor_ln1357_129_fu_2172_p2 = (xor_ln1357_113_fu_2145_p2 ^ SBOX_V_q2);

assign xor_ln1357_12_fu_1527_p2 = (xor_ln1357_8_fu_1507_p2 ^ trunc_ln214_3_reg_4331);

assign xor_ln1357_130_fu_2178_p2 = (xor_ln1357_114_fu_2150_p2 ^ SBOX_V_q3);

assign xor_ln1357_131_fu_2184_p2 = (xor_ln1357_115_fu_2155_p2 ^ SBOX_V_q0);

assign xor_ln1357_132_fu_2385_p2 = (xor_ln1357_128_reg_5249 ^ xor_ln1357_116_fu_2346_p2);

assign xor_ln1357_133_fu_2390_p2 = (xor_ln1357_129_reg_5256 ^ xor_ln1357_117_fu_2350_p2);

assign xor_ln1357_134_fu_2395_p2 = (xor_ln1357_130_reg_5263 ^ xor_ln1357_118_fu_2355_p2);

assign xor_ln1357_135_fu_2400_p2 = (xor_ln1357_131_reg_5270 ^ xor_ln1357_119_fu_2360_p2);

assign xor_ln1357_136_fu_2190_p2 = (xor_ln1357_128_fu_2166_p2 ^ xor_ln1357_104_reg_5107);

assign xor_ln1357_137_fu_2195_p2 = (xor_ln1357_129_fu_2172_p2 ^ xor_ln1357_105_reg_5114);

assign xor_ln1357_138_fu_2200_p2 = (xor_ln1357_130_fu_2178_p2 ^ xor_ln1357_106_reg_5121);

assign xor_ln1357_139_fu_2205_p2 = (xor_ln1357_131_fu_2184_p2 ^ xor_ln1357_107_reg_5128);

assign xor_ln1357_13_fu_1532_p2 = (xor_ln1357_9_fu_1512_p2 ^ trunc_ln214_2_reg_4322);

assign xor_ln1357_140_fu_2210_p2 = (xor_ln1357_136_fu_2190_p2 ^ xor_ln1357_124_reg_5181);

assign xor_ln1357_141_fu_2215_p2 = (xor_ln1357_137_fu_2195_p2 ^ xor_ln1357_125_reg_5188);

assign xor_ln1357_142_fu_2220_p2 = (xor_ln1357_138_fu_2200_p2 ^ xor_ln1357_126_reg_5195);

assign xor_ln1357_143_fu_2225_p2 = (xor_ln1357_139_fu_2205_p2 ^ xor_ln1357_127_reg_5202);

assign xor_ln1357_144_fu_1461_p2 = (trunc_ln214_14_reg_4421 ^ 8'd1);

assign xor_ln1357_145_fu_2411_p2 = (xor_ln1357_129_reg_5256 ^ SBOX_V_q2);

assign xor_ln1357_146_fu_2416_p2 = (xor_ln1357_130_reg_5263 ^ SBOX_V_q3);

assign xor_ln1357_147_fu_2421_p2 = (xor_ln1357_131_reg_5270 ^ SBOX_V_q0);

assign xor_ln1357_148_fu_2426_p2 = (xor_ln719_4_fu_2405_p2 ^ xor_ln1357_116_fu_2346_p2);

assign xor_ln1357_149_fu_2432_p2 = (xor_ln1357_117_fu_2350_p2 ^ SBOX_V_q2);

assign xor_ln1357_14_fu_1537_p2 = (xor_ln1357_10_fu_1517_p2 ^ trunc_ln214_1_reg_4313);

assign xor_ln1357_150_fu_2438_p2 = (xor_ln1357_118_fu_2355_p2 ^ SBOX_V_q3);

assign xor_ln1357_151_fu_2444_p2 = (xor_ln1357_119_fu_2360_p2 ^ SBOX_V_q0);

assign xor_ln1357_152_fu_2450_p2 = (xor_ln1357_148_fu_2426_p2 ^ xor_ln1357_136_reg_5277);

assign xor_ln1357_153_fu_2455_p2 = (xor_ln1357_149_fu_2432_p2 ^ xor_ln1357_137_reg_5283);

assign xor_ln1357_154_fu_2460_p2 = (xor_ln1357_150_fu_2438_p2 ^ xor_ln1357_138_reg_5289);

assign xor_ln1357_155_fu_2465_p2 = (xor_ln1357_151_fu_2444_p2 ^ xor_ln1357_139_reg_5295);

assign xor_ln1357_156_fu_2470_p2 = (xor_ln1357_148_fu_2426_p2 ^ xor_ln1357_124_reg_5181);

assign xor_ln1357_157_fu_2475_p2 = (xor_ln1357_149_fu_2432_p2 ^ xor_ln1357_125_reg_5188);

assign xor_ln1357_158_fu_2480_p2 = (xor_ln1357_150_fu_2438_p2 ^ xor_ln1357_126_reg_5195);

assign xor_ln1357_159_fu_2485_p2 = (xor_ln1357_151_fu_2444_p2 ^ xor_ln1357_127_reg_5202);

assign xor_ln1357_15_fu_1542_p2 = (xor_ln1357_11_fu_1522_p2 ^ trunc_ln214_reg_4304);

assign xor_ln1357_160_fu_1652_p2 = (xor_ln1357_16_fu_1633_p2 ^ 8'd4);

assign xor_ln1357_161_fu_1807_p2 = (xor_ln1357_48_fu_1788_p2 ^ 8'd16);

assign xor_ln1357_162_fu_2005_p2 = (xor_ln1357_80_fu_1986_p2 ^ 8'd64);

assign xor_ln1357_163_fu_2160_p2 = (xor_ln1357_112_fu_2141_p2 ^ 8'd27);

assign xor_ln1357_16_fu_1633_p2 = (xor_ln719_reg_4579 ^ xor_ln1357_reg_4467);

assign xor_ln1357_17_fu_1637_p2 = (xor_ln1357_1_reg_4473 ^ reg_1191);

assign xor_ln1357_18_fu_1642_p2 = (xor_ln1357_2_reg_4479 ^ reg_1195);

assign xor_ln1357_19_fu_1647_p2 = (xor_ln1357_3_reg_4485 ^ reg_1187);

assign xor_ln1357_1_fu_1472_p2 = (trunc_ln214_13_reg_4414 ^ SBOX_V_q2);

assign xor_ln1357_20_fu_1573_p2 = (xor_ln719_fu_1567_p2 ^ trunc_ln214_10_reg_4392);

assign xor_ln1357_21_fu_1578_p2 = (trunc_ln214_s_reg_4384 ^ SBOX_V_q2);

assign xor_ln1357_22_fu_1583_p2 = (trunc_ln214_9_reg_4376 ^ SBOX_V_q3);

assign xor_ln1357_23_fu_1588_p2 = (trunc_ln214_8_reg_4368 ^ SBOX_V_q0);

assign xor_ln1357_24_fu_2250_p2 = (xor_ln1357_8_reg_4511 ^ xor_ln1357_20_reg_4584);

assign xor_ln1357_25_fu_2254_p2 = (xor_ln1357_9_reg_4518 ^ xor_ln1357_21_reg_4592);

assign xor_ln1357_26_fu_2258_p2 = (xor_ln1357_22_reg_4600 ^ xor_ln1357_10_reg_4525);

assign xor_ln1357_27_fu_2262_p2 = (xor_ln1357_23_reg_4608 ^ xor_ln1357_11_reg_4532);

assign xor_ln1357_28_fu_1593_p2 = (xor_ln1357_20_fu_1573_p2 ^ trunc_ln214_3_reg_4331);

assign xor_ln1357_29_fu_1598_p2 = (xor_ln1357_21_fu_1578_p2 ^ trunc_ln214_2_reg_4322);

assign xor_ln1357_2_fu_1477_p2 = (trunc_ln214_12_reg_4407 ^ SBOX_V_q3);

assign xor_ln1357_30_fu_1603_p2 = (xor_ln1357_22_fu_1583_p2 ^ trunc_ln214_1_reg_4313);

assign xor_ln1357_31_fu_1608_p2 = (xor_ln1357_23_fu_1588_p2 ^ trunc_ln214_reg_4304);

assign xor_ln1357_32_fu_1658_p2 = (xor_ln1357_160_fu_1652_p2 ^ SBOX_V_q1);

assign xor_ln1357_33_fu_1664_p2 = (xor_ln1357_17_fu_1637_p2 ^ SBOX_V_q2);

assign xor_ln1357_34_fu_1670_p2 = (xor_ln1357_18_fu_1642_p2 ^ SBOX_V_q3);

assign xor_ln1357_35_fu_1676_p2 = (xor_ln1357_19_fu_1647_p2 ^ SBOX_V_q0);

assign xor_ln1357_36_fu_2266_p2 = (xor_ln1357_32_reg_4680 ^ xor_ln1357_20_reg_4584);

assign xor_ln1357_37_fu_2270_p2 = (xor_ln1357_33_reg_4687 ^ xor_ln1357_21_reg_4592);

assign xor_ln1357_38_fu_2274_p2 = (xor_ln1357_34_reg_4694 ^ xor_ln1357_22_reg_4600);

assign xor_ln1357_39_fu_2278_p2 = (xor_ln1357_35_reg_4701 ^ xor_ln1357_23_reg_4608);

assign xor_ln1357_3_fu_1482_p2 = (trunc_ln214_11_reg_4400 ^ SBOX_V_q0);

assign xor_ln1357_40_fu_1682_p2 = (xor_ln1357_8_reg_4511 ^ xor_ln1357_32_fu_1658_p2);

assign xor_ln1357_41_fu_1687_p2 = (xor_ln1357_9_reg_4518 ^ xor_ln1357_33_fu_1664_p2);

assign xor_ln1357_42_fu_1692_p2 = (xor_ln1357_34_fu_1670_p2 ^ xor_ln1357_10_reg_4525);

assign xor_ln1357_43_fu_1697_p2 = (xor_ln1357_35_fu_1676_p2 ^ xor_ln1357_11_reg_4532);

assign xor_ln1357_44_fu_1702_p2 = (xor_ln1357_40_fu_1682_p2 ^ xor_ln1357_28_reg_4616);

assign xor_ln1357_45_fu_1707_p2 = (xor_ln1357_41_fu_1687_p2 ^ xor_ln1357_29_reg_4622);

assign xor_ln1357_46_fu_1712_p2 = (xor_ln1357_42_fu_1692_p2 ^ xor_ln1357_30_reg_4628);

assign xor_ln1357_47_fu_1717_p2 = (xor_ln1357_43_fu_1697_p2 ^ xor_ln1357_31_reg_4634);

assign xor_ln1357_48_fu_1788_p2 = (xor_ln719_1_reg_4776 ^ xor_ln1357_32_reg_4680);

assign xor_ln1357_49_fu_1792_p2 = (xor_ln1357_33_reg_4687 ^ reg_1191);

assign xor_ln1357_4_fu_1487_p2 = (xor_ln1357_fu_1466_p2 ^ trunc_ln214_10_reg_4392);

assign xor_ln1357_50_fu_1797_p2 = (xor_ln1357_34_reg_4694 ^ reg_1195);

assign xor_ln1357_51_fu_1802_p2 = (xor_ln1357_35_reg_4701 ^ reg_1187);

assign xor_ln1357_52_fu_1897_p2 = (xor_ln719_1_reg_4776 ^ xor_ln1357_20_reg_4584);

assign xor_ln1357_53_fu_1901_p2 = (xor_ln1357_21_reg_4592 ^ reg_1191);

assign xor_ln1357_54_fu_1906_p2 = (xor_ln1357_22_reg_4600 ^ reg_1195);

assign xor_ln1357_55_fu_1911_p2 = (xor_ln1357_23_reg_4608 ^ reg_1187);

assign xor_ln1357_56_fu_2282_p2 = (xor_ln1357_52_reg_4950 ^ xor_ln1357_40_reg_4708);

assign xor_ln1357_57_fu_2286_p2 = (xor_ln1357_53_reg_4957 ^ xor_ln1357_41_reg_4715);

assign xor_ln1357_58_fu_2290_p2 = (xor_ln1357_54_reg_4964 ^ xor_ln1357_42_reg_4722);

assign xor_ln1357_59_fu_2294_p2 = (xor_ln1357_55_reg_4971 ^ xor_ln1357_43_reg_4729);

assign xor_ln1357_5_fu_1492_p2 = (xor_ln1357_1_fu_1472_p2 ^ trunc_ln214_s_reg_4384);

assign xor_ln1357_60_fu_1748_p2 = (xor_ln719_1_fu_1742_p2 ^ trunc_ln214_3_reg_4331);

assign xor_ln1357_61_fu_1753_p2 = (trunc_ln214_2_reg_4322 ^ SBOX_V_q2);

assign xor_ln1357_62_fu_1758_p2 = (trunc_ln214_1_reg_4313 ^ SBOX_V_q3);

assign xor_ln1357_63_fu_1763_p2 = (trunc_ln214_reg_4304 ^ SBOX_V_q0);

assign xor_ln1357_64_fu_1813_p2 = (xor_ln1357_161_fu_1807_p2 ^ SBOX_V_q1);

assign xor_ln1357_65_fu_1819_p2 = (xor_ln1357_49_fu_1792_p2 ^ SBOX_V_q2);

assign xor_ln1357_66_fu_1825_p2 = (xor_ln1357_50_fu_1797_p2 ^ SBOX_V_q3);

assign xor_ln1357_67_fu_1831_p2 = (xor_ln1357_51_fu_1802_p2 ^ SBOX_V_q0);

assign xor_ln1357_68_fu_2298_p2 = (xor_ln1357_64_reg_4854 ^ xor_ln1357_52_reg_4950);

assign xor_ln1357_69_fu_2302_p2 = (xor_ln1357_65_reg_4861 ^ xor_ln1357_53_reg_4957);

assign xor_ln1357_6_fu_1497_p2 = (xor_ln1357_2_fu_1477_p2 ^ trunc_ln214_9_reg_4376);

assign xor_ln1357_70_fu_2306_p2 = (xor_ln1357_66_reg_4868 ^ xor_ln1357_54_reg_4964);

assign xor_ln1357_71_fu_2310_p2 = (xor_ln1357_67_reg_4875 ^ xor_ln1357_55_reg_4971);

assign xor_ln1357_72_fu_1837_p2 = (xor_ln1357_64_fu_1813_p2 ^ xor_ln1357_40_reg_4708);

assign xor_ln1357_73_fu_1842_p2 = (xor_ln1357_65_fu_1819_p2 ^ xor_ln1357_41_reg_4715);

assign xor_ln1357_74_fu_1847_p2 = (xor_ln1357_66_fu_1825_p2 ^ xor_ln1357_42_reg_4722);

assign xor_ln1357_75_fu_1852_p2 = (xor_ln1357_67_fu_1831_p2 ^ xor_ln1357_43_reg_4729);

assign xor_ln1357_76_fu_1857_p2 = (xor_ln1357_72_fu_1837_p2 ^ xor_ln1357_60_reg_4782);

assign xor_ln1357_77_fu_1862_p2 = (xor_ln1357_73_fu_1842_p2 ^ xor_ln1357_61_reg_4790);

assign xor_ln1357_78_fu_1867_p2 = (xor_ln1357_74_fu_1847_p2 ^ xor_ln1357_62_reg_4798);

assign xor_ln1357_79_fu_1872_p2 = (xor_ln1357_75_fu_1852_p2 ^ xor_ln1357_63_reg_4806);

assign xor_ln1357_7_fu_1502_p2 = (xor_ln1357_3_fu_1482_p2 ^ trunc_ln214_8_reg_4368);

assign xor_ln1357_80_fu_1986_p2 = (xor_ln719_2_reg_4978 ^ xor_ln1357_64_reg_4854);

assign xor_ln1357_81_fu_1990_p2 = (xor_ln1357_65_reg_4861 ^ reg_1191);

assign xor_ln1357_82_fu_1995_p2 = (xor_ln1357_66_reg_4868 ^ reg_1195);

assign xor_ln1357_83_fu_2000_p2 = (xor_ln1357_67_reg_4875 ^ reg_1187);

assign xor_ln1357_84_fu_1922_p2 = (xor_ln719_2_fu_1916_p2 ^ xor_ln1357_52_fu_1897_p2);

assign xor_ln1357_85_fu_1928_p2 = (xor_ln1357_53_fu_1901_p2 ^ SBOX_V_q2);

assign xor_ln1357_86_fu_1934_p2 = (xor_ln1357_54_fu_1906_p2 ^ SBOX_V_q3);

assign xor_ln1357_87_fu_1940_p2 = (xor_ln1357_55_fu_1911_p2 ^ SBOX_V_q0);

assign xor_ln1357_88_fu_2314_p2 = (xor_ln1357_84_reg_4983 ^ xor_ln1357_72_reg_4882);

assign xor_ln1357_89_fu_2318_p2 = (xor_ln1357_85_reg_4991 ^ xor_ln1357_73_reg_4889);

assign xor_ln1357_8_fu_1507_p2 = (xor_ln1357_4_fu_1487_p2 ^ trunc_ln214_7_reg_4361);

assign xor_ln1357_90_fu_2322_p2 = (xor_ln1357_86_reg_4999 ^ xor_ln1357_74_reg_4896);

assign xor_ln1357_91_fu_2326_p2 = (xor_ln1357_87_reg_5007 ^ xor_ln1357_75_reg_4903);

assign xor_ln1357_92_fu_1946_p2 = (xor_ln1357_84_fu_1922_p2 ^ xor_ln1357_60_reg_4782);

assign xor_ln1357_93_fu_1951_p2 = (xor_ln1357_85_fu_1928_p2 ^ xor_ln1357_61_reg_4790);

assign xor_ln1357_94_fu_1956_p2 = (xor_ln1357_86_fu_1934_p2 ^ xor_ln1357_62_reg_4798);

assign xor_ln1357_95_fu_1961_p2 = (xor_ln1357_87_fu_1940_p2 ^ xor_ln1357_63_reg_4806);

assign xor_ln1357_96_fu_2011_p2 = (xor_ln1357_162_fu_2005_p2 ^ SBOX_V_q1);

assign xor_ln1357_97_fu_2017_p2 = (xor_ln1357_81_fu_1990_p2 ^ SBOX_V_q2);

assign xor_ln1357_98_fu_2023_p2 = (xor_ln1357_82_fu_1995_p2 ^ SBOX_V_q3);

assign xor_ln1357_99_fu_2029_p2 = (xor_ln1357_83_fu_2000_p2 ^ SBOX_V_q0);

assign xor_ln1357_9_fu_1512_p2 = (xor_ln1357_5_fu_1492_p2 ^ trunc_ln214_6_reg_4354);

assign xor_ln1357_fu_1466_p2 = (xor_ln1357_144_fu_1461_p2 ^ SBOX_V_q1);

assign xor_ln1503_10_fu_3120_p2 = (shl_ln1503_10_fu_3114_p2 ^ 8'd27);

assign xor_ln1503_11_fu_3148_p2 = (shl_ln1503_11_fu_3142_p2 ^ 8'd27);

assign xor_ln1503_12_fu_3176_p2 = (shl_ln1503_12_fu_3170_p2 ^ 8'd27);

assign xor_ln1503_13_fu_3204_p2 = (shl_ln1503_13_fu_3198_p2 ^ 8'd27);

assign xor_ln1503_14_fu_3232_p2 = (shl_ln1503_14_fu_3226_p2 ^ 8'd27);

assign xor_ln1503_15_fu_3260_p2 = (shl_ln1503_15_fu_3254_p2 ^ 8'd27);

assign xor_ln1503_1_fu_2868_p2 = (shl_ln1503_1_fu_2862_p2 ^ 8'd27);

assign xor_ln1503_2_fu_2896_p2 = (shl_ln1503_2_fu_2890_p2 ^ 8'd27);

assign xor_ln1503_3_fu_2924_p2 = (shl_ln1503_3_fu_2918_p2 ^ 8'd27);

assign xor_ln1503_4_fu_2952_p2 = (shl_ln1503_4_fu_2946_p2 ^ 8'd27);

assign xor_ln1503_5_fu_2980_p2 = (shl_ln1503_5_fu_2974_p2 ^ 8'd27);

assign xor_ln1503_6_fu_3008_p2 = (shl_ln1503_6_fu_3002_p2 ^ 8'd27);

assign xor_ln1503_7_fu_3036_p2 = (shl_ln1503_7_fu_3030_p2 ^ 8'd27);

assign xor_ln1503_8_fu_3064_p2 = (shl_ln1503_8_fu_3058_p2 ^ 8'd27);

assign xor_ln1503_9_fu_3092_p2 = (shl_ln1503_9_fu_3086_p2 ^ 8'd27);

assign xor_ln1503_fu_2840_p2 = (shl_ln1503_fu_2834_p2 ^ 8'd27);

assign xor_ln719_1_fu_1742_p2 = (8'd8 ^ SBOX_V_q1);

assign xor_ln719_22_fu_3274_p2 = (SBOX_V_q5 ^ SBOX_V_q10);

assign xor_ln719_23_fu_3280_p2 = (xor_ln719_22_fu_3274_p2 ^ SBOX_V_q15);

assign xor_ln719_24_fu_3286_p2 = (temp_column_b_1_V_fu_2874_p3 ^ ap_phi_reg_pp0_iter1_phi_ln719_reg_1086);

assign xor_ln719_25_fu_3292_p2 = (xor_ln719_24_fu_3286_p2 ^ temp_column_b_0_V_fu_2846_p3);

assign xor_ln719_27_fu_3326_p2 = (SBOX_V_q15 ^ SBOX_V_q0);

assign xor_ln719_28_fu_3332_p2 = (xor_ln719_27_fu_3326_p2 ^ SBOX_V_q10);

assign xor_ln719_29_fu_3338_p2 = (temp_column_b_2_V_fu_2902_p3 ^ phi_ln719_1_fu_3304_p18);

assign xor_ln719_2_fu_1916_p2 = (8'd32 ^ SBOX_V_q1);

assign xor_ln719_30_fu_3344_p2 = (xor_ln719_29_fu_3338_p2 ^ temp_column_b_1_V_fu_2874_p3);

assign xor_ln719_32_fu_3378_p2 = (xor_ln719_27_fu_3326_p2 ^ SBOX_V_q5);

assign xor_ln719_33_fu_3384_p2 = (temp_column_b_3_V_fu_2930_p3 ^ phi_ln719_2_fu_3356_p18);

assign xor_ln719_34_fu_3390_p2 = (xor_ln719_33_fu_3384_p2 ^ temp_column_b_2_V_fu_2902_p3);

assign xor_ln719_36_fu_3424_p2 = (SBOX_V_q5 ^ SBOX_V_q0);

assign xor_ln719_37_fu_3430_p2 = (xor_ln719_36_fu_3424_p2 ^ SBOX_V_q10);

assign xor_ln719_38_fu_3436_p2 = (temp_column_b_3_V_fu_2930_p3 ^ phi_ln719_3_fu_3402_p18);

assign xor_ln719_39_fu_3442_p2 = (xor_ln719_38_fu_3436_p2 ^ temp_column_b_0_V_fu_2846_p3);

assign xor_ln719_3_fu_2095_p2 = (8'd128 ^ SBOX_V_q1);

assign xor_ln719_41_fu_3476_p2 = (SBOX_V_q9 ^ SBOX_V_q14);

assign xor_ln719_42_fu_3482_p2 = (xor_ln719_41_fu_3476_p2 ^ SBOX_V_q3);

assign xor_ln719_43_fu_3488_p2 = (temp_column_b_1_V_1_fu_2986_p3 ^ phi_ln719_4_fu_3454_p18);

assign xor_ln719_44_fu_3494_p2 = (xor_ln719_43_fu_3488_p2 ^ temp_column_b_0_V_1_fu_2958_p3);

assign xor_ln719_46_fu_3528_p2 = (SBOX_V_q4 ^ SBOX_V_q3);

assign xor_ln719_47_fu_3534_p2 = (xor_ln719_46_fu_3528_p2 ^ SBOX_V_q14);

assign xor_ln719_48_fu_3540_p2 = (temp_column_b_2_V_1_fu_3014_p3 ^ phi_ln719_5_fu_3506_p18);

assign xor_ln719_49_fu_3546_p2 = (xor_ln719_48_fu_3540_p2 ^ temp_column_b_1_V_1_fu_2986_p3);

assign xor_ln719_4_fu_2405_p2 = (8'd54 ^ SBOX_V_q1);

assign xor_ln719_51_fu_3580_p2 = (xor_ln719_46_fu_3528_p2 ^ SBOX_V_q9);

assign xor_ln719_52_fu_3586_p2 = (temp_column_b_3_V_1_fu_3042_p3 ^ phi_ln719_6_fu_3558_p18);

assign xor_ln719_53_fu_3592_p2 = (xor_ln719_52_fu_3586_p2 ^ temp_column_b_2_V_1_fu_3014_p3);

assign xor_ln719_55_fu_3626_p2 = (SBOX_V_q9 ^ SBOX_V_q4);

assign xor_ln719_56_fu_3632_p2 = (xor_ln719_55_fu_3626_p2 ^ SBOX_V_q14);

assign xor_ln719_57_fu_3638_p2 = (temp_column_b_3_V_1_fu_3042_p3 ^ phi_ln719_7_fu_3604_p18);

assign xor_ln719_58_fu_3644_p2 = (xor_ln719_57_fu_3638_p2 ^ temp_column_b_0_V_1_fu_2958_p3);

assign xor_ln719_5_fu_4140_p2 = (xor_ln719_4_reg_5521 ^ xor_ln1357_128_reg_5249);

assign xor_ln719_60_fu_3678_p2 = (SBOX_V_q2 ^ SBOX_V_q13);

assign xor_ln719_61_fu_3684_p2 = (xor_ln719_60_fu_3678_p2 ^ SBOX_V_q7);

assign xor_ln719_62_fu_3690_p2 = (temp_column_b_1_V_2_fu_3098_p3 ^ phi_ln719_8_fu_3656_p18);

assign xor_ln719_63_fu_3696_p2 = (xor_ln719_62_fu_3690_p2 ^ temp_column_b_0_V_2_fu_3070_p3);

assign xor_ln719_65_fu_3730_p2 = (SBOX_V_q8 ^ SBOX_V_q7);

assign xor_ln719_66_fu_3736_p2 = (xor_ln719_65_fu_3730_p2 ^ SBOX_V_q2);

assign xor_ln719_67_fu_3742_p2 = (temp_column_b_2_V_2_fu_3126_p3 ^ phi_ln719_9_fu_3708_p18);

assign xor_ln719_68_fu_3748_p2 = (xor_ln719_67_fu_3742_p2 ^ temp_column_b_1_V_2_fu_3098_p3);

assign xor_ln719_70_fu_3782_p2 = (xor_ln719_65_fu_3730_p2 ^ SBOX_V_q13);

assign xor_ln719_71_fu_3788_p2 = (temp_column_b_3_V_2_fu_3154_p3 ^ phi_ln719_s_fu_3760_p18);

assign xor_ln719_72_fu_3794_p2 = (xor_ln719_71_fu_3788_p2 ^ temp_column_b_2_V_2_fu_3126_p3);

assign xor_ln719_74_fu_3828_p2 = (SBOX_V_q8 ^ SBOX_V_q13);

assign xor_ln719_75_fu_3834_p2 = (xor_ln719_74_fu_3828_p2 ^ SBOX_V_q2);

assign xor_ln719_76_fu_3840_p2 = (temp_column_b_3_V_2_fu_3154_p3 ^ phi_ln719_10_fu_3806_p18);

assign xor_ln719_77_fu_3846_p2 = (xor_ln719_76_fu_3840_p2 ^ temp_column_b_0_V_2_fu_3070_p3);

assign xor_ln719_79_fu_3880_p2 = (SBOX_V_q6 ^ SBOX_V_q1);

assign xor_ln719_80_fu_3886_p2 = (xor_ln719_79_fu_3880_p2 ^ SBOX_V_q11);

assign xor_ln719_81_fu_3892_p2 = (temp_column_b_1_V_3_fu_3210_p3 ^ phi_ln719_11_fu_3858_p18);

assign xor_ln719_82_fu_3898_p2 = (xor_ln719_81_fu_3892_p2 ^ temp_column_b_0_V_3_fu_3182_p3);

assign xor_ln719_84_fu_3932_p2 = (SBOX_V_q12 ^ SBOX_V_q11);

assign xor_ln719_85_fu_3938_p2 = (xor_ln719_84_fu_3932_p2 ^ SBOX_V_q6);

assign xor_ln719_86_fu_3944_p2 = (temp_column_b_2_V_3_fu_3238_p3 ^ phi_ln719_12_fu_3910_p18);

assign xor_ln719_87_fu_3950_p2 = (xor_ln719_86_fu_3944_p2 ^ temp_column_b_1_V_3_fu_3210_p3);

assign xor_ln719_89_fu_3984_p2 = (xor_ln719_84_fu_3932_p2 ^ SBOX_V_q1);

assign xor_ln719_90_fu_3990_p2 = (temp_column_b_3_V_3_fu_3266_p3 ^ phi_ln719_13_fu_3962_p18);

assign xor_ln719_91_fu_3996_p2 = (xor_ln719_90_fu_3990_p2 ^ temp_column_b_2_V_3_fu_3238_p3);

assign xor_ln719_93_fu_4030_p2 = (SBOX_V_q12 ^ SBOX_V_q1);

assign xor_ln719_94_fu_4036_p2 = (xor_ln719_93_fu_4030_p2 ^ SBOX_V_q6);

assign xor_ln719_95_fu_4042_p2 = (temp_column_b_3_V_3_fu_3266_p3 ^ phi_ln719_14_fu_4008_p18);

assign xor_ln719_96_fu_4048_p2 = (xor_ln719_95_fu_4042_p2 ^ temp_column_b_0_V_3_fu_3182_p3);

assign xor_ln719_fu_1567_p2 = (8'd2 ^ SBOX_V_q1);

assign zext_ln544_10_fu_1623_p1 = xor_ln1357_30_fu_1603_p2;

assign zext_ln544_11_fu_1628_p1 = xor_ln1357_31_fu_1608_p2;

assign zext_ln544_12_fu_1722_p1 = xor_ln1357_44_fu_1702_p2;

assign zext_ln544_13_fu_1727_p1 = xor_ln1357_45_fu_1707_p2;

assign zext_ln544_14_fu_1732_p1 = xor_ln1357_46_fu_1712_p2;

assign zext_ln544_15_fu_1737_p1 = xor_ln1357_47_fu_1717_p2;

assign zext_ln544_16_fu_1768_p1 = xor_ln1357_60_fu_1748_p2;

assign zext_ln544_17_fu_1773_p1 = xor_ln1357_61_fu_1753_p2;

assign zext_ln544_18_fu_1778_p1 = xor_ln1357_62_fu_1758_p2;

assign zext_ln544_19_fu_1783_p1 = xor_ln1357_63_fu_1763_p2;

assign zext_ln544_1_fu_1410_p1 = trunc_ln214_2_fu_1259_p4;

assign zext_ln544_20_fu_1877_p1 = xor_ln1357_76_fu_1857_p2;

assign zext_ln544_21_fu_1882_p1 = xor_ln1357_77_fu_1862_p2;

assign zext_ln544_22_fu_1887_p1 = xor_ln1357_78_fu_1867_p2;

assign zext_ln544_23_fu_1892_p1 = xor_ln1357_79_fu_1872_p2;

assign zext_ln544_24_fu_1966_p1 = xor_ln1357_92_fu_1946_p2;

assign zext_ln544_25_fu_1971_p1 = xor_ln1357_93_fu_1951_p2;

assign zext_ln544_26_fu_1976_p1 = xor_ln1357_94_fu_1956_p2;

assign zext_ln544_27_fu_1981_p1 = xor_ln1357_95_fu_1961_p2;

assign zext_ln544_28_fu_2075_p1 = xor_ln1357_108_fu_2055_p2;

assign zext_ln544_29_fu_2080_p1 = xor_ln1357_109_fu_2060_p2;

assign zext_ln544_2_fu_1415_p1 = trunc_ln214_1_fu_1249_p4;

assign zext_ln544_30_fu_2085_p1 = xor_ln1357_110_fu_2065_p2;

assign zext_ln544_31_fu_2090_p1 = xor_ln1357_111_fu_2070_p2;

assign zext_ln544_32_fu_2121_p1 = xor_ln1357_124_fu_2101_p2;

assign zext_ln544_33_fu_2126_p1 = xor_ln1357_125_fu_2106_p2;

assign zext_ln544_34_fu_2131_p1 = xor_ln1357_126_fu_2111_p2;

assign zext_ln544_35_fu_2136_p1 = xor_ln1357_127_fu_2116_p2;

assign zext_ln544_36_fu_2230_p1 = xor_ln1357_140_fu_2210_p2;

assign zext_ln544_37_fu_2235_p1 = xor_ln1357_141_fu_2215_p2;

assign zext_ln544_38_fu_2240_p1 = xor_ln1357_142_fu_2220_p2;

assign zext_ln544_39_fu_2245_p1 = xor_ln1357_143_fu_2225_p2;

assign zext_ln544_3_fu_1420_p1 = trunc_ln214_fu_1245_p1;

assign zext_ln544_40_fu_4060_p1 = cipher_V_0_0_reg_1024;

assign zext_ln544_41_fu_4065_p1 = cipher_V_1_0_reg_1014;

assign zext_ln544_42_fu_4070_p1 = cipher_V_2_0_reg_1004;

assign zext_ln544_43_fu_4075_p1 = cipher_V_3_0_reg_994;

assign zext_ln544_44_fu_4080_p1 = cipher_V_4_0_reg_984;

assign zext_ln544_45_fu_4085_p1 = cipher_V_5_0_reg_974;

assign zext_ln544_46_fu_4090_p1 = cipher_V_6_0_reg_964;

assign zext_ln544_47_fu_4095_p1 = cipher_V_7_0_reg_954;

assign zext_ln544_48_fu_4100_p1 = cipher_V_8_0_reg_944;

assign zext_ln544_49_fu_4105_p1 = cipher_V_9_0_reg_934;

assign zext_ln544_4_fu_1547_p1 = xor_ln1357_12_fu_1527_p2;

assign zext_ln544_50_fu_4110_p1 = cipher_V_10_0_reg_924;

assign zext_ln544_51_fu_4115_p1 = cipher_V_11_0_reg_914;

assign zext_ln544_52_fu_4120_p1 = cipher_V_12_0_reg_1034;

assign zext_ln544_53_fu_4125_p1 = cipher_V_13_0_reg_1044;

assign zext_ln544_54_fu_4130_p1 = cipher_V_14_0_reg_1054;

assign zext_ln544_55_fu_4135_p1 = cipher_V_15_0_reg_1064;

assign zext_ln544_56_fu_2740_p1 = ap_phi_mux_cipher_V_0_0_phi_fu_1027_p4;

assign zext_ln544_57_fu_2745_p1 = ap_phi_mux_cipher_V_1_0_phi_fu_1017_p4;

assign zext_ln544_58_fu_2750_p1 = ap_phi_mux_cipher_V_2_0_phi_fu_1007_p4;

assign zext_ln544_59_fu_2755_p1 = ap_phi_mux_cipher_V_3_0_phi_fu_997_p4;

assign zext_ln544_5_fu_1552_p1 = xor_ln1357_13_fu_1532_p2;

assign zext_ln544_60_fu_2760_p1 = ap_phi_mux_cipher_V_4_0_phi_fu_987_p4;

assign zext_ln544_61_fu_2765_p1 = ap_phi_mux_cipher_V_5_0_phi_fu_977_p4;

assign zext_ln544_62_fu_2770_p1 = ap_phi_mux_cipher_V_6_0_phi_fu_967_p4;

assign zext_ln544_63_fu_2775_p1 = ap_phi_mux_cipher_V_7_0_phi_fu_957_p4;

assign zext_ln544_64_fu_2780_p1 = ap_phi_mux_cipher_V_8_0_phi_fu_947_p4;

assign zext_ln544_65_fu_2785_p1 = ap_phi_mux_cipher_V_9_0_phi_fu_937_p4;

assign zext_ln544_66_fu_2790_p1 = ap_phi_mux_cipher_V_10_0_phi_fu_927_p4;

assign zext_ln544_67_fu_2795_p1 = ap_phi_mux_cipher_V_11_0_phi_fu_917_p4;

assign zext_ln544_68_fu_2800_p1 = ap_phi_mux_cipher_V_12_0_phi_fu_1037_p4;

assign zext_ln544_69_fu_2805_p1 = ap_phi_mux_cipher_V_13_0_phi_fu_1047_p4;

assign zext_ln544_6_fu_1557_p1 = xor_ln1357_14_fu_1537_p2;

assign zext_ln544_70_fu_2810_p1 = ap_phi_mux_cipher_V_14_0_phi_fu_1057_p4;

assign zext_ln544_71_fu_2815_p1 = ap_phi_mux_cipher_V_15_0_phi_fu_1067_p4;

assign zext_ln544_7_fu_1562_p1 = xor_ln1357_15_fu_1542_p2;

assign zext_ln544_8_fu_1613_p1 = xor_ln1357_28_fu_1593_p2;

assign zext_ln544_9_fu_1618_p1 = xor_ln1357_29_fu_1598_p2;

assign zext_ln544_fu_1405_p1 = trunc_ln214_3_fu_1269_p4;

endmodule //kern_enc

// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module g2N (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        g2N_input_TDATA,
        g2N_input_TVALID,
        g2N_input_TREADY,
        g2N_input_TDEST,
        g2N_input_TLAST,
        g2N_input_TID,
        g2N_input_TUSER,
        g2N_input_TKEEP,
        g2N_output_TDATA,
        g2N_output_TVALID,
        g2N_output_TREADY,
        g2N_output_TKEEP,
        g2N_output_TLAST,
        g2N_output_TUSER
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state7 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [511:0] g2N_input_TDATA;
input   g2N_input_TVALID;
output   g2N_input_TREADY;
input  [7:0] g2N_input_TDEST;
input  [0:0] g2N_input_TLAST;
input  [7:0] g2N_input_TID;
input  [15:0] g2N_input_TUSER;
input  [63:0] g2N_input_TKEEP;
output  [511:0] g2N_output_TDATA;
output   g2N_output_TVALID;
input   g2N_output_TREADY;
output  [63:0] g2N_output_TKEEP;
output  [0:0] g2N_output_TLAST;
output  [15:0] g2N_output_TUSER;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [511:0] input_V_data_V_0_data_out;
wire    input_V_data_V_0_vld_in;
wire    input_V_data_V_0_vld_out;
wire    input_V_data_V_0_ack_in;
reg    input_V_data_V_0_ack_out;
reg   [511:0] input_V_data_V_0_payload_A;
reg   [511:0] input_V_data_V_0_payload_B;
reg    input_V_data_V_0_sel_rd;
reg    input_V_data_V_0_sel_wr;
wire    input_V_data_V_0_sel;
wire    input_V_data_V_0_load_A;
wire    input_V_data_V_0_load_B;
reg   [1:0] input_V_data_V_0_state;
wire    input_V_data_V_0_state_cmp_full;
reg   [7:0] input_V_dest_V_0_data_out;
wire    input_V_dest_V_0_vld_in;
wire    input_V_dest_V_0_vld_out;
wire    input_V_dest_V_0_ack_in;
reg    input_V_dest_V_0_ack_out;
reg   [7:0] input_V_dest_V_0_payload_A;
reg   [7:0] input_V_dest_V_0_payload_B;
reg    input_V_dest_V_0_sel_rd;
reg    input_V_dest_V_0_sel_wr;
wire    input_V_dest_V_0_sel;
wire    input_V_dest_V_0_load_A;
wire    input_V_dest_V_0_load_B;
reg   [1:0] input_V_dest_V_0_state;
wire    input_V_dest_V_0_state_cmp_full;
reg   [0:0] input_V_last_V_0_data_out;
wire    input_V_last_V_0_vld_in;
wire    input_V_last_V_0_vld_out;
wire    input_V_last_V_0_ack_in;
reg    input_V_last_V_0_ack_out;
reg   [0:0] input_V_last_V_0_payload_A;
reg   [0:0] input_V_last_V_0_payload_B;
reg    input_V_last_V_0_sel_rd;
reg    input_V_last_V_0_sel_wr;
wire    input_V_last_V_0_sel;
wire    input_V_last_V_0_load_A;
wire    input_V_last_V_0_load_B;
reg   [1:0] input_V_last_V_0_state;
wire    input_V_last_V_0_state_cmp_full;
reg   [7:0] input_V_id_V_0_data_out;
wire    input_V_id_V_0_vld_in;
wire    input_V_id_V_0_vld_out;
wire    input_V_id_V_0_ack_in;
reg    input_V_id_V_0_ack_out;
reg   [7:0] input_V_id_V_0_payload_A;
reg   [7:0] input_V_id_V_0_payload_B;
reg    input_V_id_V_0_sel_rd;
reg    input_V_id_V_0_sel_wr;
wire    input_V_id_V_0_sel;
wire    input_V_id_V_0_load_A;
wire    input_V_id_V_0_load_B;
reg   [1:0] input_V_id_V_0_state;
wire    input_V_id_V_0_state_cmp_full;
reg   [15:0] input_V_user_V_0_data_out;
wire    input_V_user_V_0_vld_in;
wire    input_V_user_V_0_vld_out;
wire    input_V_user_V_0_ack_in;
reg    input_V_user_V_0_ack_out;
reg   [15:0] input_V_user_V_0_payload_A;
reg   [15:0] input_V_user_V_0_payload_B;
reg    input_V_user_V_0_sel_rd;
reg    input_V_user_V_0_sel_wr;
wire    input_V_user_V_0_sel;
wire    input_V_user_V_0_load_A;
wire    input_V_user_V_0_load_B;
reg   [1:0] input_V_user_V_0_state;
wire    input_V_user_V_0_state_cmp_full;
reg   [63:0] input_V_keep_V_0_data_out;
wire    input_V_keep_V_0_vld_in;
wire    input_V_keep_V_0_vld_out;
wire    input_V_keep_V_0_ack_in;
reg    input_V_keep_V_0_ack_out;
reg   [63:0] input_V_keep_V_0_payload_A;
reg   [63:0] input_V_keep_V_0_payload_B;
reg    input_V_keep_V_0_sel_rd;
reg    input_V_keep_V_0_sel_wr;
wire    input_V_keep_V_0_sel;
wire    input_V_keep_V_0_load_A;
wire    input_V_keep_V_0_load_B;
reg   [1:0] input_V_keep_V_0_state;
wire    input_V_keep_V_0_state_cmp_full;
reg   [511:0] output_V_data_V_1_data_in;
reg   [511:0] output_V_data_V_1_data_out;
reg    output_V_data_V_1_vld_in;
wire    output_V_data_V_1_vld_out;
wire    output_V_data_V_1_ack_in;
wire    output_V_data_V_1_ack_out;
reg   [511:0] output_V_data_V_1_payload_A;
reg   [511:0] output_V_data_V_1_payload_B;
reg    output_V_data_V_1_sel_rd;
reg    output_V_data_V_1_sel_wr;
wire    output_V_data_V_1_sel;
wire    output_V_data_V_1_load_A;
wire    output_V_data_V_1_load_B;
reg   [1:0] output_V_data_V_1_state;
wire    output_V_data_V_1_state_cmp_full;
reg   [63:0] output_V_keep_V_1_data_in;
reg   [63:0] output_V_keep_V_1_data_out;
reg    output_V_keep_V_1_vld_in;
wire    output_V_keep_V_1_vld_out;
wire    output_V_keep_V_1_ack_in;
wire    output_V_keep_V_1_ack_out;
reg   [63:0] output_V_keep_V_1_payload_A;
reg   [63:0] output_V_keep_V_1_payload_B;
reg    output_V_keep_V_1_sel_rd;
reg    output_V_keep_V_1_sel_wr;
wire    output_V_keep_V_1_sel;
wire    output_V_keep_V_1_load_A;
wire    output_V_keep_V_1_load_B;
reg   [1:0] output_V_keep_V_1_state;
wire    output_V_keep_V_1_state_cmp_full;
reg   [0:0] output_V_last_V_1_data_in;
reg   [0:0] output_V_last_V_1_data_out;
reg    output_V_last_V_1_vld_in;
wire    output_V_last_V_1_vld_out;
wire    output_V_last_V_1_ack_in;
wire    output_V_last_V_1_ack_out;
reg   [0:0] output_V_last_V_1_payload_A;
reg   [0:0] output_V_last_V_1_payload_B;
reg    output_V_last_V_1_sel_rd;
reg    output_V_last_V_1_sel_wr;
wire    output_V_last_V_1_sel;
wire    output_V_last_V_1_load_A;
wire    output_V_last_V_1_load_B;
reg   [1:0] output_V_last_V_1_state;
wire    output_V_last_V_1_state_cmp_full;
wire   [15:0] output_V_user_V_1_data_out;
reg    output_V_user_V_1_vld_in;
wire    output_V_user_V_1_vld_out;
wire    output_V_user_V_1_ack_out;
reg    output_V_user_V_1_sel_rd;
wire    output_V_user_V_1_sel;
reg   [1:0] output_V_user_V_1_state;
reg    g2N_input_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg   [0:0] ap_phi_mux_p_036_2_0_phi_fu_92_p4;
reg    g2N_output_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] p_036_2_0_reg_89;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] p_036_2_0_reg_89_pp0_iter1_reg;
reg    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_state5_io;
wire    ap_block_state6_pp0_stage0_iter2;
reg    ap_block_state6_io;
reg    ap_block_pp0_stage0_11001;
reg   [511:0] reg_107;
reg    ap_block_state1;
reg   [0:0] tmp_last_V_reg_141;
wire   [511:0] p_Result_s_fu_124_p5;
reg   [0:0] tmp_last_V_2_reg_152;
reg   [63:0] tmp_keep_V_reg_158;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_block_pp0_stage0_01001;
wire    ap_CS_fsm_state7;
reg    ap_block_state7;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 input_V_data_V_0_sel_rd = 1'b0;
#0 input_V_data_V_0_sel_wr = 1'b0;
#0 input_V_data_V_0_state = 2'd0;
#0 input_V_dest_V_0_sel_rd = 1'b0;
#0 input_V_dest_V_0_sel_wr = 1'b0;
#0 input_V_dest_V_0_state = 2'd0;
#0 input_V_last_V_0_sel_rd = 1'b0;
#0 input_V_last_V_0_sel_wr = 1'b0;
#0 input_V_last_V_0_state = 2'd0;
#0 input_V_id_V_0_sel_rd = 1'b0;
#0 input_V_id_V_0_sel_wr = 1'b0;
#0 input_V_id_V_0_state = 2'd0;
#0 input_V_user_V_0_sel_rd = 1'b0;
#0 input_V_user_V_0_sel_wr = 1'b0;
#0 input_V_user_V_0_state = 2'd0;
#0 input_V_keep_V_0_sel_rd = 1'b0;
#0 input_V_keep_V_0_sel_wr = 1'b0;
#0 input_V_keep_V_0_state = 2'd0;
#0 output_V_data_V_1_sel_rd = 1'b0;
#0 output_V_data_V_1_sel_wr = 1'b0;
#0 output_V_data_V_1_state = 2'd0;
#0 output_V_keep_V_1_sel_rd = 1'b0;
#0 output_V_keep_V_1_sel_wr = 1'b0;
#0 output_V_keep_V_1_state = 2'd0;
#0 output_V_last_V_1_sel_rd = 1'b0;
#0 output_V_last_V_1_sel_wr = 1'b0;
#0 output_V_last_V_1_state = 2'd0;
#0 output_V_user_V_1_sel_rd = 1'b0;
#0 output_V_user_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((output_V_user_V_1_state == 2'd1) | (output_V_last_V_1_state == 2'd1) | (output_V_keep_V_1_state == 2'd1) | (output_V_data_V_1_state == 2'd1) | ((output_V_user_V_1_state == 2'd3) & (g2N_output_TREADY == 1'b0)) | ((output_V_last_V_1_state == 2'd3) & (g2N_output_TREADY == 1'b0)) | ((output_V_keep_V_1_state == 2'd3) & (g2N_output_TREADY == 1'b0)) | ((output_V_data_V_1_state == 2'd3) & (g2N_output_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((output_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state4)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((output_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        input_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((input_V_data_V_0_ack_out == 1'b1) & (input_V_data_V_0_vld_out == 1'b1))) begin
            input_V_data_V_0_sel_rd <= ~input_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        input_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((input_V_data_V_0_ack_in == 1'b1) & (input_V_data_V_0_vld_in == 1'b1))) begin
            input_V_data_V_0_sel_wr <= ~input_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        input_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((input_V_data_V_0_state == 2'd2) & (input_V_data_V_0_vld_in == 1'b0)) | ((input_V_data_V_0_state == 2'd3) & (input_V_data_V_0_vld_in == 1'b0) & (input_V_data_V_0_ack_out == 1'b1)))) begin
            input_V_data_V_0_state <= 2'd2;
        end else if ((((input_V_data_V_0_state == 2'd1) & (input_V_data_V_0_ack_out == 1'b0)) | ((input_V_data_V_0_state == 2'd3) & (input_V_data_V_0_ack_out == 1'b0) & (input_V_data_V_0_vld_in == 1'b1)))) begin
            input_V_data_V_0_state <= 2'd1;
        end else if (((~((input_V_data_V_0_vld_in == 1'b0) & (input_V_data_V_0_ack_out == 1'b1)) & ~((input_V_data_V_0_ack_out == 1'b0) & (input_V_data_V_0_vld_in == 1'b1)) & (input_V_data_V_0_state == 2'd3)) | ((input_V_data_V_0_state == 2'd1) & (input_V_data_V_0_ack_out == 1'b1)) | ((input_V_data_V_0_state == 2'd2) & (input_V_data_V_0_vld_in == 1'b1)))) begin
            input_V_data_V_0_state <= 2'd3;
        end else begin
            input_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        input_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((input_V_dest_V_0_vld_out == 1'b1) & (input_V_dest_V_0_ack_out == 1'b1))) begin
            input_V_dest_V_0_sel_rd <= ~input_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        input_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((input_V_dest_V_0_vld_in == 1'b1) & (input_V_dest_V_0_ack_in == 1'b1))) begin
            input_V_dest_V_0_sel_wr <= ~input_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        input_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((input_V_dest_V_0_state == 2'd2) & (input_V_dest_V_0_vld_in == 1'b0)) | ((input_V_dest_V_0_state == 2'd3) & (input_V_dest_V_0_vld_in == 1'b0) & (input_V_dest_V_0_ack_out == 1'b1)))) begin
            input_V_dest_V_0_state <= 2'd2;
        end else if ((((input_V_dest_V_0_state == 2'd1) & (input_V_dest_V_0_ack_out == 1'b0)) | ((input_V_dest_V_0_state == 2'd3) & (input_V_dest_V_0_ack_out == 1'b0) & (input_V_dest_V_0_vld_in == 1'b1)))) begin
            input_V_dest_V_0_state <= 2'd1;
        end else if (((~((input_V_dest_V_0_vld_in == 1'b0) & (input_V_dest_V_0_ack_out == 1'b1)) & ~((input_V_dest_V_0_ack_out == 1'b0) & (input_V_dest_V_0_vld_in == 1'b1)) & (input_V_dest_V_0_state == 2'd3)) | ((input_V_dest_V_0_state == 2'd1) & (input_V_dest_V_0_ack_out == 1'b1)) | ((input_V_dest_V_0_state == 2'd2) & (input_V_dest_V_0_vld_in == 1'b1)))) begin
            input_V_dest_V_0_state <= 2'd3;
        end else begin
            input_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        input_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((input_V_id_V_0_ack_out == 1'b1) & (input_V_id_V_0_vld_out == 1'b1))) begin
            input_V_id_V_0_sel_rd <= ~input_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        input_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((input_V_id_V_0_ack_in == 1'b1) & (input_V_id_V_0_vld_in == 1'b1))) begin
            input_V_id_V_0_sel_wr <= ~input_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        input_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((input_V_id_V_0_state == 2'd2) & (input_V_id_V_0_vld_in == 1'b0)) | ((input_V_id_V_0_state == 2'd3) & (input_V_id_V_0_vld_in == 1'b0) & (input_V_id_V_0_ack_out == 1'b1)))) begin
            input_V_id_V_0_state <= 2'd2;
        end else if ((((input_V_id_V_0_state == 2'd1) & (input_V_id_V_0_ack_out == 1'b0)) | ((input_V_id_V_0_state == 2'd3) & (input_V_id_V_0_ack_out == 1'b0) & (input_V_id_V_0_vld_in == 1'b1)))) begin
            input_V_id_V_0_state <= 2'd1;
        end else if (((~((input_V_id_V_0_vld_in == 1'b0) & (input_V_id_V_0_ack_out == 1'b1)) & ~((input_V_id_V_0_ack_out == 1'b0) & (input_V_id_V_0_vld_in == 1'b1)) & (input_V_id_V_0_state == 2'd3)) | ((input_V_id_V_0_state == 2'd1) & (input_V_id_V_0_ack_out == 1'b1)) | ((input_V_id_V_0_state == 2'd2) & (input_V_id_V_0_vld_in == 1'b1)))) begin
            input_V_id_V_0_state <= 2'd3;
        end else begin
            input_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        input_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((input_V_keep_V_0_ack_out == 1'b1) & (input_V_keep_V_0_vld_out == 1'b1))) begin
            input_V_keep_V_0_sel_rd <= ~input_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        input_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((input_V_keep_V_0_ack_in == 1'b1) & (input_V_keep_V_0_vld_in == 1'b1))) begin
            input_V_keep_V_0_sel_wr <= ~input_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        input_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((input_V_keep_V_0_state == 2'd2) & (input_V_keep_V_0_vld_in == 1'b0)) | ((input_V_keep_V_0_state == 2'd3) & (input_V_keep_V_0_vld_in == 1'b0) & (input_V_keep_V_0_ack_out == 1'b1)))) begin
            input_V_keep_V_0_state <= 2'd2;
        end else if ((((input_V_keep_V_0_state == 2'd1) & (input_V_keep_V_0_ack_out == 1'b0)) | ((input_V_keep_V_0_state == 2'd3) & (input_V_keep_V_0_ack_out == 1'b0) & (input_V_keep_V_0_vld_in == 1'b1)))) begin
            input_V_keep_V_0_state <= 2'd1;
        end else if (((~((input_V_keep_V_0_vld_in == 1'b0) & (input_V_keep_V_0_ack_out == 1'b1)) & ~((input_V_keep_V_0_ack_out == 1'b0) & (input_V_keep_V_0_vld_in == 1'b1)) & (input_V_keep_V_0_state == 2'd3)) | ((input_V_keep_V_0_state == 2'd1) & (input_V_keep_V_0_ack_out == 1'b1)) | ((input_V_keep_V_0_state == 2'd2) & (input_V_keep_V_0_vld_in == 1'b1)))) begin
            input_V_keep_V_0_state <= 2'd3;
        end else begin
            input_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        input_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((input_V_last_V_0_ack_out == 1'b1) & (input_V_last_V_0_vld_out == 1'b1))) begin
            input_V_last_V_0_sel_rd <= ~input_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        input_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((input_V_last_V_0_ack_in == 1'b1) & (input_V_last_V_0_vld_in == 1'b1))) begin
            input_V_last_V_0_sel_wr <= ~input_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        input_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((input_V_last_V_0_state == 2'd2) & (input_V_last_V_0_vld_in == 1'b0)) | ((input_V_last_V_0_state == 2'd3) & (input_V_last_V_0_vld_in == 1'b0) & (input_V_last_V_0_ack_out == 1'b1)))) begin
            input_V_last_V_0_state <= 2'd2;
        end else if ((((input_V_last_V_0_state == 2'd1) & (input_V_last_V_0_ack_out == 1'b0)) | ((input_V_last_V_0_state == 2'd3) & (input_V_last_V_0_ack_out == 1'b0) & (input_V_last_V_0_vld_in == 1'b1)))) begin
            input_V_last_V_0_state <= 2'd1;
        end else if (((~((input_V_last_V_0_vld_in == 1'b0) & (input_V_last_V_0_ack_out == 1'b1)) & ~((input_V_last_V_0_ack_out == 1'b0) & (input_V_last_V_0_vld_in == 1'b1)) & (input_V_last_V_0_state == 2'd3)) | ((input_V_last_V_0_state == 2'd1) & (input_V_last_V_0_ack_out == 1'b1)) | ((input_V_last_V_0_state == 2'd2) & (input_V_last_V_0_vld_in == 1'b1)))) begin
            input_V_last_V_0_state <= 2'd3;
        end else begin
            input_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        input_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((input_V_user_V_0_ack_out == 1'b1) & (input_V_user_V_0_vld_out == 1'b1))) begin
            input_V_user_V_0_sel_rd <= ~input_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        input_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((input_V_user_V_0_ack_in == 1'b1) & (input_V_user_V_0_vld_in == 1'b1))) begin
            input_V_user_V_0_sel_wr <= ~input_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        input_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((input_V_user_V_0_state == 2'd2) & (input_V_user_V_0_vld_in == 1'b0)) | ((input_V_user_V_0_state == 2'd3) & (input_V_user_V_0_vld_in == 1'b0) & (input_V_user_V_0_ack_out == 1'b1)))) begin
            input_V_user_V_0_state <= 2'd2;
        end else if ((((input_V_user_V_0_state == 2'd1) & (input_V_user_V_0_ack_out == 1'b0)) | ((input_V_user_V_0_state == 2'd3) & (input_V_user_V_0_ack_out == 1'b0) & (input_V_user_V_0_vld_in == 1'b1)))) begin
            input_V_user_V_0_state <= 2'd1;
        end else if (((~((input_V_user_V_0_vld_in == 1'b0) & (input_V_user_V_0_ack_out == 1'b1)) & ~((input_V_user_V_0_ack_out == 1'b0) & (input_V_user_V_0_vld_in == 1'b1)) & (input_V_user_V_0_state == 2'd3)) | ((input_V_user_V_0_state == 2'd1) & (input_V_user_V_0_ack_out == 1'b1)) | ((input_V_user_V_0_state == 2'd2) & (input_V_user_V_0_vld_in == 1'b1)))) begin
            input_V_user_V_0_state <= 2'd3;
        end else begin
            input_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((output_V_data_V_1_ack_out == 1'b1) & (output_V_data_V_1_vld_out == 1'b1))) begin
            output_V_data_V_1_sel_rd <= ~output_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((output_V_data_V_1_ack_in == 1'b1) & (output_V_data_V_1_vld_in == 1'b1))) begin
            output_V_data_V_1_sel_wr <= ~output_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((output_V_data_V_1_state == 2'd2) & (output_V_data_V_1_vld_in == 1'b0)) | ((output_V_data_V_1_state == 2'd3) & (output_V_data_V_1_vld_in == 1'b0) & (output_V_data_V_1_ack_out == 1'b1)))) begin
            output_V_data_V_1_state <= 2'd2;
        end else if ((((output_V_data_V_1_state == 2'd1) & (g2N_output_TREADY == 1'b0)) | ((output_V_data_V_1_state == 2'd3) & (g2N_output_TREADY == 1'b0) & (output_V_data_V_1_vld_in == 1'b1)))) begin
            output_V_data_V_1_state <= 2'd1;
        end else if (((~((output_V_data_V_1_vld_in == 1'b0) & (output_V_data_V_1_ack_out == 1'b1)) & ~((g2N_output_TREADY == 1'b0) & (output_V_data_V_1_vld_in == 1'b1)) & (output_V_data_V_1_state == 2'd3)) | ((output_V_data_V_1_state == 2'd1) & (output_V_data_V_1_ack_out == 1'b1)) | ((output_V_data_V_1_state == 2'd2) & (output_V_data_V_1_vld_in == 1'b1)))) begin
            output_V_data_V_1_state <= 2'd3;
        end else begin
            output_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((output_V_keep_V_1_ack_out == 1'b1) & (output_V_keep_V_1_vld_out == 1'b1))) begin
            output_V_keep_V_1_sel_rd <= ~output_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((output_V_keep_V_1_ack_in == 1'b1) & (output_V_keep_V_1_vld_in == 1'b1))) begin
            output_V_keep_V_1_sel_wr <= ~output_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((output_V_keep_V_1_state == 2'd2) & (output_V_keep_V_1_vld_in == 1'b0)) | ((output_V_keep_V_1_state == 2'd3) & (output_V_keep_V_1_vld_in == 1'b0) & (output_V_keep_V_1_ack_out == 1'b1)))) begin
            output_V_keep_V_1_state <= 2'd2;
        end else if ((((output_V_keep_V_1_state == 2'd1) & (g2N_output_TREADY == 1'b0)) | ((output_V_keep_V_1_state == 2'd3) & (g2N_output_TREADY == 1'b0) & (output_V_keep_V_1_vld_in == 1'b1)))) begin
            output_V_keep_V_1_state <= 2'd1;
        end else if (((~((output_V_keep_V_1_vld_in == 1'b0) & (output_V_keep_V_1_ack_out == 1'b1)) & ~((g2N_output_TREADY == 1'b0) & (output_V_keep_V_1_vld_in == 1'b1)) & (output_V_keep_V_1_state == 2'd3)) | ((output_V_keep_V_1_state == 2'd1) & (output_V_keep_V_1_ack_out == 1'b1)) | ((output_V_keep_V_1_state == 2'd2) & (output_V_keep_V_1_vld_in == 1'b1)))) begin
            output_V_keep_V_1_state <= 2'd3;
        end else begin
            output_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((output_V_last_V_1_ack_out == 1'b1) & (output_V_last_V_1_vld_out == 1'b1))) begin
            output_V_last_V_1_sel_rd <= ~output_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((output_V_last_V_1_ack_in == 1'b1) & (output_V_last_V_1_vld_in == 1'b1))) begin
            output_V_last_V_1_sel_wr <= ~output_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((output_V_last_V_1_state == 2'd2) & (output_V_last_V_1_vld_in == 1'b0)) | ((output_V_last_V_1_state == 2'd3) & (output_V_last_V_1_vld_in == 1'b0) & (output_V_last_V_1_ack_out == 1'b1)))) begin
            output_V_last_V_1_state <= 2'd2;
        end else if ((((output_V_last_V_1_state == 2'd1) & (g2N_output_TREADY == 1'b0)) | ((output_V_last_V_1_state == 2'd3) & (g2N_output_TREADY == 1'b0) & (output_V_last_V_1_vld_in == 1'b1)))) begin
            output_V_last_V_1_state <= 2'd1;
        end else if (((~((output_V_last_V_1_vld_in == 1'b0) & (output_V_last_V_1_ack_out == 1'b1)) & ~((g2N_output_TREADY == 1'b0) & (output_V_last_V_1_vld_in == 1'b1)) & (output_V_last_V_1_state == 2'd3)) | ((output_V_last_V_1_state == 2'd1) & (output_V_last_V_1_ack_out == 1'b1)) | ((output_V_last_V_1_state == 2'd2) & (output_V_last_V_1_vld_in == 1'b1)))) begin
            output_V_last_V_1_state <= 2'd3;
        end else begin
            output_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((output_V_user_V_1_ack_out == 1'b1) & (output_V_user_V_1_vld_out == 1'b1))) begin
            output_V_user_V_1_sel_rd <= ~output_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((output_V_user_V_1_state == 2'd2) & (output_V_user_V_1_vld_in == 1'b0)) | ((output_V_user_V_1_state == 2'd3) & (output_V_user_V_1_vld_in == 1'b0) & (output_V_user_V_1_ack_out == 1'b1)))) begin
            output_V_user_V_1_state <= 2'd2;
        end else if ((((output_V_user_V_1_state == 2'd1) & (g2N_output_TREADY == 1'b0)) | ((output_V_user_V_1_state == 2'd3) & (g2N_output_TREADY == 1'b0) & (output_V_user_V_1_vld_in == 1'b1)))) begin
            output_V_user_V_1_state <= 2'd1;
        end else if (((~((output_V_user_V_1_vld_in == 1'b0) & (output_V_user_V_1_ack_out == 1'b1)) & ~((g2N_output_TREADY == 1'b0) & (output_V_user_V_1_vld_in == 1'b1)) & (output_V_user_V_1_state == 2'd3)) | ((output_V_user_V_1_state == 2'd1) & (output_V_user_V_1_ack_out == 1'b1)) | ((output_V_user_V_1_state == 2'd2) & (output_V_user_V_1_vld_in == 1'b1)))) begin
            output_V_user_V_1_state <= 2'd3;
        end else begin
            output_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (p_036_2_0_reg_89 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_036_2_0_reg_89 <= tmp_last_V_2_reg_152;
    end else if (((output_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        p_036_2_0_reg_89 <= tmp_last_V_reg_141;
    end
end

always @ (posedge ap_clk) begin
    if ((input_V_data_V_0_load_A == 1'b1)) begin
        input_V_data_V_0_payload_A <= g2N_input_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((input_V_data_V_0_load_B == 1'b1)) begin
        input_V_data_V_0_payload_B <= g2N_input_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((input_V_dest_V_0_load_A == 1'b1)) begin
        input_V_dest_V_0_payload_A <= g2N_input_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((input_V_dest_V_0_load_B == 1'b1)) begin
        input_V_dest_V_0_payload_B <= g2N_input_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((input_V_id_V_0_load_A == 1'b1)) begin
        input_V_id_V_0_payload_A <= g2N_input_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((input_V_id_V_0_load_B == 1'b1)) begin
        input_V_id_V_0_payload_B <= g2N_input_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((input_V_keep_V_0_load_A == 1'b1)) begin
        input_V_keep_V_0_payload_A <= g2N_input_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((input_V_keep_V_0_load_B == 1'b1)) begin
        input_V_keep_V_0_payload_B <= g2N_input_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((input_V_last_V_0_load_A == 1'b1)) begin
        input_V_last_V_0_payload_A <= g2N_input_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((input_V_last_V_0_load_B == 1'b1)) begin
        input_V_last_V_0_payload_B <= g2N_input_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((input_V_user_V_0_load_A == 1'b1)) begin
        input_V_user_V_0_payload_A <= g2N_input_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((input_V_user_V_0_load_B == 1'b1)) begin
        input_V_user_V_0_payload_B <= g2N_input_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((output_V_data_V_1_load_A == 1'b1)) begin
        output_V_data_V_1_payload_A <= output_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((output_V_data_V_1_load_B == 1'b1)) begin
        output_V_data_V_1_payload_B <= output_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((output_V_keep_V_1_load_A == 1'b1)) begin
        output_V_keep_V_1_payload_A <= output_V_keep_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((output_V_keep_V_1_load_B == 1'b1)) begin
        output_V_keep_V_1_payload_B <= output_V_keep_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((output_V_last_V_1_load_A == 1'b1)) begin
        output_V_last_V_1_payload_A <= output_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((output_V_last_V_1_load_B == 1'b1)) begin
        output_V_last_V_1_payload_B <= output_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_036_2_0_reg_89_pp0_iter1_reg <= p_036_2_0_reg_89;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_phi_mux_p_036_2_0_phi_fu_92_p4 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((output_V_data_V_1_ack_in == 1'b0) | (input_V_data_V_0_vld_out == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        reg_107 <= input_V_data_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_phi_mux_p_036_2_0_phi_fu_92_p4 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_keep_V_reg_158 <= input_V_keep_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_phi_mux_p_036_2_0_phi_fu_92_p4 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_last_V_2_reg_152 <= input_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((~((output_V_data_V_1_ack_in == 1'b0) | (input_V_data_V_0_vld_out == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_last_V_reg_141 <= input_V_last_V_0_data_out;
    end
end

always @ (*) begin
    if ((ap_phi_mux_p_036_2_0_phi_fu_92_p4 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((~((output_V_user_V_1_state == 2'd1) | (output_V_last_V_1_state == 2'd1) | (output_V_keep_V_1_state == 2'd1) | (output_V_data_V_1_state == 2'd1) | ((output_V_user_V_1_state == 2'd3) & (g2N_output_TREADY == 1'b0)) | ((output_V_last_V_1_state == 2'd3) & (g2N_output_TREADY == 1'b0)) | ((output_V_keep_V_1_state == 2'd3) & (g2N_output_TREADY == 1'b0)) | ((output_V_data_V_1_state == 2'd3) & (g2N_output_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (p_036_2_0_reg_89 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_p_036_2_0_phi_fu_92_p4 = tmp_last_V_2_reg_152;
    end else begin
        ap_phi_mux_p_036_2_0_phi_fu_92_p4 = p_036_2_0_reg_89;
    end
end

always @ (*) begin
    if ((~((output_V_user_V_1_state == 2'd1) | (output_V_last_V_1_state == 2'd1) | (output_V_keep_V_1_state == 2'd1) | (output_V_data_V_1_state == 2'd1) | ((output_V_user_V_1_state == 2'd3) & (g2N_output_TREADY == 1'b0)) | ((output_V_last_V_1_state == 2'd3) & (g2N_output_TREADY == 1'b0)) | ((output_V_keep_V_1_state == 2'd3) & (g2N_output_TREADY == 1'b0)) | ((output_V_data_V_1_state == 2'd3) & (g2N_output_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_phi_mux_p_036_2_0_phi_fu_92_p4 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        g2N_input_TDATA_blk_n = input_V_data_V_0_state[1'd0];
    end else begin
        g2N_input_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp0_stage0) & (p_036_2_0_reg_89_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (p_036_2_0_reg_89 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        g2N_output_TDATA_blk_n = output_V_data_V_1_state[1'd1];
    end else begin
        g2N_output_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_phi_mux_p_036_2_0_phi_fu_92_p4 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((output_V_data_V_1_ack_in == 1'b0) | (input_V_data_V_0_vld_out == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        input_V_data_V_0_ack_out = 1'b1;
    end else begin
        input_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((input_V_data_V_0_sel == 1'b1)) begin
        input_V_data_V_0_data_out = input_V_data_V_0_payload_B;
    end else begin
        input_V_data_V_0_data_out = input_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_phi_mux_p_036_2_0_phi_fu_92_p4 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((output_V_data_V_1_ack_in == 1'b0) | (input_V_data_V_0_vld_out == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        input_V_dest_V_0_ack_out = 1'b1;
    end else begin
        input_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((input_V_dest_V_0_sel == 1'b1)) begin
        input_V_dest_V_0_data_out = input_V_dest_V_0_payload_B;
    end else begin
        input_V_dest_V_0_data_out = input_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_phi_mux_p_036_2_0_phi_fu_92_p4 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((output_V_data_V_1_ack_in == 1'b0) | (input_V_data_V_0_vld_out == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        input_V_id_V_0_ack_out = 1'b1;
    end else begin
        input_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((input_V_id_V_0_sel == 1'b1)) begin
        input_V_id_V_0_data_out = input_V_id_V_0_payload_B;
    end else begin
        input_V_id_V_0_data_out = input_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_phi_mux_p_036_2_0_phi_fu_92_p4 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((output_V_data_V_1_ack_in == 1'b0) | (input_V_data_V_0_vld_out == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        input_V_keep_V_0_ack_out = 1'b1;
    end else begin
        input_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((input_V_keep_V_0_sel == 1'b1)) begin
        input_V_keep_V_0_data_out = input_V_keep_V_0_payload_B;
    end else begin
        input_V_keep_V_0_data_out = input_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_phi_mux_p_036_2_0_phi_fu_92_p4 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((output_V_data_V_1_ack_in == 1'b0) | (input_V_data_V_0_vld_out == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        input_V_last_V_0_ack_out = 1'b1;
    end else begin
        input_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((input_V_last_V_0_sel == 1'b1)) begin
        input_V_last_V_0_data_out = input_V_last_V_0_payload_B;
    end else begin
        input_V_last_V_0_data_out = input_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_phi_mux_p_036_2_0_phi_fu_92_p4 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((output_V_data_V_1_ack_in == 1'b0) | (input_V_data_V_0_vld_out == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        input_V_user_V_0_ack_out = 1'b1;
    end else begin
        input_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((input_V_user_V_0_sel == 1'b1)) begin
        input_V_user_V_0_data_out = input_V_user_V_0_payload_B;
    end else begin
        input_V_user_V_0_data_out = input_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp0_stage0_01001) & (p_036_2_0_reg_89 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        output_V_data_V_1_data_in = reg_107;
    end else if ((~((input_V_data_V_0_vld_out == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        output_V_data_V_1_data_in = p_Result_s_fu_124_p5;
    end else begin
        output_V_data_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((output_V_data_V_1_sel == 1'b1)) begin
        output_V_data_V_1_data_out = output_V_data_V_1_payload_B;
    end else begin
        output_V_data_V_1_data_out = output_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((output_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (p_036_2_0_reg_89 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((output_V_data_V_1_ack_in == 1'b0) | (input_V_data_V_0_vld_out == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        output_V_data_V_1_vld_in = 1'b1;
    end else begin
        output_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (p_036_2_0_reg_89 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_V_keep_V_1_data_in = tmp_keep_V_reg_158;
    end else if (((1'b1 == ap_CS_fsm_state2) | (~((input_V_data_V_0_vld_out == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        output_V_keep_V_1_data_in = 64'd18446744073709551615;
    end else begin
        output_V_keep_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((output_V_keep_V_1_sel == 1'b1)) begin
        output_V_keep_V_1_data_out = output_V_keep_V_1_payload_B;
    end else begin
        output_V_keep_V_1_data_out = output_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((output_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (p_036_2_0_reg_89 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((output_V_data_V_1_ack_in == 1'b0) | (input_V_data_V_0_vld_out == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        output_V_keep_V_1_vld_in = 1'b1;
    end else begin
        output_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (p_036_2_0_reg_89 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_V_last_V_1_data_in = tmp_last_V_2_reg_152;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        output_V_last_V_1_data_in = tmp_last_V_reg_141;
    end else if ((~((input_V_data_V_0_vld_out == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        output_V_last_V_1_data_in = 1'd0;
    end else begin
        output_V_last_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((output_V_last_V_1_sel == 1'b1)) begin
        output_V_last_V_1_data_out = output_V_last_V_1_payload_B;
    end else begin
        output_V_last_V_1_data_out = output_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((output_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (p_036_2_0_reg_89 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((output_V_data_V_1_ack_in == 1'b0) | (input_V_data_V_0_vld_out == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        output_V_last_V_1_vld_in = 1'b1;
    end else begin
        output_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((output_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (p_036_2_0_reg_89 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((output_V_data_V_1_ack_in == 1'b0) | (input_V_data_V_0_vld_out == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        output_V_user_V_1_vld_in = 1'b1;
    end else begin
        output_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((output_V_data_V_1_ack_in == 1'b0) | (input_V_data_V_0_vld_out == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((output_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((output_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_phi_mux_p_036_2_0_phi_fu_92_p4 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_phi_mux_p_036_2_0_phi_fu_92_p4 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            if ((~((output_V_user_V_1_state == 2'd1) | (output_V_last_V_1_state == 2'd1) | (output_V_keep_V_1_state == 2'd1) | (output_V_data_V_1_state == 2'd1) | ((output_V_user_V_1_state == 2'd3) & (g2N_output_TREADY == 1'b0)) | ((output_V_last_V_1_state == 2'd3) & (g2N_output_TREADY == 1'b0)) | ((output_V_keep_V_1_state == 2'd3) & (g2N_output_TREADY == 1'b0)) | ((output_V_data_V_1_state == 2'd3) & (g2N_output_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_phi_mux_p_036_2_0_phi_fu_92_p4 == 1'd0) & (input_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_phi_mux_p_036_2_0_phi_fu_92_p4 == 1'd0) & (input_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_phi_mux_p_036_2_0_phi_fu_92_p4 == 1'd0) & (input_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((input_V_data_V_0_vld_out == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter0 = ((ap_phi_mux_p_036_2_0_phi_fu_92_p4 == 1'd0) & (input_V_data_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state5_io = ((p_036_2_0_reg_89 == 1'd0) & (output_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((p_036_2_0_reg_89_pp0_iter1_reg == 1'd0) & (output_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7 = ((output_V_user_V_1_state == 2'd1) | (output_V_last_V_1_state == 2'd1) | (output_V_keep_V_1_state == 2'd1) | (output_V_data_V_1_state == 2'd1) | ((output_V_user_V_1_state == 2'd3) & (g2N_output_TREADY == 1'b0)) | ((output_V_last_V_1_state == 2'd3) & (g2N_output_TREADY == 1'b0)) | ((output_V_keep_V_1_state == 2'd3) & (g2N_output_TREADY == 1'b0)) | ((output_V_data_V_1_state == 2'd3) & (g2N_output_TREADY == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign g2N_input_TREADY = input_V_keep_V_0_state[1'd1];

assign g2N_output_TDATA = output_V_data_V_1_data_out;

assign g2N_output_TKEEP = output_V_keep_V_1_data_out;

assign g2N_output_TLAST = output_V_last_V_1_data_out;

assign g2N_output_TUSER = output_V_user_V_1_data_out;

assign g2N_output_TVALID = output_V_user_V_1_state[1'd0];

assign input_V_data_V_0_ack_in = input_V_data_V_0_state[1'd1];

assign input_V_data_V_0_load_A = (input_V_data_V_0_state_cmp_full & ~input_V_data_V_0_sel_wr);

assign input_V_data_V_0_load_B = (input_V_data_V_0_state_cmp_full & input_V_data_V_0_sel_wr);

assign input_V_data_V_0_sel = input_V_data_V_0_sel_rd;

assign input_V_data_V_0_state_cmp_full = ((input_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_V_data_V_0_vld_in = g2N_input_TVALID;

assign input_V_data_V_0_vld_out = input_V_data_V_0_state[1'd0];

assign input_V_dest_V_0_ack_in = input_V_dest_V_0_state[1'd1];

assign input_V_dest_V_0_load_A = (input_V_dest_V_0_state_cmp_full & ~input_V_dest_V_0_sel_wr);

assign input_V_dest_V_0_load_B = (input_V_dest_V_0_state_cmp_full & input_V_dest_V_0_sel_wr);

assign input_V_dest_V_0_sel = input_V_dest_V_0_sel_rd;

assign input_V_dest_V_0_state_cmp_full = ((input_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_V_dest_V_0_vld_in = g2N_input_TVALID;

assign input_V_dest_V_0_vld_out = input_V_dest_V_0_state[1'd0];

assign input_V_id_V_0_ack_in = input_V_id_V_0_state[1'd1];

assign input_V_id_V_0_load_A = (input_V_id_V_0_state_cmp_full & ~input_V_id_V_0_sel_wr);

assign input_V_id_V_0_load_B = (input_V_id_V_0_state_cmp_full & input_V_id_V_0_sel_wr);

assign input_V_id_V_0_sel = input_V_id_V_0_sel_rd;

assign input_V_id_V_0_state_cmp_full = ((input_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_V_id_V_0_vld_in = g2N_input_TVALID;

assign input_V_id_V_0_vld_out = input_V_id_V_0_state[1'd0];

assign input_V_keep_V_0_ack_in = input_V_keep_V_0_state[1'd1];

assign input_V_keep_V_0_load_A = (input_V_keep_V_0_state_cmp_full & ~input_V_keep_V_0_sel_wr);

assign input_V_keep_V_0_load_B = (input_V_keep_V_0_state_cmp_full & input_V_keep_V_0_sel_wr);

assign input_V_keep_V_0_sel = input_V_keep_V_0_sel_rd;

assign input_V_keep_V_0_state_cmp_full = ((input_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_V_keep_V_0_vld_in = g2N_input_TVALID;

assign input_V_keep_V_0_vld_out = input_V_keep_V_0_state[1'd0];

assign input_V_last_V_0_ack_in = input_V_last_V_0_state[1'd1];

assign input_V_last_V_0_load_A = (input_V_last_V_0_state_cmp_full & ~input_V_last_V_0_sel_wr);

assign input_V_last_V_0_load_B = (input_V_last_V_0_state_cmp_full & input_V_last_V_0_sel_wr);

assign input_V_last_V_0_sel = input_V_last_V_0_sel_rd;

assign input_V_last_V_0_state_cmp_full = ((input_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_V_last_V_0_vld_in = g2N_input_TVALID;

assign input_V_last_V_0_vld_out = input_V_last_V_0_state[1'd0];

assign input_V_user_V_0_ack_in = input_V_user_V_0_state[1'd1];

assign input_V_user_V_0_load_A = (input_V_user_V_0_state_cmp_full & ~input_V_user_V_0_sel_wr);

assign input_V_user_V_0_load_B = (input_V_user_V_0_state_cmp_full & input_V_user_V_0_sel_wr);

assign input_V_user_V_0_sel = input_V_user_V_0_sel_rd;

assign input_V_user_V_0_state_cmp_full = ((input_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_V_user_V_0_vld_in = g2N_input_TVALID;

assign input_V_user_V_0_vld_out = input_V_user_V_0_state[1'd0];

assign output_V_data_V_1_ack_in = output_V_data_V_1_state[1'd1];

assign output_V_data_V_1_ack_out = g2N_output_TREADY;

assign output_V_data_V_1_load_A = (output_V_data_V_1_state_cmp_full & ~output_V_data_V_1_sel_wr);

assign output_V_data_V_1_load_B = (output_V_data_V_1_state_cmp_full & output_V_data_V_1_sel_wr);

assign output_V_data_V_1_sel = output_V_data_V_1_sel_rd;

assign output_V_data_V_1_state_cmp_full = ((output_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_V_data_V_1_vld_out = output_V_data_V_1_state[1'd0];

assign output_V_keep_V_1_ack_in = output_V_keep_V_1_state[1'd1];

assign output_V_keep_V_1_ack_out = g2N_output_TREADY;

assign output_V_keep_V_1_load_A = (output_V_keep_V_1_state_cmp_full & ~output_V_keep_V_1_sel_wr);

assign output_V_keep_V_1_load_B = (output_V_keep_V_1_state_cmp_full & output_V_keep_V_1_sel_wr);

assign output_V_keep_V_1_sel = output_V_keep_V_1_sel_rd;

assign output_V_keep_V_1_state_cmp_full = ((output_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_V_keep_V_1_vld_out = output_V_keep_V_1_state[1'd0];

assign output_V_last_V_1_ack_in = output_V_last_V_1_state[1'd1];

assign output_V_last_V_1_ack_out = g2N_output_TREADY;

assign output_V_last_V_1_load_A = (output_V_last_V_1_state_cmp_full & ~output_V_last_V_1_sel_wr);

assign output_V_last_V_1_load_B = (output_V_last_V_1_state_cmp_full & output_V_last_V_1_sel_wr);

assign output_V_last_V_1_sel = output_V_last_V_1_sel_rd;

assign output_V_last_V_1_state_cmp_full = ((output_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_V_last_V_1_vld_out = output_V_last_V_1_state[1'd0];

assign output_V_user_V_1_ack_out = g2N_output_TREADY;

assign output_V_user_V_1_data_out = 16'd0;

assign output_V_user_V_1_sel = output_V_user_V_1_sel_rd;

assign output_V_user_V_1_vld_out = output_V_user_V_1_state[1'd0];

assign p_Result_s_fu_124_p5 = {{{{{{480'd0}, {input_V_dest_V_0_data_out}}}, {input_V_id_V_0_data_out}}}, {input_V_user_V_0_data_out}};

endmodule //g2N

-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity g2N is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    g2N_input_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    g2N_input_TVALID : IN STD_LOGIC;
    g2N_input_TREADY : OUT STD_LOGIC;
    g2N_input_TDEST : IN STD_LOGIC_VECTOR (7 downto 0);
    g2N_input_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    g2N_input_TID : IN STD_LOGIC_VECTOR (7 downto 0);
    g2N_input_TUSER : IN STD_LOGIC_VECTOR (15 downto 0);
    g2N_input_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
    g2N_output_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    g2N_output_TVALID : OUT STD_LOGIC;
    g2N_output_TREADY : IN STD_LOGIC;
    g2N_output_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    g2N_output_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    g2N_output_TUSER : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of g2N is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv480_lc_1 : STD_LOGIC_VECTOR (479 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_V_data_V_0_data_out : STD_LOGIC_VECTOR (511 downto 0);
    signal input_V_data_V_0_vld_in : STD_LOGIC;
    signal input_V_data_V_0_vld_out : STD_LOGIC;
    signal input_V_data_V_0_ack_in : STD_LOGIC;
    signal input_V_data_V_0_ack_out : STD_LOGIC;
    signal input_V_data_V_0_payload_A : STD_LOGIC_VECTOR (511 downto 0);
    signal input_V_data_V_0_payload_B : STD_LOGIC_VECTOR (511 downto 0);
    signal input_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal input_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal input_V_data_V_0_sel : STD_LOGIC;
    signal input_V_data_V_0_load_A : STD_LOGIC;
    signal input_V_data_V_0_load_B : STD_LOGIC;
    signal input_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal input_V_dest_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal input_V_dest_V_0_vld_in : STD_LOGIC;
    signal input_V_dest_V_0_vld_out : STD_LOGIC;
    signal input_V_dest_V_0_ack_in : STD_LOGIC;
    signal input_V_dest_V_0_ack_out : STD_LOGIC;
    signal input_V_dest_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal input_V_dest_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal input_V_dest_V_0_sel_rd : STD_LOGIC := '0';
    signal input_V_dest_V_0_sel_wr : STD_LOGIC := '0';
    signal input_V_dest_V_0_sel : STD_LOGIC;
    signal input_V_dest_V_0_load_A : STD_LOGIC;
    signal input_V_dest_V_0_load_B : STD_LOGIC;
    signal input_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_V_dest_V_0_state_cmp_full : STD_LOGIC;
    signal input_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal input_V_last_V_0_vld_in : STD_LOGIC;
    signal input_V_last_V_0_vld_out : STD_LOGIC;
    signal input_V_last_V_0_ack_in : STD_LOGIC;
    signal input_V_last_V_0_ack_out : STD_LOGIC;
    signal input_V_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal input_V_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal input_V_last_V_0_sel_rd : STD_LOGIC := '0';
    signal input_V_last_V_0_sel_wr : STD_LOGIC := '0';
    signal input_V_last_V_0_sel : STD_LOGIC;
    signal input_V_last_V_0_load_A : STD_LOGIC;
    signal input_V_last_V_0_load_B : STD_LOGIC;
    signal input_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_V_last_V_0_state_cmp_full : STD_LOGIC;
    signal input_V_id_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal input_V_id_V_0_vld_in : STD_LOGIC;
    signal input_V_id_V_0_vld_out : STD_LOGIC;
    signal input_V_id_V_0_ack_in : STD_LOGIC;
    signal input_V_id_V_0_ack_out : STD_LOGIC;
    signal input_V_id_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal input_V_id_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal input_V_id_V_0_sel_rd : STD_LOGIC := '0';
    signal input_V_id_V_0_sel_wr : STD_LOGIC := '0';
    signal input_V_id_V_0_sel : STD_LOGIC;
    signal input_V_id_V_0_load_A : STD_LOGIC;
    signal input_V_id_V_0_load_B : STD_LOGIC;
    signal input_V_id_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_V_id_V_0_state_cmp_full : STD_LOGIC;
    signal input_V_user_V_0_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal input_V_user_V_0_vld_in : STD_LOGIC;
    signal input_V_user_V_0_vld_out : STD_LOGIC;
    signal input_V_user_V_0_ack_in : STD_LOGIC;
    signal input_V_user_V_0_ack_out : STD_LOGIC;
    signal input_V_user_V_0_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal input_V_user_V_0_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal input_V_user_V_0_sel_rd : STD_LOGIC := '0';
    signal input_V_user_V_0_sel_wr : STD_LOGIC := '0';
    signal input_V_user_V_0_sel : STD_LOGIC;
    signal input_V_user_V_0_load_A : STD_LOGIC;
    signal input_V_user_V_0_load_B : STD_LOGIC;
    signal input_V_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_V_user_V_0_state_cmp_full : STD_LOGIC;
    signal input_V_keep_V_0_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal input_V_keep_V_0_vld_in : STD_LOGIC;
    signal input_V_keep_V_0_vld_out : STD_LOGIC;
    signal input_V_keep_V_0_ack_in : STD_LOGIC;
    signal input_V_keep_V_0_ack_out : STD_LOGIC;
    signal input_V_keep_V_0_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal input_V_keep_V_0_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal input_V_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal input_V_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal input_V_keep_V_0_sel : STD_LOGIC;
    signal input_V_keep_V_0_load_A : STD_LOGIC;
    signal input_V_keep_V_0_load_B : STD_LOGIC;
    signal input_V_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_V_keep_V_0_state_cmp_full : STD_LOGIC;
    signal output_V_data_V_1_data_in : STD_LOGIC_VECTOR (511 downto 0);
    signal output_V_data_V_1_data_out : STD_LOGIC_VECTOR (511 downto 0);
    signal output_V_data_V_1_vld_in : STD_LOGIC;
    signal output_V_data_V_1_vld_out : STD_LOGIC;
    signal output_V_data_V_1_ack_in : STD_LOGIC;
    signal output_V_data_V_1_ack_out : STD_LOGIC;
    signal output_V_data_V_1_payload_A : STD_LOGIC_VECTOR (511 downto 0);
    signal output_V_data_V_1_payload_B : STD_LOGIC_VECTOR (511 downto 0);
    signal output_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal output_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal output_V_data_V_1_sel : STD_LOGIC;
    signal output_V_data_V_1_load_A : STD_LOGIC;
    signal output_V_data_V_1_load_B : STD_LOGIC;
    signal output_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal output_V_keep_V_1_data_in : STD_LOGIC_VECTOR (63 downto 0);
    signal output_V_keep_V_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal output_V_keep_V_1_vld_in : STD_LOGIC;
    signal output_V_keep_V_1_vld_out : STD_LOGIC;
    signal output_V_keep_V_1_ack_in : STD_LOGIC;
    signal output_V_keep_V_1_ack_out : STD_LOGIC;
    signal output_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal output_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal output_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal output_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal output_V_keep_V_1_sel : STD_LOGIC;
    signal output_V_keep_V_1_load_A : STD_LOGIC;
    signal output_V_keep_V_1_load_B : STD_LOGIC;
    signal output_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal output_V_last_V_1_data_in : STD_LOGIC_VECTOR (0 downto 0);
    signal output_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal output_V_last_V_1_vld_in : STD_LOGIC;
    signal output_V_last_V_1_vld_out : STD_LOGIC;
    signal output_V_last_V_1_ack_in : STD_LOGIC;
    signal output_V_last_V_1_ack_out : STD_LOGIC;
    signal output_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal output_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal output_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal output_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal output_V_last_V_1_sel : STD_LOGIC;
    signal output_V_last_V_1_load_A : STD_LOGIC;
    signal output_V_last_V_1_load_B : STD_LOGIC;
    signal output_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal output_V_user_V_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal output_V_user_V_1_vld_in : STD_LOGIC;
    signal output_V_user_V_1_vld_out : STD_LOGIC;
    signal output_V_user_V_1_ack_out : STD_LOGIC;
    signal output_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal output_V_user_V_1_sel : STD_LOGIC;
    signal output_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal g2N_input_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_p_036_2_0_phi_fu_92_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal g2N_output_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal p_036_2_0_reg_89 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal p_036_2_0_reg_89_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal reg_107 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_last_V_reg_141 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_124_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_last_V_2_reg_152 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_keep_V_reg_158 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_state7 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((output_V_user_V_1_state = ap_const_lv2_1) or (output_V_last_V_1_state = ap_const_lv2_1) or (output_V_keep_V_1_state = ap_const_lv2_1) or (output_V_data_V_1_state = ap_const_lv2_1) or ((output_V_user_V_1_state = ap_const_lv2_3) and (g2N_output_TREADY = ap_const_logic_0)) or ((output_V_last_V_1_state = ap_const_lv2_3) and (g2N_output_TREADY = ap_const_logic_0)) or ((output_V_keep_V_1_state = ap_const_lv2_3) and (g2N_output_TREADY = ap_const_logic_0)) or ((output_V_data_V_1_state = ap_const_lv2_3) and (g2N_output_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((output_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((output_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    input_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                input_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((input_V_data_V_0_ack_out = ap_const_logic_1) and (input_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        input_V_data_V_0_sel_rd <= not(input_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                input_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((input_V_data_V_0_ack_in = ap_const_logic_1) and (input_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        input_V_data_V_0_sel_wr <= not(input_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                input_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((input_V_data_V_0_state = ap_const_lv2_2) and (input_V_data_V_0_vld_in = ap_const_logic_0)) or ((input_V_data_V_0_state = ap_const_lv2_3) and (input_V_data_V_0_vld_in = ap_const_logic_0) and (input_V_data_V_0_ack_out = ap_const_logic_1)))) then 
                    input_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((input_V_data_V_0_state = ap_const_lv2_1) and (input_V_data_V_0_ack_out = ap_const_logic_0)) or ((input_V_data_V_0_state = ap_const_lv2_3) and (input_V_data_V_0_ack_out = ap_const_logic_0) and (input_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    input_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((input_V_data_V_0_vld_in = ap_const_logic_0) and (input_V_data_V_0_ack_out = ap_const_logic_1))) and not(((input_V_data_V_0_ack_out = ap_const_logic_0) and (input_V_data_V_0_vld_in = ap_const_logic_1))) and (input_V_data_V_0_state = ap_const_lv2_3)) or ((input_V_data_V_0_state = ap_const_lv2_1) and (input_V_data_V_0_ack_out = ap_const_logic_1)) or ((input_V_data_V_0_state = ap_const_lv2_2) and (input_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    input_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    input_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_V_dest_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                input_V_dest_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((input_V_dest_V_0_vld_out = ap_const_logic_1) and (input_V_dest_V_0_ack_out = ap_const_logic_1))) then 
                                        input_V_dest_V_0_sel_rd <= not(input_V_dest_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_V_dest_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                input_V_dest_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((input_V_dest_V_0_vld_in = ap_const_logic_1) and (input_V_dest_V_0_ack_in = ap_const_logic_1))) then 
                                        input_V_dest_V_0_sel_wr <= not(input_V_dest_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                input_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((input_V_dest_V_0_state = ap_const_lv2_2) and (input_V_dest_V_0_vld_in = ap_const_logic_0)) or ((input_V_dest_V_0_state = ap_const_lv2_3) and (input_V_dest_V_0_vld_in = ap_const_logic_0) and (input_V_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    input_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((input_V_dest_V_0_state = ap_const_lv2_1) and (input_V_dest_V_0_ack_out = ap_const_logic_0)) or ((input_V_dest_V_0_state = ap_const_lv2_3) and (input_V_dest_V_0_ack_out = ap_const_logic_0) and (input_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    input_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((input_V_dest_V_0_vld_in = ap_const_logic_0) and (input_V_dest_V_0_ack_out = ap_const_logic_1))) and not(((input_V_dest_V_0_ack_out = ap_const_logic_0) and (input_V_dest_V_0_vld_in = ap_const_logic_1))) and (input_V_dest_V_0_state = ap_const_lv2_3)) or ((input_V_dest_V_0_state = ap_const_lv2_1) and (input_V_dest_V_0_ack_out = ap_const_logic_1)) or ((input_V_dest_V_0_state = ap_const_lv2_2) and (input_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    input_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    input_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_V_id_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                input_V_id_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((input_V_id_V_0_ack_out = ap_const_logic_1) and (input_V_id_V_0_vld_out = ap_const_logic_1))) then 
                                        input_V_id_V_0_sel_rd <= not(input_V_id_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_V_id_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                input_V_id_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((input_V_id_V_0_ack_in = ap_const_logic_1) and (input_V_id_V_0_vld_in = ap_const_logic_1))) then 
                                        input_V_id_V_0_sel_wr <= not(input_V_id_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_V_id_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                input_V_id_V_0_state <= ap_const_lv2_0;
            else
                if ((((input_V_id_V_0_state = ap_const_lv2_2) and (input_V_id_V_0_vld_in = ap_const_logic_0)) or ((input_V_id_V_0_state = ap_const_lv2_3) and (input_V_id_V_0_vld_in = ap_const_logic_0) and (input_V_id_V_0_ack_out = ap_const_logic_1)))) then 
                    input_V_id_V_0_state <= ap_const_lv2_2;
                elsif ((((input_V_id_V_0_state = ap_const_lv2_1) and (input_V_id_V_0_ack_out = ap_const_logic_0)) or ((input_V_id_V_0_state = ap_const_lv2_3) and (input_V_id_V_0_ack_out = ap_const_logic_0) and (input_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    input_V_id_V_0_state <= ap_const_lv2_1;
                elsif (((not(((input_V_id_V_0_vld_in = ap_const_logic_0) and (input_V_id_V_0_ack_out = ap_const_logic_1))) and not(((input_V_id_V_0_ack_out = ap_const_logic_0) and (input_V_id_V_0_vld_in = ap_const_logic_1))) and (input_V_id_V_0_state = ap_const_lv2_3)) or ((input_V_id_V_0_state = ap_const_lv2_1) and (input_V_id_V_0_ack_out = ap_const_logic_1)) or ((input_V_id_V_0_state = ap_const_lv2_2) and (input_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    input_V_id_V_0_state <= ap_const_lv2_3;
                else 
                    input_V_id_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_V_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                input_V_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((input_V_keep_V_0_ack_out = ap_const_logic_1) and (input_V_keep_V_0_vld_out = ap_const_logic_1))) then 
                                        input_V_keep_V_0_sel_rd <= not(input_V_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_V_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                input_V_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((input_V_keep_V_0_ack_in = ap_const_logic_1) and (input_V_keep_V_0_vld_in = ap_const_logic_1))) then 
                                        input_V_keep_V_0_sel_wr <= not(input_V_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_V_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                input_V_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((input_V_keep_V_0_state = ap_const_lv2_2) and (input_V_keep_V_0_vld_in = ap_const_logic_0)) or ((input_V_keep_V_0_state = ap_const_lv2_3) and (input_V_keep_V_0_vld_in = ap_const_logic_0) and (input_V_keep_V_0_ack_out = ap_const_logic_1)))) then 
                    input_V_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((input_V_keep_V_0_state = ap_const_lv2_1) and (input_V_keep_V_0_ack_out = ap_const_logic_0)) or ((input_V_keep_V_0_state = ap_const_lv2_3) and (input_V_keep_V_0_ack_out = ap_const_logic_0) and (input_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    input_V_keep_V_0_state <= ap_const_lv2_1;
                elsif (((not(((input_V_keep_V_0_vld_in = ap_const_logic_0) and (input_V_keep_V_0_ack_out = ap_const_logic_1))) and not(((input_V_keep_V_0_ack_out = ap_const_logic_0) and (input_V_keep_V_0_vld_in = ap_const_logic_1))) and (input_V_keep_V_0_state = ap_const_lv2_3)) or ((input_V_keep_V_0_state = ap_const_lv2_1) and (input_V_keep_V_0_ack_out = ap_const_logic_1)) or ((input_V_keep_V_0_state = ap_const_lv2_2) and (input_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    input_V_keep_V_0_state <= ap_const_lv2_3;
                else 
                    input_V_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_V_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                input_V_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((input_V_last_V_0_ack_out = ap_const_logic_1) and (input_V_last_V_0_vld_out = ap_const_logic_1))) then 
                                        input_V_last_V_0_sel_rd <= not(input_V_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_V_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                input_V_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((input_V_last_V_0_ack_in = ap_const_logic_1) and (input_V_last_V_0_vld_in = ap_const_logic_1))) then 
                                        input_V_last_V_0_sel_wr <= not(input_V_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                input_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((input_V_last_V_0_state = ap_const_lv2_2) and (input_V_last_V_0_vld_in = ap_const_logic_0)) or ((input_V_last_V_0_state = ap_const_lv2_3) and (input_V_last_V_0_vld_in = ap_const_logic_0) and (input_V_last_V_0_ack_out = ap_const_logic_1)))) then 
                    input_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((input_V_last_V_0_state = ap_const_lv2_1) and (input_V_last_V_0_ack_out = ap_const_logic_0)) or ((input_V_last_V_0_state = ap_const_lv2_3) and (input_V_last_V_0_ack_out = ap_const_logic_0) and (input_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    input_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((input_V_last_V_0_vld_in = ap_const_logic_0) and (input_V_last_V_0_ack_out = ap_const_logic_1))) and not(((input_V_last_V_0_ack_out = ap_const_logic_0) and (input_V_last_V_0_vld_in = ap_const_logic_1))) and (input_V_last_V_0_state = ap_const_lv2_3)) or ((input_V_last_V_0_state = ap_const_lv2_1) and (input_V_last_V_0_ack_out = ap_const_logic_1)) or ((input_V_last_V_0_state = ap_const_lv2_2) and (input_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    input_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    input_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_V_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                input_V_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((input_V_user_V_0_ack_out = ap_const_logic_1) and (input_V_user_V_0_vld_out = ap_const_logic_1))) then 
                                        input_V_user_V_0_sel_rd <= not(input_V_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_V_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                input_V_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((input_V_user_V_0_ack_in = ap_const_logic_1) and (input_V_user_V_0_vld_in = ap_const_logic_1))) then 
                                        input_V_user_V_0_sel_wr <= not(input_V_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_V_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                input_V_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((input_V_user_V_0_state = ap_const_lv2_2) and (input_V_user_V_0_vld_in = ap_const_logic_0)) or ((input_V_user_V_0_state = ap_const_lv2_3) and (input_V_user_V_0_vld_in = ap_const_logic_0) and (input_V_user_V_0_ack_out = ap_const_logic_1)))) then 
                    input_V_user_V_0_state <= ap_const_lv2_2;
                elsif ((((input_V_user_V_0_state = ap_const_lv2_1) and (input_V_user_V_0_ack_out = ap_const_logic_0)) or ((input_V_user_V_0_state = ap_const_lv2_3) and (input_V_user_V_0_ack_out = ap_const_logic_0) and (input_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    input_V_user_V_0_state <= ap_const_lv2_1;
                elsif (((not(((input_V_user_V_0_vld_in = ap_const_logic_0) and (input_V_user_V_0_ack_out = ap_const_logic_1))) and not(((input_V_user_V_0_ack_out = ap_const_logic_0) and (input_V_user_V_0_vld_in = ap_const_logic_1))) and (input_V_user_V_0_state = ap_const_lv2_3)) or ((input_V_user_V_0_state = ap_const_lv2_1) and (input_V_user_V_0_ack_out = ap_const_logic_1)) or ((input_V_user_V_0_state = ap_const_lv2_2) and (input_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    input_V_user_V_0_state <= ap_const_lv2_3;
                else 
                    input_V_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((output_V_data_V_1_ack_out = ap_const_logic_1) and (output_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        output_V_data_V_1_sel_rd <= not(output_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((output_V_data_V_1_ack_in = ap_const_logic_1) and (output_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        output_V_data_V_1_sel_wr <= not(output_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((output_V_data_V_1_state = ap_const_lv2_2) and (output_V_data_V_1_vld_in = ap_const_logic_0)) or ((output_V_data_V_1_state = ap_const_lv2_3) and (output_V_data_V_1_vld_in = ap_const_logic_0) and (output_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    output_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((output_V_data_V_1_state = ap_const_lv2_1) and (g2N_output_TREADY = ap_const_logic_0)) or ((output_V_data_V_1_state = ap_const_lv2_3) and (g2N_output_TREADY = ap_const_logic_0) and (output_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    output_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((output_V_data_V_1_vld_in = ap_const_logic_0) and (output_V_data_V_1_ack_out = ap_const_logic_1))) and not(((g2N_output_TREADY = ap_const_logic_0) and (output_V_data_V_1_vld_in = ap_const_logic_1))) and (output_V_data_V_1_state = ap_const_lv2_3)) or ((output_V_data_V_1_state = ap_const_lv2_1) and (output_V_data_V_1_ack_out = ap_const_logic_1)) or ((output_V_data_V_1_state = ap_const_lv2_2) and (output_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    output_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    output_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((output_V_keep_V_1_ack_out = ap_const_logic_1) and (output_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        output_V_keep_V_1_sel_rd <= not(output_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((output_V_keep_V_1_ack_in = ap_const_logic_1) and (output_V_keep_V_1_vld_in = ap_const_logic_1))) then 
                                        output_V_keep_V_1_sel_wr <= not(output_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((output_V_keep_V_1_state = ap_const_lv2_2) and (output_V_keep_V_1_vld_in = ap_const_logic_0)) or ((output_V_keep_V_1_state = ap_const_lv2_3) and (output_V_keep_V_1_vld_in = ap_const_logic_0) and (output_V_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    output_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((output_V_keep_V_1_state = ap_const_lv2_1) and (g2N_output_TREADY = ap_const_logic_0)) or ((output_V_keep_V_1_state = ap_const_lv2_3) and (g2N_output_TREADY = ap_const_logic_0) and (output_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    output_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((output_V_keep_V_1_vld_in = ap_const_logic_0) and (output_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((g2N_output_TREADY = ap_const_logic_0) and (output_V_keep_V_1_vld_in = ap_const_logic_1))) and (output_V_keep_V_1_state = ap_const_lv2_3)) or ((output_V_keep_V_1_state = ap_const_lv2_1) and (output_V_keep_V_1_ack_out = ap_const_logic_1)) or ((output_V_keep_V_1_state = ap_const_lv2_2) and (output_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    output_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    output_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((output_V_last_V_1_ack_out = ap_const_logic_1) and (output_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        output_V_last_V_1_sel_rd <= not(output_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((output_V_last_V_1_ack_in = ap_const_logic_1) and (output_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        output_V_last_V_1_sel_wr <= not(output_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((output_V_last_V_1_state = ap_const_lv2_2) and (output_V_last_V_1_vld_in = ap_const_logic_0)) or ((output_V_last_V_1_state = ap_const_lv2_3) and (output_V_last_V_1_vld_in = ap_const_logic_0) and (output_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    output_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((output_V_last_V_1_state = ap_const_lv2_1) and (g2N_output_TREADY = ap_const_logic_0)) or ((output_V_last_V_1_state = ap_const_lv2_3) and (g2N_output_TREADY = ap_const_logic_0) and (output_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    output_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((output_V_last_V_1_vld_in = ap_const_logic_0) and (output_V_last_V_1_ack_out = ap_const_logic_1))) and not(((g2N_output_TREADY = ap_const_logic_0) and (output_V_last_V_1_vld_in = ap_const_logic_1))) and (output_V_last_V_1_state = ap_const_lv2_3)) or ((output_V_last_V_1_state = ap_const_lv2_1) and (output_V_last_V_1_ack_out = ap_const_logic_1)) or ((output_V_last_V_1_state = ap_const_lv2_2) and (output_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    output_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    output_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((output_V_user_V_1_ack_out = ap_const_logic_1) and (output_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        output_V_user_V_1_sel_rd <= not(output_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                output_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((output_V_user_V_1_state = ap_const_lv2_2) and (output_V_user_V_1_vld_in = ap_const_logic_0)) or ((output_V_user_V_1_state = ap_const_lv2_3) and (output_V_user_V_1_vld_in = ap_const_logic_0) and (output_V_user_V_1_ack_out = ap_const_logic_1)))) then 
                    output_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((output_V_user_V_1_state = ap_const_lv2_1) and (g2N_output_TREADY = ap_const_logic_0)) or ((output_V_user_V_1_state = ap_const_lv2_3) and (g2N_output_TREADY = ap_const_logic_0) and (output_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    output_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((output_V_user_V_1_vld_in = ap_const_logic_0) and (output_V_user_V_1_ack_out = ap_const_logic_1))) and not(((g2N_output_TREADY = ap_const_logic_0) and (output_V_user_V_1_vld_in = ap_const_logic_1))) and (output_V_user_V_1_state = ap_const_lv2_3)) or ((output_V_user_V_1_state = ap_const_lv2_1) and (output_V_user_V_1_ack_out = ap_const_logic_1)) or ((output_V_user_V_1_state = ap_const_lv2_2) and (output_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    output_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    output_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    p_036_2_0_reg_89_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (p_036_2_0_reg_89 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                p_036_2_0_reg_89 <= tmp_last_V_2_reg_152;
            elsif (((output_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_036_2_0_reg_89 <= tmp_last_V_reg_141;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_V_data_V_0_load_A = ap_const_logic_1)) then
                input_V_data_V_0_payload_A <= g2N_input_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_V_data_V_0_load_B = ap_const_logic_1)) then
                input_V_data_V_0_payload_B <= g2N_input_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_V_dest_V_0_load_A = ap_const_logic_1)) then
                input_V_dest_V_0_payload_A <= g2N_input_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_V_dest_V_0_load_B = ap_const_logic_1)) then
                input_V_dest_V_0_payload_B <= g2N_input_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_V_id_V_0_load_A = ap_const_logic_1)) then
                input_V_id_V_0_payload_A <= g2N_input_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_V_id_V_0_load_B = ap_const_logic_1)) then
                input_V_id_V_0_payload_B <= g2N_input_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_V_keep_V_0_load_A = ap_const_logic_1)) then
                input_V_keep_V_0_payload_A <= g2N_input_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_V_keep_V_0_load_B = ap_const_logic_1)) then
                input_V_keep_V_0_payload_B <= g2N_input_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_V_last_V_0_load_A = ap_const_logic_1)) then
                input_V_last_V_0_payload_A <= g2N_input_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_V_last_V_0_load_B = ap_const_logic_1)) then
                input_V_last_V_0_payload_B <= g2N_input_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_V_user_V_0_load_A = ap_const_logic_1)) then
                input_V_user_V_0_payload_A <= g2N_input_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_V_user_V_0_load_B = ap_const_logic_1)) then
                input_V_user_V_0_payload_B <= g2N_input_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_V_data_V_1_load_A = ap_const_logic_1)) then
                output_V_data_V_1_payload_A <= output_V_data_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_V_data_V_1_load_B = ap_const_logic_1)) then
                output_V_data_V_1_payload_B <= output_V_data_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_V_keep_V_1_load_A = ap_const_logic_1)) then
                output_V_keep_V_1_payload_A <= output_V_keep_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_V_keep_V_1_load_B = ap_const_logic_1)) then
                output_V_keep_V_1_payload_B <= output_V_keep_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_V_last_V_1_load_A = ap_const_logic_1)) then
                output_V_last_V_1_payload_A <= output_V_last_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_V_last_V_1_load_B = ap_const_logic_1)) then
                output_V_last_V_1_payload_B <= output_V_last_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_036_2_0_reg_89_pp0_iter1_reg <= p_036_2_0_reg_89;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_p_036_2_0_phi_fu_92_p4 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((output_V_data_V_1_ack_in = ap_const_logic_0) or (input_V_data_V_0_vld_out = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then
                reg_107 <= input_V_data_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_p_036_2_0_phi_fu_92_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_keep_V_reg_158 <= input_V_keep_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_p_036_2_0_phi_fu_92_p4 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_last_V_2_reg_152 <= input_V_last_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((output_V_data_V_1_ack_in = ap_const_logic_0) or (input_V_data_V_0_vld_out = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_last_V_reg_141 <= input_V_last_V_0_data_out;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, input_V_data_V_0_vld_out, g2N_output_TREADY, output_V_data_V_1_ack_in, output_V_data_V_1_state, output_V_keep_V_1_state, output_V_last_V_1_state, output_V_user_V_1_state, ap_enable_reg_pp0_iter0, ap_phi_mux_p_036_2_0_phi_fu_92_p4, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_CS_fsm_state7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((output_V_data_V_1_ack_in = ap_const_logic_0) or (input_V_data_V_0_vld_out = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((output_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((output_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_phi_mux_p_036_2_0_phi_fu_92_p4 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_phi_mux_p_036_2_0_phi_fu_92_p4 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                if ((not(((output_V_user_V_1_state = ap_const_lv2_1) or (output_V_last_V_1_state = ap_const_lv2_1) or (output_V_keep_V_1_state = ap_const_lv2_1) or (output_V_data_V_1_state = ap_const_lv2_1) or ((output_V_user_V_1_state = ap_const_lv2_3) and (g2N_output_TREADY = ap_const_logic_0)) or ((output_V_last_V_1_state = ap_const_lv2_3) and (g2N_output_TREADY = ap_const_logic_0)) or ((output_V_keep_V_1_state = ap_const_lv2_3) and (g2N_output_TREADY = ap_const_logic_0)) or ((output_V_data_V_1_state = ap_const_lv2_3) and (g2N_output_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(input_V_data_V_0_vld_out, ap_enable_reg_pp0_iter0, ap_phi_mux_p_036_2_0_phi_fu_92_p4)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_phi_mux_p_036_2_0_phi_fu_92_p4 = ap_const_lv1_0) and (input_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(input_V_data_V_0_vld_out, ap_enable_reg_pp0_iter0, ap_phi_mux_p_036_2_0_phi_fu_92_p4, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state5_io, ap_block_state6_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state6_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_phi_mux_p_036_2_0_phi_fu_92_p4 = ap_const_lv1_0) and (input_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(input_V_data_V_0_vld_out, ap_enable_reg_pp0_iter0, ap_phi_mux_p_036_2_0_phi_fu_92_p4, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state5_io, ap_block_state6_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state6_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_phi_mux_p_036_2_0_phi_fu_92_p4 = ap_const_lv1_0) and (input_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, input_V_data_V_0_vld_out)
    begin
                ap_block_state1 <= ((input_V_data_V_0_vld_out = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state4_pp0_stage0_iter0_assign_proc : process(input_V_data_V_0_vld_out, ap_phi_mux_p_036_2_0_phi_fu_92_p4)
    begin
                ap_block_state4_pp0_stage0_iter0 <= ((ap_phi_mux_p_036_2_0_phi_fu_92_p4 = ap_const_lv1_0) and (input_V_data_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_block_state5_io_assign_proc : process(output_V_data_V_1_ack_in, p_036_2_0_reg_89)
    begin
                ap_block_state5_io <= ((p_036_2_0_reg_89 = ap_const_lv1_0) and (output_V_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_io_assign_proc : process(output_V_data_V_1_ack_in, p_036_2_0_reg_89_pp0_iter1_reg)
    begin
                ap_block_state6_io <= ((p_036_2_0_reg_89_pp0_iter1_reg = ap_const_lv1_0) and (output_V_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_assign_proc : process(g2N_output_TREADY, output_V_data_V_1_state, output_V_keep_V_1_state, output_V_last_V_1_state, output_V_user_V_1_state)
    begin
                ap_block_state7 <= ((output_V_user_V_1_state = ap_const_lv2_1) or (output_V_last_V_1_state = ap_const_lv2_1) or (output_V_keep_V_1_state = ap_const_lv2_1) or (output_V_data_V_1_state = ap_const_lv2_1) or ((output_V_user_V_1_state = ap_const_lv2_3) and (g2N_output_TREADY = ap_const_logic_0)) or ((output_V_last_V_1_state = ap_const_lv2_3) and (g2N_output_TREADY = ap_const_logic_0)) or ((output_V_keep_V_1_state = ap_const_lv2_3) and (g2N_output_TREADY = ap_const_logic_0)) or ((output_V_data_V_1_state = ap_const_lv2_3) and (g2N_output_TREADY = ap_const_logic_0)));
    end process;


    ap_condition_pp0_exit_iter0_state4_assign_proc : process(ap_phi_mux_p_036_2_0_phi_fu_92_p4)
    begin
        if ((ap_phi_mux_p_036_2_0_phi_fu_92_p4 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, g2N_output_TREADY, output_V_data_V_1_state, output_V_keep_V_1_state, output_V_last_V_1_state, output_V_user_V_1_state, ap_CS_fsm_state7)
    begin
        if ((not(((output_V_user_V_1_state = ap_const_lv2_1) or (output_V_last_V_1_state = ap_const_lv2_1) or (output_V_keep_V_1_state = ap_const_lv2_1) or (output_V_data_V_1_state = ap_const_lv2_1) or ((output_V_user_V_1_state = ap_const_lv2_3) and (g2N_output_TREADY = ap_const_logic_0)) or ((output_V_last_V_1_state = ap_const_lv2_3) and (g2N_output_TREADY = ap_const_logic_0)) or ((output_V_keep_V_1_state = ap_const_lv2_3) and (g2N_output_TREADY = ap_const_logic_0)) or ((output_V_data_V_1_state = ap_const_lv2_3) and (g2N_output_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_036_2_0_phi_fu_92_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, p_036_2_0_reg_89, tmp_last_V_2_reg_152)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (p_036_2_0_reg_89 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_p_036_2_0_phi_fu_92_p4 <= tmp_last_V_2_reg_152;
        else 
            ap_phi_mux_p_036_2_0_phi_fu_92_p4 <= p_036_2_0_reg_89;
        end if; 
    end process;


    ap_ready_assign_proc : process(g2N_output_TREADY, output_V_data_V_1_state, output_V_keep_V_1_state, output_V_last_V_1_state, output_V_user_V_1_state, ap_CS_fsm_state7)
    begin
        if ((not(((output_V_user_V_1_state = ap_const_lv2_1) or (output_V_last_V_1_state = ap_const_lv2_1) or (output_V_keep_V_1_state = ap_const_lv2_1) or (output_V_data_V_1_state = ap_const_lv2_1) or ((output_V_user_V_1_state = ap_const_lv2_3) and (g2N_output_TREADY = ap_const_logic_0)) or ((output_V_last_V_1_state = ap_const_lv2_3) and (g2N_output_TREADY = ap_const_logic_0)) or ((output_V_keep_V_1_state = ap_const_lv2_3) and (g2N_output_TREADY = ap_const_logic_0)) or ((output_V_data_V_1_state = ap_const_lv2_3) and (g2N_output_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    g2N_input_TDATA_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, input_V_data_V_0_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_phi_mux_p_036_2_0_phi_fu_92_p4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_phi_mux_p_036_2_0_phi_fu_92_p4 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            g2N_input_TDATA_blk_n <= input_V_data_V_0_state(0);
        else 
            g2N_input_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    g2N_input_TREADY <= input_V_keep_V_0_state(1);
    g2N_output_TDATA <= output_V_data_V_1_data_out;

    g2N_output_TDATA_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, output_V_data_V_1_state, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_enable_reg_pp0_iter1, p_036_2_0_reg_89, ap_enable_reg_pp0_iter2, p_036_2_0_reg_89_pp0_iter1_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (p_036_2_0_reg_89_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (p_036_2_0_reg_89 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            g2N_output_TDATA_blk_n <= output_V_data_V_1_state(1);
        else 
            g2N_output_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    g2N_output_TKEEP <= output_V_keep_V_1_data_out;
    g2N_output_TLAST <= output_V_last_V_1_data_out;
    g2N_output_TUSER <= output_V_user_V_1_data_out;
    g2N_output_TVALID <= output_V_user_V_1_state(0);
    input_V_data_V_0_ack_in <= input_V_data_V_0_state(1);

    input_V_data_V_0_ack_out_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, input_V_data_V_0_vld_out, output_V_data_V_1_ack_in, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_phi_mux_p_036_2_0_phi_fu_92_p4, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_p_036_2_0_phi_fu_92_p4 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((output_V_data_V_1_ack_in = ap_const_logic_0) or (input_V_data_V_0_vld_out = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            input_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            input_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    input_V_data_V_0_data_out_assign_proc : process(input_V_data_V_0_payload_A, input_V_data_V_0_payload_B, input_V_data_V_0_sel)
    begin
        if ((input_V_data_V_0_sel = ap_const_logic_1)) then 
            input_V_data_V_0_data_out <= input_V_data_V_0_payload_B;
        else 
            input_V_data_V_0_data_out <= input_V_data_V_0_payload_A;
        end if; 
    end process;

    input_V_data_V_0_load_A <= (input_V_data_V_0_state_cmp_full and not(input_V_data_V_0_sel_wr));
    input_V_data_V_0_load_B <= (input_V_data_V_0_state_cmp_full and input_V_data_V_0_sel_wr);
    input_V_data_V_0_sel <= input_V_data_V_0_sel_rd;
    input_V_data_V_0_state_cmp_full <= '0' when (input_V_data_V_0_state = ap_const_lv2_1) else '1';
    input_V_data_V_0_vld_in <= g2N_input_TVALID;
    input_V_data_V_0_vld_out <= input_V_data_V_0_state(0);
    input_V_dest_V_0_ack_in <= input_V_dest_V_0_state(1);

    input_V_dest_V_0_ack_out_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, input_V_data_V_0_vld_out, output_V_data_V_1_ack_in, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_phi_mux_p_036_2_0_phi_fu_92_p4, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_p_036_2_0_phi_fu_92_p4 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((output_V_data_V_1_ack_in = ap_const_logic_0) or (input_V_data_V_0_vld_out = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            input_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            input_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    input_V_dest_V_0_data_out_assign_proc : process(input_V_dest_V_0_payload_A, input_V_dest_V_0_payload_B, input_V_dest_V_0_sel)
    begin
        if ((input_V_dest_V_0_sel = ap_const_logic_1)) then 
            input_V_dest_V_0_data_out <= input_V_dest_V_0_payload_B;
        else 
            input_V_dest_V_0_data_out <= input_V_dest_V_0_payload_A;
        end if; 
    end process;

    input_V_dest_V_0_load_A <= (input_V_dest_V_0_state_cmp_full and not(input_V_dest_V_0_sel_wr));
    input_V_dest_V_0_load_B <= (input_V_dest_V_0_state_cmp_full and input_V_dest_V_0_sel_wr);
    input_V_dest_V_0_sel <= input_V_dest_V_0_sel_rd;
    input_V_dest_V_0_state_cmp_full <= '0' when (input_V_dest_V_0_state = ap_const_lv2_1) else '1';
    input_V_dest_V_0_vld_in <= g2N_input_TVALID;
    input_V_dest_V_0_vld_out <= input_V_dest_V_0_state(0);
    input_V_id_V_0_ack_in <= input_V_id_V_0_state(1);

    input_V_id_V_0_ack_out_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, input_V_data_V_0_vld_out, output_V_data_V_1_ack_in, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_phi_mux_p_036_2_0_phi_fu_92_p4, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_p_036_2_0_phi_fu_92_p4 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((output_V_data_V_1_ack_in = ap_const_logic_0) or (input_V_data_V_0_vld_out = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            input_V_id_V_0_ack_out <= ap_const_logic_1;
        else 
            input_V_id_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    input_V_id_V_0_data_out_assign_proc : process(input_V_id_V_0_payload_A, input_V_id_V_0_payload_B, input_V_id_V_0_sel)
    begin
        if ((input_V_id_V_0_sel = ap_const_logic_1)) then 
            input_V_id_V_0_data_out <= input_V_id_V_0_payload_B;
        else 
            input_V_id_V_0_data_out <= input_V_id_V_0_payload_A;
        end if; 
    end process;

    input_V_id_V_0_load_A <= (input_V_id_V_0_state_cmp_full and not(input_V_id_V_0_sel_wr));
    input_V_id_V_0_load_B <= (input_V_id_V_0_state_cmp_full and input_V_id_V_0_sel_wr);
    input_V_id_V_0_sel <= input_V_id_V_0_sel_rd;
    input_V_id_V_0_state_cmp_full <= '0' when (input_V_id_V_0_state = ap_const_lv2_1) else '1';
    input_V_id_V_0_vld_in <= g2N_input_TVALID;
    input_V_id_V_0_vld_out <= input_V_id_V_0_state(0);
    input_V_keep_V_0_ack_in <= input_V_keep_V_0_state(1);

    input_V_keep_V_0_ack_out_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, input_V_data_V_0_vld_out, output_V_data_V_1_ack_in, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_phi_mux_p_036_2_0_phi_fu_92_p4, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_p_036_2_0_phi_fu_92_p4 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((output_V_data_V_1_ack_in = ap_const_logic_0) or (input_V_data_V_0_vld_out = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            input_V_keep_V_0_ack_out <= ap_const_logic_1;
        else 
            input_V_keep_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    input_V_keep_V_0_data_out_assign_proc : process(input_V_keep_V_0_payload_A, input_V_keep_V_0_payload_B, input_V_keep_V_0_sel)
    begin
        if ((input_V_keep_V_0_sel = ap_const_logic_1)) then 
            input_V_keep_V_0_data_out <= input_V_keep_V_0_payload_B;
        else 
            input_V_keep_V_0_data_out <= input_V_keep_V_0_payload_A;
        end if; 
    end process;

    input_V_keep_V_0_load_A <= (input_V_keep_V_0_state_cmp_full and not(input_V_keep_V_0_sel_wr));
    input_V_keep_V_0_load_B <= (input_V_keep_V_0_state_cmp_full and input_V_keep_V_0_sel_wr);
    input_V_keep_V_0_sel <= input_V_keep_V_0_sel_rd;
    input_V_keep_V_0_state_cmp_full <= '0' when (input_V_keep_V_0_state = ap_const_lv2_1) else '1';
    input_V_keep_V_0_vld_in <= g2N_input_TVALID;
    input_V_keep_V_0_vld_out <= input_V_keep_V_0_state(0);
    input_V_last_V_0_ack_in <= input_V_last_V_0_state(1);

    input_V_last_V_0_ack_out_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, input_V_data_V_0_vld_out, output_V_data_V_1_ack_in, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_phi_mux_p_036_2_0_phi_fu_92_p4, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_p_036_2_0_phi_fu_92_p4 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((output_V_data_V_1_ack_in = ap_const_logic_0) or (input_V_data_V_0_vld_out = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            input_V_last_V_0_ack_out <= ap_const_logic_1;
        else 
            input_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    input_V_last_V_0_data_out_assign_proc : process(input_V_last_V_0_payload_A, input_V_last_V_0_payload_B, input_V_last_V_0_sel)
    begin
        if ((input_V_last_V_0_sel = ap_const_logic_1)) then 
            input_V_last_V_0_data_out <= input_V_last_V_0_payload_B;
        else 
            input_V_last_V_0_data_out <= input_V_last_V_0_payload_A;
        end if; 
    end process;

    input_V_last_V_0_load_A <= (input_V_last_V_0_state_cmp_full and not(input_V_last_V_0_sel_wr));
    input_V_last_V_0_load_B <= (input_V_last_V_0_state_cmp_full and input_V_last_V_0_sel_wr);
    input_V_last_V_0_sel <= input_V_last_V_0_sel_rd;
    input_V_last_V_0_state_cmp_full <= '0' when (input_V_last_V_0_state = ap_const_lv2_1) else '1';
    input_V_last_V_0_vld_in <= g2N_input_TVALID;
    input_V_last_V_0_vld_out <= input_V_last_V_0_state(0);
    input_V_user_V_0_ack_in <= input_V_user_V_0_state(1);

    input_V_user_V_0_ack_out_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, input_V_data_V_0_vld_out, output_V_data_V_1_ack_in, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_phi_mux_p_036_2_0_phi_fu_92_p4, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_p_036_2_0_phi_fu_92_p4 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((output_V_data_V_1_ack_in = ap_const_logic_0) or (input_V_data_V_0_vld_out = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            input_V_user_V_0_ack_out <= ap_const_logic_1;
        else 
            input_V_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    input_V_user_V_0_data_out_assign_proc : process(input_V_user_V_0_payload_A, input_V_user_V_0_payload_B, input_V_user_V_0_sel)
    begin
        if ((input_V_user_V_0_sel = ap_const_logic_1)) then 
            input_V_user_V_0_data_out <= input_V_user_V_0_payload_B;
        else 
            input_V_user_V_0_data_out <= input_V_user_V_0_payload_A;
        end if; 
    end process;

    input_V_user_V_0_load_A <= (input_V_user_V_0_state_cmp_full and not(input_V_user_V_0_sel_wr));
    input_V_user_V_0_load_B <= (input_V_user_V_0_state_cmp_full and input_V_user_V_0_sel_wr);
    input_V_user_V_0_sel <= input_V_user_V_0_sel_rd;
    input_V_user_V_0_state_cmp_full <= '0' when (input_V_user_V_0_state = ap_const_lv2_1) else '1';
    input_V_user_V_0_vld_in <= g2N_input_TVALID;
    input_V_user_V_0_vld_out <= input_V_user_V_0_state(0);
    output_V_data_V_1_ack_in <= output_V_data_V_1_state(1);
    output_V_data_V_1_ack_out <= g2N_output_TREADY;

    output_V_data_V_1_data_in_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, input_V_data_V_0_vld_out, ap_CS_fsm_pp0_stage0, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, p_036_2_0_reg_89, reg_107, p_Result_s_fu_124_p5, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (p_036_2_0_reg_89 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            output_V_data_V_1_data_in <= reg_107;
        elsif ((not(((input_V_data_V_0_vld_out = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            output_V_data_V_1_data_in <= p_Result_s_fu_124_p5;
        else 
            output_V_data_V_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_V_data_V_1_data_out_assign_proc : process(output_V_data_V_1_payload_A, output_V_data_V_1_payload_B, output_V_data_V_1_sel)
    begin
        if ((output_V_data_V_1_sel = ap_const_logic_1)) then 
            output_V_data_V_1_data_out <= output_V_data_V_1_payload_B;
        else 
            output_V_data_V_1_data_out <= output_V_data_V_1_payload_A;
        end if; 
    end process;

    output_V_data_V_1_load_A <= (output_V_data_V_1_state_cmp_full and not(output_V_data_V_1_sel_wr));
    output_V_data_V_1_load_B <= (output_V_data_V_1_state_cmp_full and output_V_data_V_1_sel_wr);
    output_V_data_V_1_sel <= output_V_data_V_1_sel_rd;
    output_V_data_V_1_state_cmp_full <= '0' when (output_V_data_V_1_state = ap_const_lv2_1) else '1';

    output_V_data_V_1_vld_in_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, input_V_data_V_0_vld_out, output_V_data_V_1_ack_in, ap_CS_fsm_pp0_stage0, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, p_036_2_0_reg_89, ap_block_pp0_stage0_11001)
    begin
        if ((((output_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (p_036_2_0_reg_89 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((output_V_data_V_1_ack_in = ap_const_logic_0) or (input_V_data_V_0_vld_out = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            output_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            output_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_V_data_V_1_vld_out <= output_V_data_V_1_state(0);
    output_V_keep_V_1_ack_in <= output_V_keep_V_1_state(1);
    output_V_keep_V_1_ack_out <= g2N_output_TREADY;

    output_V_keep_V_1_data_in_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, input_V_data_V_0_vld_out, ap_CS_fsm_pp0_stage0, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, p_036_2_0_reg_89, tmp_keep_V_reg_158, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (p_036_2_0_reg_89 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_V_keep_V_1_data_in <= tmp_keep_V_reg_158;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((input_V_data_V_0_vld_out = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            output_V_keep_V_1_data_in <= ap_const_lv64_FFFFFFFFFFFFFFFF;
        else 
            output_V_keep_V_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_V_keep_V_1_data_out_assign_proc : process(output_V_keep_V_1_payload_A, output_V_keep_V_1_payload_B, output_V_keep_V_1_sel)
    begin
        if ((output_V_keep_V_1_sel = ap_const_logic_1)) then 
            output_V_keep_V_1_data_out <= output_V_keep_V_1_payload_B;
        else 
            output_V_keep_V_1_data_out <= output_V_keep_V_1_payload_A;
        end if; 
    end process;

    output_V_keep_V_1_load_A <= (output_V_keep_V_1_state_cmp_full and not(output_V_keep_V_1_sel_wr));
    output_V_keep_V_1_load_B <= (output_V_keep_V_1_state_cmp_full and output_V_keep_V_1_sel_wr);
    output_V_keep_V_1_sel <= output_V_keep_V_1_sel_rd;
    output_V_keep_V_1_state_cmp_full <= '0' when (output_V_keep_V_1_state = ap_const_lv2_1) else '1';

    output_V_keep_V_1_vld_in_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, input_V_data_V_0_vld_out, output_V_data_V_1_ack_in, ap_CS_fsm_pp0_stage0, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, p_036_2_0_reg_89, ap_block_pp0_stage0_11001)
    begin
        if ((((output_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (p_036_2_0_reg_89 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((output_V_data_V_1_ack_in = ap_const_logic_0) or (input_V_data_V_0_vld_out = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            output_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            output_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_V_keep_V_1_vld_out <= output_V_keep_V_1_state(0);
    output_V_last_V_1_ack_in <= output_V_last_V_1_state(1);
    output_V_last_V_1_ack_out <= g2N_output_TREADY;

    output_V_last_V_1_data_in_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, input_V_data_V_0_vld_out, ap_CS_fsm_pp0_stage0, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, p_036_2_0_reg_89, tmp_last_V_reg_141, tmp_last_V_2_reg_152, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (p_036_2_0_reg_89 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_V_last_V_1_data_in <= tmp_last_V_2_reg_152;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_V_last_V_1_data_in <= tmp_last_V_reg_141;
        elsif ((not(((input_V_data_V_0_vld_out = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            output_V_last_V_1_data_in <= ap_const_lv1_0;
        else 
            output_V_last_V_1_data_in <= "X";
        end if; 
    end process;


    output_V_last_V_1_data_out_assign_proc : process(output_V_last_V_1_payload_A, output_V_last_V_1_payload_B, output_V_last_V_1_sel)
    begin
        if ((output_V_last_V_1_sel = ap_const_logic_1)) then 
            output_V_last_V_1_data_out <= output_V_last_V_1_payload_B;
        else 
            output_V_last_V_1_data_out <= output_V_last_V_1_payload_A;
        end if; 
    end process;

    output_V_last_V_1_load_A <= (output_V_last_V_1_state_cmp_full and not(output_V_last_V_1_sel_wr));
    output_V_last_V_1_load_B <= (output_V_last_V_1_state_cmp_full and output_V_last_V_1_sel_wr);
    output_V_last_V_1_sel <= output_V_last_V_1_sel_rd;
    output_V_last_V_1_state_cmp_full <= '0' when (output_V_last_V_1_state = ap_const_lv2_1) else '1';

    output_V_last_V_1_vld_in_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, input_V_data_V_0_vld_out, output_V_data_V_1_ack_in, ap_CS_fsm_pp0_stage0, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, p_036_2_0_reg_89, ap_block_pp0_stage0_11001)
    begin
        if ((((output_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (p_036_2_0_reg_89 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((output_V_data_V_1_ack_in = ap_const_logic_0) or (input_V_data_V_0_vld_out = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            output_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            output_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_V_last_V_1_vld_out <= output_V_last_V_1_state(0);
    output_V_user_V_1_ack_out <= g2N_output_TREADY;
    output_V_user_V_1_data_out <= ap_const_lv16_0;
    output_V_user_V_1_sel <= output_V_user_V_1_sel_rd;

    output_V_user_V_1_vld_in_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, input_V_data_V_0_vld_out, output_V_data_V_1_ack_in, ap_CS_fsm_pp0_stage0, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, p_036_2_0_reg_89, ap_block_pp0_stage0_11001)
    begin
        if ((((output_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (p_036_2_0_reg_89 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((output_V_data_V_1_ack_in = ap_const_logic_0) or (input_V_data_V_0_vld_out = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            output_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            output_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_V_user_V_1_vld_out <= output_V_user_V_1_state(0);
    p_Result_s_fu_124_p5 <= (((ap_const_lv480_lc_1 & input_V_dest_V_0_data_out) & input_V_id_V_0_data_out) & input_V_user_V_0_data_out);
end behav;

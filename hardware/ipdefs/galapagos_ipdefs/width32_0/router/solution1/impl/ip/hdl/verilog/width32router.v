// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="width32router,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu19eg-ffvc1760-2-i,HLS_INPUT_CLOCK=3.103000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=3.171000,HLS_SYN_LAT=3,HLS_SYN_TPT=2,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3146,HLS_SYN_LUT=806,HLS_VERSION=2019_1}" *)

module width32router (
        ap_clk,
        ap_rst_n,
        network_table_V_Addr_A,
        network_table_V_EN_A,
        network_table_V_WEN_A,
        network_table_V_Din_A,
        network_table_V_Dout_A,
        network_table_V_Clk_A,
        network_table_V_Rst_A,
        network_addr_V,
        stream_in_TDATA,
        stream_in_TVALID,
        stream_in_TREADY,
        stream_in_TDEST,
        stream_in_TLAST,
        stream_in_TID,
        stream_in_TUSER,
        stream_in_TKEEP,
        stream_out_switch_TDATA,
        stream_out_switch_TVALID,
        stream_out_switch_TREADY,
        stream_out_switch_TDEST,
        stream_out_switch_TLAST,
        stream_out_switch_TID,
        stream_out_switch_TUSER,
        stream_out_switch_TKEEP,
        stream_out_network_TDATA,
        stream_out_network_TVALID,
        stream_out_network_TREADY,
        stream_out_network_TDEST,
        stream_out_network_TLAST,
        stream_out_network_TID,
        stream_out_network_TUSER,
        stream_out_network_TKEEP,
        addr_out_V,
        addr_out_V_ap_vld,
        state_out,
        state_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst_n;
output  [31:0] network_table_V_Addr_A;
output   network_table_V_EN_A;
output  [3:0] network_table_V_WEN_A;
output  [31:0] network_table_V_Din_A;
input  [31:0] network_table_V_Dout_A;
output   network_table_V_Clk_A;
output   network_table_V_Rst_A;
input  [31:0] network_addr_V;
input  [511:0] stream_in_TDATA;
input   stream_in_TVALID;
output   stream_in_TREADY;
input  [7:0] stream_in_TDEST;
input  [0:0] stream_in_TLAST;
input  [7:0] stream_in_TID;
input  [15:0] stream_in_TUSER;
input  [63:0] stream_in_TKEEP;
output  [511:0] stream_out_switch_TDATA;
output   stream_out_switch_TVALID;
input   stream_out_switch_TREADY;
output  [7:0] stream_out_switch_TDEST;
output  [0:0] stream_out_switch_TLAST;
output  [7:0] stream_out_switch_TID;
output  [15:0] stream_out_switch_TUSER;
output  [63:0] stream_out_switch_TKEEP;
output  [511:0] stream_out_network_TDATA;
output   stream_out_network_TVALID;
input   stream_out_network_TREADY;
output  [7:0] stream_out_network_TDEST;
output  [0:0] stream_out_network_TLAST;
output  [7:0] stream_out_network_TID;
output  [15:0] stream_out_network_TUSER;
output  [63:0] stream_out_network_TKEEP;
output  [31:0] addr_out_V;
output   addr_out_V_ap_vld;
output  [31:0] state_out;
output   state_out_ap_vld;

reg network_table_V_EN_A;
reg network_table_V_Rst_A;
reg stream_in_TREADY;
reg addr_out_V_ap_vld;
reg state_out_ap_vld;

 reg    ap_rst_n_inv;
reg   [511:0] stream_out_switch_V_data_V_1_data_in;
reg   [511:0] stream_out_switch_V_data_V_1_data_out;
reg    stream_out_switch_V_data_V_1_vld_in;
wire    stream_out_switch_V_data_V_1_vld_out;
wire    stream_out_switch_V_data_V_1_ack_in;
wire    stream_out_switch_V_data_V_1_ack_out;
reg   [511:0] stream_out_switch_V_data_V_1_payload_A;
reg   [511:0] stream_out_switch_V_data_V_1_payload_B;
reg    stream_out_switch_V_data_V_1_sel_rd;
reg    stream_out_switch_V_data_V_1_sel_wr;
wire    stream_out_switch_V_data_V_1_sel;
wire    stream_out_switch_V_data_V_1_load_A;
wire    stream_out_switch_V_data_V_1_load_B;
reg   [1:0] stream_out_switch_V_data_V_1_state;
wire    stream_out_switch_V_data_V_1_state_cmp_full;
reg   [7:0] stream_out_switch_V_dest_V_1_data_in;
reg   [7:0] stream_out_switch_V_dest_V_1_data_out;
reg    stream_out_switch_V_dest_V_1_vld_in;
wire    stream_out_switch_V_dest_V_1_vld_out;
wire    stream_out_switch_V_dest_V_1_ack_in;
wire    stream_out_switch_V_dest_V_1_ack_out;
reg   [7:0] stream_out_switch_V_dest_V_1_payload_A;
reg   [7:0] stream_out_switch_V_dest_V_1_payload_B;
reg    stream_out_switch_V_dest_V_1_sel_rd;
reg    stream_out_switch_V_dest_V_1_sel_wr;
wire    stream_out_switch_V_dest_V_1_sel;
wire    stream_out_switch_V_dest_V_1_load_A;
wire    stream_out_switch_V_dest_V_1_load_B;
reg   [1:0] stream_out_switch_V_dest_V_1_state;
wire    stream_out_switch_V_dest_V_1_state_cmp_full;
reg   [0:0] stream_out_switch_V_last_V_1_data_in;
reg   [0:0] stream_out_switch_V_last_V_1_data_out;
reg    stream_out_switch_V_last_V_1_vld_in;
wire    stream_out_switch_V_last_V_1_vld_out;
wire    stream_out_switch_V_last_V_1_ack_in;
wire    stream_out_switch_V_last_V_1_ack_out;
reg   [0:0] stream_out_switch_V_last_V_1_payload_A;
reg   [0:0] stream_out_switch_V_last_V_1_payload_B;
reg    stream_out_switch_V_last_V_1_sel_rd;
reg    stream_out_switch_V_last_V_1_sel_wr;
wire    stream_out_switch_V_last_V_1_sel;
wire    stream_out_switch_V_last_V_1_load_A;
wire    stream_out_switch_V_last_V_1_load_B;
reg   [1:0] stream_out_switch_V_last_V_1_state;
wire    stream_out_switch_V_last_V_1_state_cmp_full;
reg   [7:0] stream_out_switch_V_id_V_1_data_in;
reg   [7:0] stream_out_switch_V_id_V_1_data_out;
reg    stream_out_switch_V_id_V_1_vld_in;
wire    stream_out_switch_V_id_V_1_vld_out;
wire    stream_out_switch_V_id_V_1_ack_in;
wire    stream_out_switch_V_id_V_1_ack_out;
reg   [7:0] stream_out_switch_V_id_V_1_payload_A;
reg   [7:0] stream_out_switch_V_id_V_1_payload_B;
reg    stream_out_switch_V_id_V_1_sel_rd;
reg    stream_out_switch_V_id_V_1_sel_wr;
wire    stream_out_switch_V_id_V_1_sel;
wire    stream_out_switch_V_id_V_1_load_A;
wire    stream_out_switch_V_id_V_1_load_B;
reg   [1:0] stream_out_switch_V_id_V_1_state;
wire    stream_out_switch_V_id_V_1_state_cmp_full;
reg   [15:0] stream_out_switch_V_user_V_1_data_in;
reg   [15:0] stream_out_switch_V_user_V_1_data_out;
reg    stream_out_switch_V_user_V_1_vld_in;
wire    stream_out_switch_V_user_V_1_vld_out;
wire    stream_out_switch_V_user_V_1_ack_in;
wire    stream_out_switch_V_user_V_1_ack_out;
reg   [15:0] stream_out_switch_V_user_V_1_payload_A;
reg   [15:0] stream_out_switch_V_user_V_1_payload_B;
reg    stream_out_switch_V_user_V_1_sel_rd;
reg    stream_out_switch_V_user_V_1_sel_wr;
wire    stream_out_switch_V_user_V_1_sel;
wire    stream_out_switch_V_user_V_1_load_A;
wire    stream_out_switch_V_user_V_1_load_B;
reg   [1:0] stream_out_switch_V_user_V_1_state;
wire    stream_out_switch_V_user_V_1_state_cmp_full;
reg   [63:0] stream_out_switch_V_keep_V_1_data_in;
reg   [63:0] stream_out_switch_V_keep_V_1_data_out;
reg    stream_out_switch_V_keep_V_1_vld_in;
wire    stream_out_switch_V_keep_V_1_vld_out;
wire    stream_out_switch_V_keep_V_1_ack_in;
wire    stream_out_switch_V_keep_V_1_ack_out;
reg   [63:0] stream_out_switch_V_keep_V_1_payload_A;
reg   [63:0] stream_out_switch_V_keep_V_1_payload_B;
reg    stream_out_switch_V_keep_V_1_sel_rd;
reg    stream_out_switch_V_keep_V_1_sel_wr;
wire    stream_out_switch_V_keep_V_1_sel;
wire    stream_out_switch_V_keep_V_1_load_A;
wire    stream_out_switch_V_keep_V_1_load_B;
reg   [1:0] stream_out_switch_V_keep_V_1_state;
wire    stream_out_switch_V_keep_V_1_state_cmp_full;
reg   [511:0] stream_out_network_V_data_V_1_data_in;
reg   [511:0] stream_out_network_V_data_V_1_data_out;
reg    stream_out_network_V_data_V_1_vld_in;
wire    stream_out_network_V_data_V_1_vld_out;
wire    stream_out_network_V_data_V_1_ack_in;
wire    stream_out_network_V_data_V_1_ack_out;
reg   [511:0] stream_out_network_V_data_V_1_payload_A;
reg   [511:0] stream_out_network_V_data_V_1_payload_B;
reg    stream_out_network_V_data_V_1_sel_rd;
reg    stream_out_network_V_data_V_1_sel_wr;
wire    stream_out_network_V_data_V_1_sel;
wire    stream_out_network_V_data_V_1_load_A;
wire    stream_out_network_V_data_V_1_load_B;
reg   [1:0] stream_out_network_V_data_V_1_state;
wire    stream_out_network_V_data_V_1_state_cmp_full;
reg   [7:0] stream_out_network_V_dest_V_1_data_in;
reg   [7:0] stream_out_network_V_dest_V_1_data_out;
reg    stream_out_network_V_dest_V_1_vld_in;
wire    stream_out_network_V_dest_V_1_vld_out;
wire    stream_out_network_V_dest_V_1_ack_in;
wire    stream_out_network_V_dest_V_1_ack_out;
reg   [7:0] stream_out_network_V_dest_V_1_payload_A;
reg   [7:0] stream_out_network_V_dest_V_1_payload_B;
reg    stream_out_network_V_dest_V_1_sel_rd;
reg    stream_out_network_V_dest_V_1_sel_wr;
wire    stream_out_network_V_dest_V_1_sel;
wire    stream_out_network_V_dest_V_1_load_A;
wire    stream_out_network_V_dest_V_1_load_B;
reg   [1:0] stream_out_network_V_dest_V_1_state;
wire    stream_out_network_V_dest_V_1_state_cmp_full;
reg   [0:0] stream_out_network_V_last_V_1_data_in;
reg   [0:0] stream_out_network_V_last_V_1_data_out;
reg    stream_out_network_V_last_V_1_vld_in;
wire    stream_out_network_V_last_V_1_vld_out;
wire    stream_out_network_V_last_V_1_ack_in;
wire    stream_out_network_V_last_V_1_ack_out;
reg   [0:0] stream_out_network_V_last_V_1_payload_A;
reg   [0:0] stream_out_network_V_last_V_1_payload_B;
reg    stream_out_network_V_last_V_1_sel_rd;
reg    stream_out_network_V_last_V_1_sel_wr;
wire    stream_out_network_V_last_V_1_sel;
wire    stream_out_network_V_last_V_1_load_A;
wire    stream_out_network_V_last_V_1_load_B;
reg   [1:0] stream_out_network_V_last_V_1_state;
wire    stream_out_network_V_last_V_1_state_cmp_full;
reg   [7:0] stream_out_network_V_id_V_1_data_in;
reg   [7:0] stream_out_network_V_id_V_1_data_out;
reg    stream_out_network_V_id_V_1_vld_in;
wire    stream_out_network_V_id_V_1_vld_out;
wire    stream_out_network_V_id_V_1_ack_in;
wire    stream_out_network_V_id_V_1_ack_out;
reg   [7:0] stream_out_network_V_id_V_1_payload_A;
reg   [7:0] stream_out_network_V_id_V_1_payload_B;
reg    stream_out_network_V_id_V_1_sel_rd;
reg    stream_out_network_V_id_V_1_sel_wr;
wire    stream_out_network_V_id_V_1_sel;
wire    stream_out_network_V_id_V_1_load_A;
wire    stream_out_network_V_id_V_1_load_B;
reg   [1:0] stream_out_network_V_id_V_1_state;
wire    stream_out_network_V_id_V_1_state_cmp_full;
reg   [15:0] stream_out_network_V_user_V_1_data_in;
reg   [15:0] stream_out_network_V_user_V_1_data_out;
reg    stream_out_network_V_user_V_1_vld_in;
wire    stream_out_network_V_user_V_1_vld_out;
wire    stream_out_network_V_user_V_1_ack_in;
wire    stream_out_network_V_user_V_1_ack_out;
reg   [15:0] stream_out_network_V_user_V_1_payload_A;
reg   [15:0] stream_out_network_V_user_V_1_payload_B;
reg    stream_out_network_V_user_V_1_sel_rd;
reg    stream_out_network_V_user_V_1_sel_wr;
wire    stream_out_network_V_user_V_1_sel;
wire    stream_out_network_V_user_V_1_load_A;
wire    stream_out_network_V_user_V_1_load_B;
reg   [1:0] stream_out_network_V_user_V_1_state;
wire    stream_out_network_V_user_V_1_state_cmp_full;
reg   [63:0] stream_out_network_V_keep_V_1_data_in;
reg   [63:0] stream_out_network_V_keep_V_1_data_out;
reg    stream_out_network_V_keep_V_1_vld_in;
wire    stream_out_network_V_keep_V_1_vld_out;
wire    stream_out_network_V_keep_V_1_ack_in;
wire    stream_out_network_V_keep_V_1_ack_out;
reg   [63:0] stream_out_network_V_keep_V_1_payload_A;
reg   [63:0] stream_out_network_V_keep_V_1_payload_B;
reg    stream_out_network_V_keep_V_1_sel_rd;
reg    stream_out_network_V_keep_V_1_sel_wr;
wire    stream_out_network_V_keep_V_1_sel;
wire    stream_out_network_V_keep_V_1_load_A;
wire    stream_out_network_V_keep_V_1_load_B;
reg   [1:0] stream_out_network_V_keep_V_1_state;
wire    stream_out_network_V_keep_V_1_state_cmp_full;
reg   [1:0] sinkState;
reg    stream_in_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
wire   [1:0] sinkState_load_load_fu_331_p1;
wire   [0:0] grp_nbreadreq_fu_94_p8;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg   [1:0] sinkState_load_reg_389;
reg   [0:0] tmp_1_reg_397;
reg   [0:0] tmp_2_reg_393;
reg    stream_out_switch_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] tmp_reg_401;
reg   [0:0] icmp_ln879_reg_463;
reg   [1:0] sinkState_load_reg_389_pp0_iter1_reg;
reg   [0:0] tmp_reg_401_pp0_iter1_reg;
reg    stream_out_network_TDATA_blk_n;
reg    ap_predicate_op22_read_state2;
reg    ap_predicate_op33_read_state2;
reg    ap_block_state2_pp0_stage1_iter0;
reg    ap_predicate_op32_write_state2;
reg    ap_predicate_op43_write_state2;
reg    ap_block_state2_io;
reg    ap_block_state4_pp0_stage1_iter1;
reg    ap_predicate_op96_write_state4;
reg    ap_predicate_op98_write_state4;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage1_11001;
reg    ap_predicate_op10_read_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_predicate_op54_write_state3;
reg    ap_predicate_op59_write_state3;
reg    ap_predicate_op63_write_state3;
reg    ap_predicate_op64_write_state3;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
reg   [511:0] tmp_data_V_reg_405;
reg   [7:0] tmp_dest_V_reg_411;
wire   [0:0] grp_fu_271_p1;
reg   [0:0] tmp_last_V_reg_417;
reg   [7:0] tmp_id_V_reg_425;
reg   [15:0] tmp_user_V_reg_431;
reg   [63:0] tmp_keep_V_reg_437;
reg   [31:0] network_addr_in_V_reg_458;
wire   [0:0] icmp_ln879_fu_348_p2;
wire   [1:0] select_ln321_1_fu_366_p3;
reg   [1:0] select_ln321_1_reg_467;
wire   [1:0] zext_ln160_fu_380_p1;
reg    ap_block_pp0_stage1_subdone;
wire   [1:0] ap_phi_reg_pp0_iter0_sinkState_load_14_reg_205;
reg   [1:0] ap_phi_reg_pp0_iter1_sinkState_load_14_reg_205;
wire   [0:0] ap_phi_reg_pp0_iter0_sinkState_load_16_reg_219;
reg   [0:0] ap_phi_reg_pp0_iter1_sinkState_load_16_reg_219;
wire   [1:0] ap_phi_reg_pp0_iter0_sinkState_load_1_reg_232;
reg   [1:0] ap_phi_reg_pp0_iter1_sinkState_load_1_reg_232;
wire   [63:0] zext_ln162_fu_343_p1;
reg    ap_block_pp0_stage1_01001;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] network_table_V_Addr_A_orig;
wire   [9:0] shl_ln_fu_335_p3;
wire   [0:0] or_ln321_fu_361_p2;
wire   [1:0] select_ln321_fu_354_p3;
reg   [1:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_982;
reg    ap_condition_986;
reg    ap_condition_891;
reg    ap_condition_991;
reg    ap_condition_993;

// power-on initialization
initial begin
#0 stream_out_switch_V_data_V_1_sel_rd = 1'b0;
#0 stream_out_switch_V_data_V_1_sel_wr = 1'b0;
#0 stream_out_switch_V_data_V_1_state = 2'd0;
#0 stream_out_switch_V_dest_V_1_sel_rd = 1'b0;
#0 stream_out_switch_V_dest_V_1_sel_wr = 1'b0;
#0 stream_out_switch_V_dest_V_1_state = 2'd0;
#0 stream_out_switch_V_last_V_1_sel_rd = 1'b0;
#0 stream_out_switch_V_last_V_1_sel_wr = 1'b0;
#0 stream_out_switch_V_last_V_1_state = 2'd0;
#0 stream_out_switch_V_id_V_1_sel_rd = 1'b0;
#0 stream_out_switch_V_id_V_1_sel_wr = 1'b0;
#0 stream_out_switch_V_id_V_1_state = 2'd0;
#0 stream_out_switch_V_user_V_1_sel_rd = 1'b0;
#0 stream_out_switch_V_user_V_1_sel_wr = 1'b0;
#0 stream_out_switch_V_user_V_1_state = 2'd0;
#0 stream_out_switch_V_keep_V_1_sel_rd = 1'b0;
#0 stream_out_switch_V_keep_V_1_sel_wr = 1'b0;
#0 stream_out_switch_V_keep_V_1_state = 2'd0;
#0 stream_out_network_V_data_V_1_sel_rd = 1'b0;
#0 stream_out_network_V_data_V_1_sel_wr = 1'b0;
#0 stream_out_network_V_data_V_1_state = 2'd0;
#0 stream_out_network_V_dest_V_1_sel_rd = 1'b0;
#0 stream_out_network_V_dest_V_1_sel_wr = 1'b0;
#0 stream_out_network_V_dest_V_1_state = 2'd0;
#0 stream_out_network_V_last_V_1_sel_rd = 1'b0;
#0 stream_out_network_V_last_V_1_sel_wr = 1'b0;
#0 stream_out_network_V_last_V_1_state = 2'd0;
#0 stream_out_network_V_id_V_1_sel_rd = 1'b0;
#0 stream_out_network_V_id_V_1_sel_wr = 1'b0;
#0 stream_out_network_V_id_V_1_state = 2'd0;
#0 stream_out_network_V_user_V_1_sel_rd = 1'b0;
#0 stream_out_network_V_user_V_1_sel_wr = 1'b0;
#0 stream_out_network_V_user_V_1_state = 2'd0;
#0 stream_out_network_V_keep_V_1_sel_rd = 1'b0;
#0 stream_out_network_V_keep_V_1_sel_wr = 1'b0;
#0 stream_out_network_V_keep_V_1_state = 2'd0;
#0 sinkState = 2'd0;
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_network_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_network_V_data_V_1_ack_out == 1'b1) & (stream_out_network_V_data_V_1_vld_out == 1'b1))) begin
            stream_out_network_V_data_V_1_sel_rd <= ~stream_out_network_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_network_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_network_V_data_V_1_ack_in == 1'b1) & (stream_out_network_V_data_V_1_vld_in == 1'b1))) begin
            stream_out_network_V_data_V_1_sel_wr <= ~stream_out_network_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_network_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_network_V_data_V_1_state == 2'd2) & (stream_out_network_V_data_V_1_vld_in == 1'b0)) | ((stream_out_network_V_data_V_1_state == 2'd3) & (stream_out_network_V_data_V_1_vld_in == 1'b0) & (stream_out_network_V_data_V_1_ack_out == 1'b1)))) begin
            stream_out_network_V_data_V_1_state <= 2'd2;
        end else if ((((stream_out_network_V_data_V_1_state == 2'd1) & (stream_out_network_TREADY == 1'b0)) | ((stream_out_network_V_data_V_1_state == 2'd3) & (stream_out_network_TREADY == 1'b0) & (stream_out_network_V_data_V_1_vld_in == 1'b1)))) begin
            stream_out_network_V_data_V_1_state <= 2'd1;
        end else if (((~((stream_out_network_V_data_V_1_vld_in == 1'b0) & (stream_out_network_V_data_V_1_ack_out == 1'b1)) & ~((stream_out_network_TREADY == 1'b0) & (stream_out_network_V_data_V_1_vld_in == 1'b1)) & (stream_out_network_V_data_V_1_state == 2'd3)) | ((stream_out_network_V_data_V_1_state == 2'd1) & (stream_out_network_V_data_V_1_ack_out == 1'b1)) | ((stream_out_network_V_data_V_1_state == 2'd2) & (stream_out_network_V_data_V_1_vld_in == 1'b1)))) begin
            stream_out_network_V_data_V_1_state <= 2'd3;
        end else begin
            stream_out_network_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_network_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_network_V_dest_V_1_ack_out == 1'b1) & (stream_out_network_V_dest_V_1_vld_out == 1'b1))) begin
            stream_out_network_V_dest_V_1_sel_rd <= ~stream_out_network_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_network_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_network_V_dest_V_1_ack_in == 1'b1) & (stream_out_network_V_dest_V_1_vld_in == 1'b1))) begin
            stream_out_network_V_dest_V_1_sel_wr <= ~stream_out_network_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_network_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_network_V_dest_V_1_state == 2'd2) & (stream_out_network_V_dest_V_1_vld_in == 1'b0)) | ((stream_out_network_V_dest_V_1_state == 2'd3) & (stream_out_network_V_dest_V_1_vld_in == 1'b0) & (stream_out_network_V_dest_V_1_ack_out == 1'b1)))) begin
            stream_out_network_V_dest_V_1_state <= 2'd2;
        end else if ((((stream_out_network_V_dest_V_1_state == 2'd1) & (stream_out_network_TREADY == 1'b0)) | ((stream_out_network_V_dest_V_1_state == 2'd3) & (stream_out_network_TREADY == 1'b0) & (stream_out_network_V_dest_V_1_vld_in == 1'b1)))) begin
            stream_out_network_V_dest_V_1_state <= 2'd1;
        end else if (((~((stream_out_network_V_dest_V_1_vld_in == 1'b0) & (stream_out_network_V_dest_V_1_ack_out == 1'b1)) & ~((stream_out_network_TREADY == 1'b0) & (stream_out_network_V_dest_V_1_vld_in == 1'b1)) & (stream_out_network_V_dest_V_1_state == 2'd3)) | ((stream_out_network_V_dest_V_1_state == 2'd1) & (stream_out_network_V_dest_V_1_ack_out == 1'b1)) | ((stream_out_network_V_dest_V_1_state == 2'd2) & (stream_out_network_V_dest_V_1_vld_in == 1'b1)))) begin
            stream_out_network_V_dest_V_1_state <= 2'd3;
        end else begin
            stream_out_network_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_network_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_network_V_id_V_1_ack_out == 1'b1) & (stream_out_network_V_id_V_1_vld_out == 1'b1))) begin
            stream_out_network_V_id_V_1_sel_rd <= ~stream_out_network_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_network_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_network_V_id_V_1_ack_in == 1'b1) & (stream_out_network_V_id_V_1_vld_in == 1'b1))) begin
            stream_out_network_V_id_V_1_sel_wr <= ~stream_out_network_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_network_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_network_V_id_V_1_state == 2'd2) & (stream_out_network_V_id_V_1_vld_in == 1'b0)) | ((stream_out_network_V_id_V_1_state == 2'd3) & (stream_out_network_V_id_V_1_vld_in == 1'b0) & (stream_out_network_V_id_V_1_ack_out == 1'b1)))) begin
            stream_out_network_V_id_V_1_state <= 2'd2;
        end else if ((((stream_out_network_V_id_V_1_state == 2'd1) & (stream_out_network_TREADY == 1'b0)) | ((stream_out_network_V_id_V_1_state == 2'd3) & (stream_out_network_TREADY == 1'b0) & (stream_out_network_V_id_V_1_vld_in == 1'b1)))) begin
            stream_out_network_V_id_V_1_state <= 2'd1;
        end else if (((~((stream_out_network_V_id_V_1_vld_in == 1'b0) & (stream_out_network_V_id_V_1_ack_out == 1'b1)) & ~((stream_out_network_TREADY == 1'b0) & (stream_out_network_V_id_V_1_vld_in == 1'b1)) & (stream_out_network_V_id_V_1_state == 2'd3)) | ((stream_out_network_V_id_V_1_state == 2'd1) & (stream_out_network_V_id_V_1_ack_out == 1'b1)) | ((stream_out_network_V_id_V_1_state == 2'd2) & (stream_out_network_V_id_V_1_vld_in == 1'b1)))) begin
            stream_out_network_V_id_V_1_state <= 2'd3;
        end else begin
            stream_out_network_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_network_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_network_V_keep_V_1_ack_out == 1'b1) & (stream_out_network_V_keep_V_1_vld_out == 1'b1))) begin
            stream_out_network_V_keep_V_1_sel_rd <= ~stream_out_network_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_network_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_network_V_keep_V_1_ack_in == 1'b1) & (stream_out_network_V_keep_V_1_vld_in == 1'b1))) begin
            stream_out_network_V_keep_V_1_sel_wr <= ~stream_out_network_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_network_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_network_V_keep_V_1_state == 2'd2) & (stream_out_network_V_keep_V_1_vld_in == 1'b0)) | ((stream_out_network_V_keep_V_1_state == 2'd3) & (stream_out_network_V_keep_V_1_vld_in == 1'b0) & (stream_out_network_V_keep_V_1_ack_out == 1'b1)))) begin
            stream_out_network_V_keep_V_1_state <= 2'd2;
        end else if ((((stream_out_network_V_keep_V_1_state == 2'd1) & (stream_out_network_TREADY == 1'b0)) | ((stream_out_network_V_keep_V_1_state == 2'd3) & (stream_out_network_TREADY == 1'b0) & (stream_out_network_V_keep_V_1_vld_in == 1'b1)))) begin
            stream_out_network_V_keep_V_1_state <= 2'd1;
        end else if (((~((stream_out_network_V_keep_V_1_vld_in == 1'b0) & (stream_out_network_V_keep_V_1_ack_out == 1'b1)) & ~((stream_out_network_TREADY == 1'b0) & (stream_out_network_V_keep_V_1_vld_in == 1'b1)) & (stream_out_network_V_keep_V_1_state == 2'd3)) | ((stream_out_network_V_keep_V_1_state == 2'd1) & (stream_out_network_V_keep_V_1_ack_out == 1'b1)) | ((stream_out_network_V_keep_V_1_state == 2'd2) & (stream_out_network_V_keep_V_1_vld_in == 1'b1)))) begin
            stream_out_network_V_keep_V_1_state <= 2'd3;
        end else begin
            stream_out_network_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_network_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_network_V_last_V_1_ack_out == 1'b1) & (stream_out_network_V_last_V_1_vld_out == 1'b1))) begin
            stream_out_network_V_last_V_1_sel_rd <= ~stream_out_network_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_network_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_network_V_last_V_1_ack_in == 1'b1) & (stream_out_network_V_last_V_1_vld_in == 1'b1))) begin
            stream_out_network_V_last_V_1_sel_wr <= ~stream_out_network_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_network_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_network_V_last_V_1_state == 2'd2) & (stream_out_network_V_last_V_1_vld_in == 1'b0)) | ((stream_out_network_V_last_V_1_state == 2'd3) & (stream_out_network_V_last_V_1_vld_in == 1'b0) & (stream_out_network_V_last_V_1_ack_out == 1'b1)))) begin
            stream_out_network_V_last_V_1_state <= 2'd2;
        end else if ((((stream_out_network_V_last_V_1_state == 2'd1) & (stream_out_network_TREADY == 1'b0)) | ((stream_out_network_V_last_V_1_state == 2'd3) & (stream_out_network_TREADY == 1'b0) & (stream_out_network_V_last_V_1_vld_in == 1'b1)))) begin
            stream_out_network_V_last_V_1_state <= 2'd1;
        end else if (((~((stream_out_network_V_last_V_1_vld_in == 1'b0) & (stream_out_network_V_last_V_1_ack_out == 1'b1)) & ~((stream_out_network_TREADY == 1'b0) & (stream_out_network_V_last_V_1_vld_in == 1'b1)) & (stream_out_network_V_last_V_1_state == 2'd3)) | ((stream_out_network_V_last_V_1_state == 2'd1) & (stream_out_network_V_last_V_1_ack_out == 1'b1)) | ((stream_out_network_V_last_V_1_state == 2'd2) & (stream_out_network_V_last_V_1_vld_in == 1'b1)))) begin
            stream_out_network_V_last_V_1_state <= 2'd3;
        end else begin
            stream_out_network_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_network_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_network_V_user_V_1_ack_out == 1'b1) & (stream_out_network_V_user_V_1_vld_out == 1'b1))) begin
            stream_out_network_V_user_V_1_sel_rd <= ~stream_out_network_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_network_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_network_V_user_V_1_ack_in == 1'b1) & (stream_out_network_V_user_V_1_vld_in == 1'b1))) begin
            stream_out_network_V_user_V_1_sel_wr <= ~stream_out_network_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_network_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_network_V_user_V_1_state == 2'd2) & (stream_out_network_V_user_V_1_vld_in == 1'b0)) | ((stream_out_network_V_user_V_1_state == 2'd3) & (stream_out_network_V_user_V_1_vld_in == 1'b0) & (stream_out_network_V_user_V_1_ack_out == 1'b1)))) begin
            stream_out_network_V_user_V_1_state <= 2'd2;
        end else if ((((stream_out_network_V_user_V_1_state == 2'd1) & (stream_out_network_TREADY == 1'b0)) | ((stream_out_network_V_user_V_1_state == 2'd3) & (stream_out_network_TREADY == 1'b0) & (stream_out_network_V_user_V_1_vld_in == 1'b1)))) begin
            stream_out_network_V_user_V_1_state <= 2'd1;
        end else if (((~((stream_out_network_V_user_V_1_vld_in == 1'b0) & (stream_out_network_V_user_V_1_ack_out == 1'b1)) & ~((stream_out_network_TREADY == 1'b0) & (stream_out_network_V_user_V_1_vld_in == 1'b1)) & (stream_out_network_V_user_V_1_state == 2'd3)) | ((stream_out_network_V_user_V_1_state == 2'd1) & (stream_out_network_V_user_V_1_ack_out == 1'b1)) | ((stream_out_network_V_user_V_1_state == 2'd2) & (stream_out_network_V_user_V_1_vld_in == 1'b1)))) begin
            stream_out_network_V_user_V_1_state <= 2'd3;
        end else begin
            stream_out_network_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_switch_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_switch_V_data_V_1_ack_out == 1'b1) & (stream_out_switch_V_data_V_1_vld_out == 1'b1))) begin
            stream_out_switch_V_data_V_1_sel_rd <= ~stream_out_switch_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_switch_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_switch_V_data_V_1_ack_in == 1'b1) & (stream_out_switch_V_data_V_1_vld_in == 1'b1))) begin
            stream_out_switch_V_data_V_1_sel_wr <= ~stream_out_switch_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_switch_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_switch_V_data_V_1_state == 2'd2) & (stream_out_switch_V_data_V_1_vld_in == 1'b0)) | ((stream_out_switch_V_data_V_1_state == 2'd3) & (stream_out_switch_V_data_V_1_vld_in == 1'b0) & (stream_out_switch_V_data_V_1_ack_out == 1'b1)))) begin
            stream_out_switch_V_data_V_1_state <= 2'd2;
        end else if ((((stream_out_switch_V_data_V_1_state == 2'd1) & (stream_out_switch_TREADY == 1'b0)) | ((stream_out_switch_V_data_V_1_state == 2'd3) & (stream_out_switch_TREADY == 1'b0) & (stream_out_switch_V_data_V_1_vld_in == 1'b1)))) begin
            stream_out_switch_V_data_V_1_state <= 2'd1;
        end else if (((~((stream_out_switch_V_data_V_1_vld_in == 1'b0) & (stream_out_switch_V_data_V_1_ack_out == 1'b1)) & ~((stream_out_switch_TREADY == 1'b0) & (stream_out_switch_V_data_V_1_vld_in == 1'b1)) & (stream_out_switch_V_data_V_1_state == 2'd3)) | ((stream_out_switch_V_data_V_1_state == 2'd1) & (stream_out_switch_V_data_V_1_ack_out == 1'b1)) | ((stream_out_switch_V_data_V_1_state == 2'd2) & (stream_out_switch_V_data_V_1_vld_in == 1'b1)))) begin
            stream_out_switch_V_data_V_1_state <= 2'd3;
        end else begin
            stream_out_switch_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_switch_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_switch_V_dest_V_1_ack_out == 1'b1) & (stream_out_switch_V_dest_V_1_vld_out == 1'b1))) begin
            stream_out_switch_V_dest_V_1_sel_rd <= ~stream_out_switch_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_switch_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_switch_V_dest_V_1_ack_in == 1'b1) & (stream_out_switch_V_dest_V_1_vld_in == 1'b1))) begin
            stream_out_switch_V_dest_V_1_sel_wr <= ~stream_out_switch_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_switch_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_switch_V_dest_V_1_state == 2'd2) & (stream_out_switch_V_dest_V_1_vld_in == 1'b0)) | ((stream_out_switch_V_dest_V_1_state == 2'd3) & (stream_out_switch_V_dest_V_1_vld_in == 1'b0) & (stream_out_switch_V_dest_V_1_ack_out == 1'b1)))) begin
            stream_out_switch_V_dest_V_1_state <= 2'd2;
        end else if ((((stream_out_switch_V_dest_V_1_state == 2'd1) & (stream_out_switch_TREADY == 1'b0)) | ((stream_out_switch_V_dest_V_1_state == 2'd3) & (stream_out_switch_TREADY == 1'b0) & (stream_out_switch_V_dest_V_1_vld_in == 1'b1)))) begin
            stream_out_switch_V_dest_V_1_state <= 2'd1;
        end else if (((~((stream_out_switch_V_dest_V_1_vld_in == 1'b0) & (stream_out_switch_V_dest_V_1_ack_out == 1'b1)) & ~((stream_out_switch_TREADY == 1'b0) & (stream_out_switch_V_dest_V_1_vld_in == 1'b1)) & (stream_out_switch_V_dest_V_1_state == 2'd3)) | ((stream_out_switch_V_dest_V_1_state == 2'd1) & (stream_out_switch_V_dest_V_1_ack_out == 1'b1)) | ((stream_out_switch_V_dest_V_1_state == 2'd2) & (stream_out_switch_V_dest_V_1_vld_in == 1'b1)))) begin
            stream_out_switch_V_dest_V_1_state <= 2'd3;
        end else begin
            stream_out_switch_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_switch_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_switch_V_id_V_1_ack_out == 1'b1) & (stream_out_switch_V_id_V_1_vld_out == 1'b1))) begin
            stream_out_switch_V_id_V_1_sel_rd <= ~stream_out_switch_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_switch_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_switch_V_id_V_1_ack_in == 1'b1) & (stream_out_switch_V_id_V_1_vld_in == 1'b1))) begin
            stream_out_switch_V_id_V_1_sel_wr <= ~stream_out_switch_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_switch_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_switch_V_id_V_1_state == 2'd2) & (stream_out_switch_V_id_V_1_vld_in == 1'b0)) | ((stream_out_switch_V_id_V_1_state == 2'd3) & (stream_out_switch_V_id_V_1_vld_in == 1'b0) & (stream_out_switch_V_id_V_1_ack_out == 1'b1)))) begin
            stream_out_switch_V_id_V_1_state <= 2'd2;
        end else if ((((stream_out_switch_V_id_V_1_state == 2'd1) & (stream_out_switch_TREADY == 1'b0)) | ((stream_out_switch_V_id_V_1_state == 2'd3) & (stream_out_switch_TREADY == 1'b0) & (stream_out_switch_V_id_V_1_vld_in == 1'b1)))) begin
            stream_out_switch_V_id_V_1_state <= 2'd1;
        end else if (((~((stream_out_switch_V_id_V_1_vld_in == 1'b0) & (stream_out_switch_V_id_V_1_ack_out == 1'b1)) & ~((stream_out_switch_TREADY == 1'b0) & (stream_out_switch_V_id_V_1_vld_in == 1'b1)) & (stream_out_switch_V_id_V_1_state == 2'd3)) | ((stream_out_switch_V_id_V_1_state == 2'd1) & (stream_out_switch_V_id_V_1_ack_out == 1'b1)) | ((stream_out_switch_V_id_V_1_state == 2'd2) & (stream_out_switch_V_id_V_1_vld_in == 1'b1)))) begin
            stream_out_switch_V_id_V_1_state <= 2'd3;
        end else begin
            stream_out_switch_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_switch_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_switch_V_keep_V_1_ack_out == 1'b1) & (stream_out_switch_V_keep_V_1_vld_out == 1'b1))) begin
            stream_out_switch_V_keep_V_1_sel_rd <= ~stream_out_switch_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_switch_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_switch_V_keep_V_1_ack_in == 1'b1) & (stream_out_switch_V_keep_V_1_vld_in == 1'b1))) begin
            stream_out_switch_V_keep_V_1_sel_wr <= ~stream_out_switch_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_switch_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_switch_V_keep_V_1_state == 2'd2) & (stream_out_switch_V_keep_V_1_vld_in == 1'b0)) | ((stream_out_switch_V_keep_V_1_state == 2'd3) & (stream_out_switch_V_keep_V_1_vld_in == 1'b0) & (stream_out_switch_V_keep_V_1_ack_out == 1'b1)))) begin
            stream_out_switch_V_keep_V_1_state <= 2'd2;
        end else if ((((stream_out_switch_V_keep_V_1_state == 2'd1) & (stream_out_switch_TREADY == 1'b0)) | ((stream_out_switch_V_keep_V_1_state == 2'd3) & (stream_out_switch_TREADY == 1'b0) & (stream_out_switch_V_keep_V_1_vld_in == 1'b1)))) begin
            stream_out_switch_V_keep_V_1_state <= 2'd1;
        end else if (((~((stream_out_switch_V_keep_V_1_vld_in == 1'b0) & (stream_out_switch_V_keep_V_1_ack_out == 1'b1)) & ~((stream_out_switch_TREADY == 1'b0) & (stream_out_switch_V_keep_V_1_vld_in == 1'b1)) & (stream_out_switch_V_keep_V_1_state == 2'd3)) | ((stream_out_switch_V_keep_V_1_state == 2'd1) & (stream_out_switch_V_keep_V_1_ack_out == 1'b1)) | ((stream_out_switch_V_keep_V_1_state == 2'd2) & (stream_out_switch_V_keep_V_1_vld_in == 1'b1)))) begin
            stream_out_switch_V_keep_V_1_state <= 2'd3;
        end else begin
            stream_out_switch_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_switch_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_switch_V_last_V_1_ack_out == 1'b1) & (stream_out_switch_V_last_V_1_vld_out == 1'b1))) begin
            stream_out_switch_V_last_V_1_sel_rd <= ~stream_out_switch_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_switch_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_switch_V_last_V_1_ack_in == 1'b1) & (stream_out_switch_V_last_V_1_vld_in == 1'b1))) begin
            stream_out_switch_V_last_V_1_sel_wr <= ~stream_out_switch_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_switch_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_switch_V_last_V_1_state == 2'd2) & (stream_out_switch_V_last_V_1_vld_in == 1'b0)) | ((stream_out_switch_V_last_V_1_state == 2'd3) & (stream_out_switch_V_last_V_1_vld_in == 1'b0) & (stream_out_switch_V_last_V_1_ack_out == 1'b1)))) begin
            stream_out_switch_V_last_V_1_state <= 2'd2;
        end else if ((((stream_out_switch_V_last_V_1_state == 2'd1) & (stream_out_switch_TREADY == 1'b0)) | ((stream_out_switch_V_last_V_1_state == 2'd3) & (stream_out_switch_TREADY == 1'b0) & (stream_out_switch_V_last_V_1_vld_in == 1'b1)))) begin
            stream_out_switch_V_last_V_1_state <= 2'd1;
        end else if (((~((stream_out_switch_V_last_V_1_vld_in == 1'b0) & (stream_out_switch_V_last_V_1_ack_out == 1'b1)) & ~((stream_out_switch_TREADY == 1'b0) & (stream_out_switch_V_last_V_1_vld_in == 1'b1)) & (stream_out_switch_V_last_V_1_state == 2'd3)) | ((stream_out_switch_V_last_V_1_state == 2'd1) & (stream_out_switch_V_last_V_1_ack_out == 1'b1)) | ((stream_out_switch_V_last_V_1_state == 2'd2) & (stream_out_switch_V_last_V_1_vld_in == 1'b1)))) begin
            stream_out_switch_V_last_V_1_state <= 2'd3;
        end else begin
            stream_out_switch_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_switch_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_switch_V_user_V_1_ack_out == 1'b1) & (stream_out_switch_V_user_V_1_vld_out == 1'b1))) begin
            stream_out_switch_V_user_V_1_sel_rd <= ~stream_out_switch_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_switch_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_switch_V_user_V_1_ack_in == 1'b1) & (stream_out_switch_V_user_V_1_vld_in == 1'b1))) begin
            stream_out_switch_V_user_V_1_sel_wr <= ~stream_out_switch_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_switch_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_switch_V_user_V_1_state == 2'd2) & (stream_out_switch_V_user_V_1_vld_in == 1'b0)) | ((stream_out_switch_V_user_V_1_state == 2'd3) & (stream_out_switch_V_user_V_1_vld_in == 1'b0) & (stream_out_switch_V_user_V_1_ack_out == 1'b1)))) begin
            stream_out_switch_V_user_V_1_state <= 2'd2;
        end else if ((((stream_out_switch_V_user_V_1_state == 2'd1) & (stream_out_switch_TREADY == 1'b0)) | ((stream_out_switch_V_user_V_1_state == 2'd3) & (stream_out_switch_TREADY == 1'b0) & (stream_out_switch_V_user_V_1_vld_in == 1'b1)))) begin
            stream_out_switch_V_user_V_1_state <= 2'd1;
        end else if (((~((stream_out_switch_V_user_V_1_vld_in == 1'b0) & (stream_out_switch_V_user_V_1_ack_out == 1'b1)) & ~((stream_out_switch_TREADY == 1'b0) & (stream_out_switch_V_user_V_1_vld_in == 1'b1)) & (stream_out_switch_V_user_V_1_state == 2'd3)) | ((stream_out_switch_V_user_V_1_state == 2'd1) & (stream_out_switch_V_user_V_1_ack_out == 1'b1)) | ((stream_out_switch_V_user_V_1_state == 2'd2) & (stream_out_switch_V_user_V_1_vld_in == 1'b1)))) begin
            stream_out_switch_V_user_V_1_state <= 2'd3;
        end else begin
            stream_out_switch_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_891)) begin
        if ((1'b1 == ap_condition_986)) begin
            ap_phi_reg_pp0_iter1_sinkState_load_14_reg_205 <= 2'd2;
        end else if ((1'b1 == ap_condition_982)) begin
            ap_phi_reg_pp0_iter1_sinkState_load_14_reg_205 <= 2'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_sinkState_load_14_reg_205 <= ap_phi_reg_pp0_iter0_sinkState_load_14_reg_205;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_891)) begin
        if ((1'b1 == ap_condition_993)) begin
            ap_phi_reg_pp0_iter1_sinkState_load_16_reg_219 <= 1'd1;
        end else if ((1'b1 == ap_condition_991)) begin
            ap_phi_reg_pp0_iter1_sinkState_load_16_reg_219 <= 1'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_sinkState_load_16_reg_219 <= ap_phi_reg_pp0_iter0_sinkState_load_16_reg_219;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (sinkState_load_reg_389 == 2'd2) & (tmp_2_reg_393 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_sinkState_load_1_reg_232 <= ap_phi_reg_pp0_iter1_sinkState_load_14_reg_205;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (sinkState_load_reg_389 == 2'd1) & (tmp_1_reg_397 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_sinkState_load_1_reg_232 <= zext_ln160_fu_380_p1;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (sinkState_load_reg_389 == 2'd0) & (tmp_reg_401 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_sinkState_load_1_reg_232 <= select_ln321_1_reg_467;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (sinkState_load_reg_389 == 2'd2) & (tmp_2_reg_393 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_sinkState_load_1_reg_232 <= 2'd2;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (sinkState_load_reg_389 == 2'd1) & (tmp_1_reg_397 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_sinkState_load_1_reg_232 <= 2'd1;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (sinkState_load_reg_389 == 2'd3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (sinkState_load_reg_389 == 2'd0) & (tmp_reg_401 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_phi_reg_pp0_iter1_sinkState_load_1_reg_232 <= 2'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_sinkState_load_1_reg_232 <= ap_phi_reg_pp0_iter0_sinkState_load_1_reg_232;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (sinkState_load_reg_389 == 2'd0) & (tmp_reg_401 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1))) begin
        sinkState <= select_ln321_1_fu_366_p3;
    end else if ((((1'b0 == ap_block_pp0_stage1_11001) & (sinkState_load_reg_389 == 2'd3) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (sinkState_load_reg_389 == 2'd2) & (grp_fu_271_p1 == 1'd1) & (tmp_2_reg_393 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (sinkState_load_reg_389 == 2'd1) & (grp_fu_271_p1 == 1'd1) & (tmp_1_reg_397 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1)))) begin
        sinkState <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (sinkState_load_reg_389 == 2'd0) & (tmp_reg_401 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln879_reg_463 <= icmp_ln879_fu_348_p2;
        network_addr_in_V_reg_458 <= network_table_V_Dout_A;
        select_ln321_1_reg_467 <= select_ln321_1_fu_366_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sinkState_load_reg_389 <= sinkState;
        sinkState_load_reg_389_pp0_iter1_reg <= sinkState_load_reg_389;
        tmp_reg_401_pp0_iter1_reg <= tmp_reg_401;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_network_V_data_V_1_load_A == 1'b1)) begin
        stream_out_network_V_data_V_1_payload_A <= stream_out_network_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_network_V_data_V_1_load_B == 1'b1)) begin
        stream_out_network_V_data_V_1_payload_B <= stream_out_network_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_network_V_dest_V_1_load_A == 1'b1)) begin
        stream_out_network_V_dest_V_1_payload_A <= stream_out_network_V_dest_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_network_V_dest_V_1_load_B == 1'b1)) begin
        stream_out_network_V_dest_V_1_payload_B <= stream_out_network_V_dest_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_network_V_id_V_1_load_A == 1'b1)) begin
        stream_out_network_V_id_V_1_payload_A <= stream_out_network_V_id_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_network_V_id_V_1_load_B == 1'b1)) begin
        stream_out_network_V_id_V_1_payload_B <= stream_out_network_V_id_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_network_V_keep_V_1_load_A == 1'b1)) begin
        stream_out_network_V_keep_V_1_payload_A <= stream_out_network_V_keep_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_network_V_keep_V_1_load_B == 1'b1)) begin
        stream_out_network_V_keep_V_1_payload_B <= stream_out_network_V_keep_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_network_V_last_V_1_load_A == 1'b1)) begin
        stream_out_network_V_last_V_1_payload_A <= stream_out_network_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_network_V_last_V_1_load_B == 1'b1)) begin
        stream_out_network_V_last_V_1_payload_B <= stream_out_network_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_network_V_user_V_1_load_A == 1'b1)) begin
        stream_out_network_V_user_V_1_payload_A <= stream_out_network_V_user_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_network_V_user_V_1_load_B == 1'b1)) begin
        stream_out_network_V_user_V_1_payload_B <= stream_out_network_V_user_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_switch_V_data_V_1_load_A == 1'b1)) begin
        stream_out_switch_V_data_V_1_payload_A <= stream_out_switch_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_switch_V_data_V_1_load_B == 1'b1)) begin
        stream_out_switch_V_data_V_1_payload_B <= stream_out_switch_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_switch_V_dest_V_1_load_A == 1'b1)) begin
        stream_out_switch_V_dest_V_1_payload_A <= stream_out_switch_V_dest_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_switch_V_dest_V_1_load_B == 1'b1)) begin
        stream_out_switch_V_dest_V_1_payload_B <= stream_out_switch_V_dest_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_switch_V_id_V_1_load_A == 1'b1)) begin
        stream_out_switch_V_id_V_1_payload_A <= stream_out_switch_V_id_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_switch_V_id_V_1_load_B == 1'b1)) begin
        stream_out_switch_V_id_V_1_payload_B <= stream_out_switch_V_id_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_switch_V_keep_V_1_load_A == 1'b1)) begin
        stream_out_switch_V_keep_V_1_payload_A <= stream_out_switch_V_keep_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_switch_V_keep_V_1_load_B == 1'b1)) begin
        stream_out_switch_V_keep_V_1_payload_B <= stream_out_switch_V_keep_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_switch_V_last_V_1_load_A == 1'b1)) begin
        stream_out_switch_V_last_V_1_payload_A <= stream_out_switch_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_switch_V_last_V_1_load_B == 1'b1)) begin
        stream_out_switch_V_last_V_1_payload_B <= stream_out_switch_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_switch_V_user_V_1_load_A == 1'b1)) begin
        stream_out_switch_V_user_V_1_payload_A <= stream_out_switch_V_user_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_switch_V_user_V_1_load_B == 1'b1)) begin
        stream_out_switch_V_user_V_1_payload_B <= stream_out_switch_V_user_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (sinkState_load_load_fu_331_p1 == 2'd1) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_1_reg_397 <= grp_nbreadreq_fu_94_p8;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (sinkState_load_load_fu_331_p1 == 2'd2) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_2_reg_393 <= grp_nbreadreq_fu_94_p8;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (sinkState == 2'd0) & (grp_nbreadreq_fu_94_p8 == 1'd1) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_data_V_reg_405 <= stream_in_TDATA;
        tmp_dest_V_reg_411 <= stream_in_TDEST;
        tmp_id_V_reg_425 <= stream_in_TID;
        tmp_keep_V_reg_437 <= stream_in_TKEEP;
        tmp_last_V_reg_417 <= stream_in_TLAST;
        tmp_user_V_reg_431 <= stream_in_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (sinkState == 2'd0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_401 <= grp_nbreadreq_fu_94_p8;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (sinkState_load_reg_389 == 2'd0) & (tmp_reg_401 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        addr_out_V_ap_vld = 1'b1;
    end else begin
        addr_out_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        network_table_V_EN_A = 1'b1;
    end else begin
        network_table_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        state_out_ap_vld = 1'b1;
    end else begin
        state_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (sinkState_load_reg_389 == 2'd2) & (tmp_2_reg_393 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (sinkState_load_reg_389 == 2'd1) & (tmp_1_reg_397 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (sinkState == 2'd0) & (grp_nbreadreq_fu_94_p8 == 1'd1) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        stream_in_TDATA_blk_n = stream_in_TVALID;
    end else begin
        stream_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op33_read_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op22_read_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op10_read_state1 == 1'b1) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        stream_in_TREADY = 1'b1;
    end else begin
        stream_in_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (sinkState_load_reg_389_pp0_iter1_reg == 2'd0) & (tmp_reg_401_pp0_iter1_reg == 1'd1) & (icmp_ln879_reg_463 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage1) & (sinkState_load_reg_389 == 2'd2) & (tmp_2_reg_393 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (sinkState_load_reg_389 == 2'd0) & (tmp_reg_401 == 1'd1) & (icmp_ln879_reg_463 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (sinkState_load_reg_389 == 2'd2) & (tmp_2_reg_393 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        stream_out_network_TDATA_blk_n = stream_out_network_V_data_V_1_state[1'd1];
    end else begin
        stream_out_network_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op63_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        stream_out_network_V_data_V_1_data_in = tmp_data_V_reg_405;
    end else if (((ap_predicate_op32_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_01001))) begin
        stream_out_network_V_data_V_1_data_in = stream_in_TDATA;
    end else begin
        stream_out_network_V_data_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((stream_out_network_V_data_V_1_sel == 1'b1)) begin
        stream_out_network_V_data_V_1_data_out = stream_out_network_V_data_V_1_payload_B;
    end else begin
        stream_out_network_V_data_V_1_data_out = stream_out_network_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op32_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op63_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        stream_out_network_V_data_V_1_vld_in = 1'b1;
    end else begin
        stream_out_network_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op63_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        stream_out_network_V_dest_V_1_data_in = tmp_dest_V_reg_411;
    end else if (((ap_predicate_op32_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_01001))) begin
        stream_out_network_V_dest_V_1_data_in = stream_in_TDEST;
    end else begin
        stream_out_network_V_dest_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((stream_out_network_V_dest_V_1_sel == 1'b1)) begin
        stream_out_network_V_dest_V_1_data_out = stream_out_network_V_dest_V_1_payload_B;
    end else begin
        stream_out_network_V_dest_V_1_data_out = stream_out_network_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op32_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op63_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        stream_out_network_V_dest_V_1_vld_in = 1'b1;
    end else begin
        stream_out_network_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op63_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        stream_out_network_V_id_V_1_data_in = tmp_id_V_reg_425;
    end else if (((ap_predicate_op32_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_01001))) begin
        stream_out_network_V_id_V_1_data_in = stream_in_TID;
    end else begin
        stream_out_network_V_id_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((stream_out_network_V_id_V_1_sel == 1'b1)) begin
        stream_out_network_V_id_V_1_data_out = stream_out_network_V_id_V_1_payload_B;
    end else begin
        stream_out_network_V_id_V_1_data_out = stream_out_network_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op32_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op63_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        stream_out_network_V_id_V_1_vld_in = 1'b1;
    end else begin
        stream_out_network_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op63_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        stream_out_network_V_keep_V_1_data_in = tmp_keep_V_reg_437;
    end else if (((ap_predicate_op32_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_01001))) begin
        stream_out_network_V_keep_V_1_data_in = stream_in_TKEEP;
    end else begin
        stream_out_network_V_keep_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((stream_out_network_V_keep_V_1_sel == 1'b1)) begin
        stream_out_network_V_keep_V_1_data_out = stream_out_network_V_keep_V_1_payload_B;
    end else begin
        stream_out_network_V_keep_V_1_data_out = stream_out_network_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op32_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op63_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        stream_out_network_V_keep_V_1_vld_in = 1'b1;
    end else begin
        stream_out_network_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op63_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        stream_out_network_V_last_V_1_data_in = tmp_last_V_reg_417;
    end else if (((ap_predicate_op32_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_01001))) begin
        stream_out_network_V_last_V_1_data_in = stream_in_TLAST;
    end else begin
        stream_out_network_V_last_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((stream_out_network_V_last_V_1_sel == 1'b1)) begin
        stream_out_network_V_last_V_1_data_out = stream_out_network_V_last_V_1_payload_B;
    end else begin
        stream_out_network_V_last_V_1_data_out = stream_out_network_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op32_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op63_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        stream_out_network_V_last_V_1_vld_in = 1'b1;
    end else begin
        stream_out_network_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op63_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        stream_out_network_V_user_V_1_data_in = tmp_user_V_reg_431;
    end else if (((ap_predicate_op32_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_01001))) begin
        stream_out_network_V_user_V_1_data_in = stream_in_TUSER;
    end else begin
        stream_out_network_V_user_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((stream_out_network_V_user_V_1_sel == 1'b1)) begin
        stream_out_network_V_user_V_1_data_out = stream_out_network_V_user_V_1_payload_B;
    end else begin
        stream_out_network_V_user_V_1_data_out = stream_out_network_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op32_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op63_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        stream_out_network_V_user_V_1_vld_in = 1'b1;
    end else begin
        stream_out_network_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (sinkState_load_reg_389_pp0_iter1_reg == 2'd0) & (tmp_reg_401_pp0_iter1_reg == 1'd1) & (icmp_ln879_reg_463 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage1) & (sinkState_load_reg_389 == 2'd1) & (tmp_1_reg_397 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (sinkState_load_reg_389 == 2'd0) & (icmp_ln879_reg_463 == 1'd1) & (tmp_reg_401 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (sinkState_load_reg_389 == 2'd1) & (tmp_1_reg_397 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        stream_out_switch_TDATA_blk_n = stream_out_switch_V_data_V_1_state[1'd1];
    end else begin
        stream_out_switch_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op64_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        stream_out_switch_V_data_V_1_data_in = tmp_data_V_reg_405;
    end else if (((ap_predicate_op43_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_01001))) begin
        stream_out_switch_V_data_V_1_data_in = stream_in_TDATA;
    end else begin
        stream_out_switch_V_data_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((stream_out_switch_V_data_V_1_sel == 1'b1)) begin
        stream_out_switch_V_data_V_1_data_out = stream_out_switch_V_data_V_1_payload_B;
    end else begin
        stream_out_switch_V_data_V_1_data_out = stream_out_switch_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op43_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op64_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        stream_out_switch_V_data_V_1_vld_in = 1'b1;
    end else begin
        stream_out_switch_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op64_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        stream_out_switch_V_dest_V_1_data_in = tmp_dest_V_reg_411;
    end else if (((ap_predicate_op43_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_01001))) begin
        stream_out_switch_V_dest_V_1_data_in = stream_in_TDEST;
    end else begin
        stream_out_switch_V_dest_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((stream_out_switch_V_dest_V_1_sel == 1'b1)) begin
        stream_out_switch_V_dest_V_1_data_out = stream_out_switch_V_dest_V_1_payload_B;
    end else begin
        stream_out_switch_V_dest_V_1_data_out = stream_out_switch_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op43_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op64_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        stream_out_switch_V_dest_V_1_vld_in = 1'b1;
    end else begin
        stream_out_switch_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op64_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        stream_out_switch_V_id_V_1_data_in = tmp_id_V_reg_425;
    end else if (((ap_predicate_op43_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_01001))) begin
        stream_out_switch_V_id_V_1_data_in = stream_in_TID;
    end else begin
        stream_out_switch_V_id_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((stream_out_switch_V_id_V_1_sel == 1'b1)) begin
        stream_out_switch_V_id_V_1_data_out = stream_out_switch_V_id_V_1_payload_B;
    end else begin
        stream_out_switch_V_id_V_1_data_out = stream_out_switch_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op43_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op64_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        stream_out_switch_V_id_V_1_vld_in = 1'b1;
    end else begin
        stream_out_switch_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op64_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        stream_out_switch_V_keep_V_1_data_in = tmp_keep_V_reg_437;
    end else if (((ap_predicate_op43_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_01001))) begin
        stream_out_switch_V_keep_V_1_data_in = stream_in_TKEEP;
    end else begin
        stream_out_switch_V_keep_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((stream_out_switch_V_keep_V_1_sel == 1'b1)) begin
        stream_out_switch_V_keep_V_1_data_out = stream_out_switch_V_keep_V_1_payload_B;
    end else begin
        stream_out_switch_V_keep_V_1_data_out = stream_out_switch_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op43_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op64_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        stream_out_switch_V_keep_V_1_vld_in = 1'b1;
    end else begin
        stream_out_switch_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op64_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        stream_out_switch_V_last_V_1_data_in = tmp_last_V_reg_417;
    end else if (((ap_predicate_op43_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_01001))) begin
        stream_out_switch_V_last_V_1_data_in = stream_in_TLAST;
    end else begin
        stream_out_switch_V_last_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((stream_out_switch_V_last_V_1_sel == 1'b1)) begin
        stream_out_switch_V_last_V_1_data_out = stream_out_switch_V_last_V_1_payload_B;
    end else begin
        stream_out_switch_V_last_V_1_data_out = stream_out_switch_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op43_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op64_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        stream_out_switch_V_last_V_1_vld_in = 1'b1;
    end else begin
        stream_out_switch_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op64_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        stream_out_switch_V_user_V_1_data_in = tmp_user_V_reg_431;
    end else if (((ap_predicate_op43_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_01001))) begin
        stream_out_switch_V_user_V_1_data_in = stream_in_TUSER;
    end else begin
        stream_out_switch_V_user_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((stream_out_switch_V_user_V_1_sel == 1'b1)) begin
        stream_out_switch_V_user_V_1_data_out = stream_out_switch_V_user_V_1_payload_B;
    end else begin
        stream_out_switch_V_user_V_1_data_out = stream_out_switch_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op43_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op64_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        stream_out_switch_V_user_V_1_vld_in = 1'b1;
    end else begin
        stream_out_switch_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((((1'b0 == ap_block_pp0_stage1_subdone) & (ap_reset_idle_pp0 == 1'b0)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (ap_reset_idle_pp0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign addr_out_V = network_addr_in_V_reg_458;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_predicate_op10_read_state1 == 1'b1) & (stream_in_TVALID == 1'b0) & (1'b1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_predicate_op10_read_state1 == 1'b1) & (stream_in_TVALID == 1'b0) & (1'b1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_predicate_op10_read_state1 == 1'b1) & (stream_in_TVALID == 1'b0) & (1'b1 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((stream_out_network_V_keep_V_1_state == 2'd1) | (stream_out_network_V_user_V_1_state == 2'd1) | (stream_out_network_V_id_V_1_state == 2'd1) | (stream_out_network_V_last_V_1_state == 2'd1) | (stream_out_network_V_dest_V_1_state == 2'd1) | (stream_out_network_V_data_V_1_state == 2'd1) | (stream_out_switch_V_keep_V_1_state == 2'd1) | (stream_out_switch_V_user_V_1_state == 2'd1) | (stream_out_switch_V_id_V_1_state == 2'd1) | (stream_out_switch_V_last_V_1_state == 2'd1) | (stream_out_switch_V_dest_V_1_state == 2'd1) | (stream_out_switch_V_data_V_1_state == 2'd1) | ((stream_out_network_V_keep_V_1_state == 2'd3) & (stream_out_network_TREADY == 1'b0)) | ((stream_out_network_V_user_V_1_state == 2'd3) & (stream_out_network_TREADY == 1'b0)) | ((stream_out_switch_V_data_V_1_state == 2'd3) & (stream_out_switch_TREADY == 1'b0)) | ((stream_out_network_V_id_V_1_state == 2'd3) & (stream_out_network_TREADY == 1'b0)) | ((stream_out_network_V_last_V_1_state == 2'd3) & (stream_out_network_TREADY == 1'b0)) | ((stream_out_network_V_dest_V_1_state == 2'd3) & (stream_out_network_TREADY == 1'b0)) | ((stream_out_network_V_data_V_1_state == 2'd3) & (stream_out_network_TREADY == 1'b0)) | ((stream_out_switch_V_keep_V_1_state == 2'd3) & (stream_out_switch_TREADY == 1'b0)) | ((stream_out_switch_V_user_V_1_state == 2'd3) & (stream_out_switch_TREADY == 1'b0)) | ((stream_out_switch_V_id_V_1_state == 2'd3) & (stream_out_switch_TREADY == 1'b0)) | ((stream_out_switch_V_last_V_1_state == 2'd3) & (stream_out_switch_TREADY == 1'b0)) | ((stream_out_switch_V_dest_V_1_state == 2'd3) & (stream_out_switch_TREADY == 1'b0)))) | ((1'b1 == 1'b1) & (((ap_predicate_op33_read_state2 == 1'b1) & (stream_in_TVALID == 1'b0)) | ((ap_predicate_op22_read_state2 == 1'b1) & (stream_in_TVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((stream_out_network_V_keep_V_1_state == 2'd1) | (stream_out_network_V_user_V_1_state == 2'd1) | (stream_out_network_V_id_V_1_state == 2'd1) | (stream_out_network_V_last_V_1_state == 2'd1) | (stream_out_network_V_dest_V_1_state == 2'd1) | (stream_out_network_V_data_V_1_state == 2'd1) | (stream_out_switch_V_keep_V_1_state == 2'd1) | (stream_out_switch_V_user_V_1_state == 2'd1) | (stream_out_switch_V_id_V_1_state == 2'd1) | (stream_out_switch_V_last_V_1_state == 2'd1) | (stream_out_switch_V_dest_V_1_state == 2'd1) | (1'b1 == ap_block_state4_io) | (stream_out_switch_V_data_V_1_state == 2'd1) | ((stream_out_network_V_keep_V_1_state == 2'd3) & (stream_out_network_TREADY == 1'b0)) | ((stream_out_network_V_user_V_1_state == 2'd3) & (stream_out_network_TREADY == 1'b0)) | ((stream_out_switch_V_data_V_1_state == 2'd3) & (stream_out_switch_TREADY == 1'b0)) | ((stream_out_network_V_id_V_1_state == 2'd3) & (stream_out_network_TREADY == 1'b0)) | ((stream_out_network_V_last_V_1_state == 2'd3) & (stream_out_network_TREADY == 1'b0)) | ((stream_out_network_V_dest_V_1_state == 2'd3) & (stream_out_network_TREADY == 1'b0)) | ((stream_out_network_V_data_V_1_state == 2'd3) & (stream_out_network_TREADY == 1'b0)) | ((stream_out_switch_V_keep_V_1_state == 2'd3) & (stream_out_switch_TREADY == 1'b0)) | ((stream_out_switch_V_user_V_1_state == 2'd3) & (stream_out_switch_TREADY == 1'b0)) | ((stream_out_switch_V_id_V_1_state == 2'd3) & (stream_out_switch_TREADY == 1'b0)) | ((stream_out_switch_V_last_V_1_state == 2'd3) & (stream_out_switch_TREADY == 1'b0)) | ((stream_out_switch_V_dest_V_1_state == 2'd3) & (stream_out_switch_TREADY == 1'b0)))) | ((1'b1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((ap_predicate_op33_read_state2 == 1'b1) & (stream_in_TVALID == 1'b0)) | ((ap_predicate_op22_read_state2 == 1'b1) & (stream_in_TVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((stream_out_network_V_keep_V_1_state == 2'd1) | (stream_out_network_V_user_V_1_state == 2'd1) | (stream_out_network_V_id_V_1_state == 2'd1) | (stream_out_network_V_last_V_1_state == 2'd1) | (stream_out_network_V_dest_V_1_state == 2'd1) | (stream_out_network_V_data_V_1_state == 2'd1) | (stream_out_switch_V_keep_V_1_state == 2'd1) | (stream_out_switch_V_user_V_1_state == 2'd1) | (stream_out_switch_V_id_V_1_state == 2'd1) | (stream_out_switch_V_last_V_1_state == 2'd1) | (stream_out_switch_V_dest_V_1_state == 2'd1) | (1'b1 == ap_block_state4_io) | (stream_out_switch_V_data_V_1_state == 2'd1) | ((stream_out_network_V_keep_V_1_state == 2'd3) & (stream_out_network_TREADY == 1'b0)) | ((stream_out_network_V_user_V_1_state == 2'd3) & (stream_out_network_TREADY == 1'b0)) | ((stream_out_switch_V_data_V_1_state == 2'd3) & (stream_out_switch_TREADY == 1'b0)) | ((stream_out_network_V_id_V_1_state == 2'd3) & (stream_out_network_TREADY == 1'b0)) | ((stream_out_network_V_last_V_1_state == 2'd3) & (stream_out_network_TREADY == 1'b0)) | ((stream_out_network_V_dest_V_1_state == 2'd3) & (stream_out_network_TREADY == 1'b0)) | ((stream_out_network_V_data_V_1_state == 2'd3) & (stream_out_network_TREADY == 1'b0)) | ((stream_out_switch_V_keep_V_1_state == 2'd3) & (stream_out_switch_TREADY == 1'b0)) | ((stream_out_switch_V_user_V_1_state == 2'd3) & (stream_out_switch_TREADY == 1'b0)) | ((stream_out_switch_V_id_V_1_state == 2'd3) & (stream_out_switch_TREADY == 1'b0)) | ((stream_out_switch_V_last_V_1_state == 2'd3) & (stream_out_switch_TREADY == 1'b0)) | ((stream_out_switch_V_dest_V_1_state == 2'd3) & (stream_out_switch_TREADY == 1'b0)))) | ((1'b1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((ap_predicate_op33_read_state2 == 1'b1) & (stream_in_TVALID == 1'b0)) | ((ap_predicate_op22_read_state2 == 1'b1) & (stream_in_TVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_predicate_op10_read_state1 == 1'b1) & (stream_in_TVALID == 1'b0));
end

always @ (*) begin
    ap_block_state2_io = (((ap_predicate_op43_write_state2 == 1'b1) & (stream_out_switch_V_data_V_1_ack_in == 1'b0)) | ((ap_predicate_op32_write_state2 == 1'b1) & (stream_out_network_V_data_V_1_ack_in == 1'b0)));
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = (((ap_predicate_op33_read_state2 == 1'b1) & (stream_in_TVALID == 1'b0)) | ((ap_predicate_op22_read_state2 == 1'b1) & (stream_in_TVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state3_io = (((ap_predicate_op64_write_state3 == 1'b1) & (stream_out_switch_V_data_V_1_ack_in == 1'b0)) | ((ap_predicate_op59_write_state3 == 1'b1) & (stream_out_switch_V_data_V_1_ack_in == 1'b0)) | ((ap_predicate_op63_write_state3 == 1'b1) & (stream_out_network_V_data_V_1_ack_in == 1'b0)) | ((ap_predicate_op54_write_state3 == 1'b1) & (stream_out_network_V_data_V_1_ack_in == 1'b0)));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = (((ap_predicate_op98_write_state4 == 1'b1) & (stream_out_switch_V_data_V_1_ack_in == 1'b0)) | ((ap_predicate_op96_write_state4 == 1'b1) & (stream_out_network_V_data_V_1_ack_in == 1'b0)));
end

always @ (*) begin
    ap_block_state4_pp0_stage1_iter1 = ((stream_out_network_V_keep_V_1_state == 2'd1) | (stream_out_network_V_user_V_1_state == 2'd1) | (stream_out_network_V_id_V_1_state == 2'd1) | (stream_out_network_V_last_V_1_state == 2'd1) | (stream_out_network_V_dest_V_1_state == 2'd1) | (stream_out_network_V_data_V_1_state == 2'd1) | (stream_out_switch_V_keep_V_1_state == 2'd1) | (stream_out_switch_V_user_V_1_state == 2'd1) | (stream_out_switch_V_id_V_1_state == 2'd1) | (stream_out_switch_V_last_V_1_state == 2'd1) | (stream_out_switch_V_dest_V_1_state == 2'd1) | (stream_out_switch_V_data_V_1_state == 2'd1) | ((stream_out_network_V_keep_V_1_state == 2'd3) & (stream_out_network_TREADY == 1'b0)) | ((stream_out_network_V_user_V_1_state == 2'd3) & (stream_out_network_TREADY == 1'b0)) | ((stream_out_switch_V_data_V_1_state == 2'd3) & (stream_out_switch_TREADY == 1'b0)) | ((stream_out_network_V_id_V_1_state == 2'd3) & (stream_out_network_TREADY == 1'b0)) | ((stream_out_network_V_last_V_1_state == 2'd3) & (stream_out_network_TREADY == 1'b0)) | ((stream_out_network_V_dest_V_1_state == 2'd3) & (stream_out_network_TREADY == 1'b0)) | ((stream_out_network_V_data_V_1_state == 2'd3) & (stream_out_network_TREADY == 1'b0)) | ((stream_out_switch_V_keep_V_1_state == 2'd3) & (stream_out_switch_TREADY == 1'b0)) | ((stream_out_switch_V_user_V_1_state == 2'd3) & (stream_out_switch_TREADY == 1'b0)) | ((stream_out_switch_V_id_V_1_state == 2'd3) & (stream_out_switch_TREADY == 1'b0)) | ((stream_out_switch_V_last_V_1_state == 2'd3) & (stream_out_switch_TREADY == 1'b0)) | ((stream_out_switch_V_dest_V_1_state == 2'd3) & (stream_out_switch_TREADY == 1'b0)));
end

always @ (*) begin
    ap_condition_891 = ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1));
end

always @ (*) begin
    ap_condition_982 = ((sinkState_load_reg_389 == 2'd2) & (grp_fu_271_p1 == 1'd1) & (tmp_2_reg_393 == 1'd1));
end

always @ (*) begin
    ap_condition_986 = ((sinkState_load_reg_389 == 2'd2) & (tmp_2_reg_393 == 1'd1) & (grp_fu_271_p1 == 1'd0));
end

always @ (*) begin
    ap_condition_991 = ((sinkState_load_reg_389 == 2'd1) & (grp_fu_271_p1 == 1'd1) & (tmp_1_reg_397 == 1'd1));
end

always @ (*) begin
    ap_condition_993 = ((sinkState_load_reg_389 == 2'd1) & (tmp_1_reg_397 == 1'd1) & (grp_fu_271_p1 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_sinkState_load_14_reg_205 = 'bx;

assign ap_phi_reg_pp0_iter0_sinkState_load_16_reg_219 = 'bx;

assign ap_phi_reg_pp0_iter0_sinkState_load_1_reg_232 = 'bx;

always @ (*) begin
    ap_predicate_op10_read_state1 = ((sinkState == 2'd0) & (grp_nbreadreq_fu_94_p8 == 1'd1));
end

always @ (*) begin
    ap_predicate_op22_read_state2 = ((sinkState_load_reg_389 == 2'd2) & (tmp_2_reg_393 == 1'd1));
end

always @ (*) begin
    ap_predicate_op32_write_state2 = ((sinkState_load_reg_389 == 2'd2) & (tmp_2_reg_393 == 1'd1));
end

always @ (*) begin
    ap_predicate_op33_read_state2 = ((sinkState_load_reg_389 == 2'd1) & (tmp_1_reg_397 == 1'd1));
end

always @ (*) begin
    ap_predicate_op43_write_state2 = ((sinkState_load_reg_389 == 2'd1) & (tmp_1_reg_397 == 1'd1));
end

always @ (*) begin
    ap_predicate_op54_write_state3 = ((sinkState_load_reg_389 == 2'd2) & (tmp_2_reg_393 == 1'd1));
end

always @ (*) begin
    ap_predicate_op59_write_state3 = ((sinkState_load_reg_389 == 2'd1) & (tmp_1_reg_397 == 1'd1));
end

always @ (*) begin
    ap_predicate_op63_write_state3 = ((sinkState_load_reg_389 == 2'd0) & (tmp_reg_401 == 1'd1) & (icmp_ln879_reg_463 == 1'd0));
end

always @ (*) begin
    ap_predicate_op64_write_state3 = ((sinkState_load_reg_389 == 2'd0) & (icmp_ln879_reg_463 == 1'd1) & (tmp_reg_401 == 1'd1));
end

always @ (*) begin
    ap_predicate_op96_write_state4 = ((sinkState_load_reg_389_pp0_iter1_reg == 2'd0) & (tmp_reg_401_pp0_iter1_reg == 1'd1) & (icmp_ln879_reg_463 == 1'd0));
end

always @ (*) begin
    ap_predicate_op98_write_state4 = ((sinkState_load_reg_389_pp0_iter1_reg == 2'd0) & (tmp_reg_401_pp0_iter1_reg == 1'd1) & (icmp_ln879_reg_463 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_271_p1 = stream_in_TLAST;

assign grp_nbreadreq_fu_94_p8 = stream_in_TVALID;

assign icmp_ln879_fu_348_p2 = ((network_table_V_Dout_A == network_addr_V) ? 1'b1 : 1'b0);

assign network_table_V_Addr_A = network_table_V_Addr_A_orig << 32'd2;

assign network_table_V_Addr_A_orig = zext_ln162_fu_343_p1;

assign network_table_V_Clk_A = ap_clk;

assign network_table_V_Din_A = 32'd0;

always @ (*) begin
    network_table_V_Rst_A = ~ap_rst_n;
end

assign network_table_V_WEN_A = 4'd0;

assign or_ln321_fu_361_p2 = (tmp_last_V_reg_417 | icmp_ln879_fu_348_p2);

assign select_ln321_1_fu_366_p3 = ((or_ln321_fu_361_p2[0:0] === 1'b1) ? select_ln321_fu_354_p3 : 2'd2);

assign select_ln321_fu_354_p3 = ((tmp_last_V_reg_417[0:0] === 1'b1) ? 2'd0 : 2'd1);

assign shl_ln_fu_335_p3 = {{stream_in_TDEST}, {2'd0}};

assign sinkState_load_load_fu_331_p1 = sinkState;

assign state_out = ap_phi_reg_pp0_iter1_sinkState_load_1_reg_232;

assign stream_out_network_TDATA = stream_out_network_V_data_V_1_data_out;

assign stream_out_network_TDEST = stream_out_network_V_dest_V_1_data_out;

assign stream_out_network_TID = stream_out_network_V_id_V_1_data_out;

assign stream_out_network_TKEEP = stream_out_network_V_keep_V_1_data_out;

assign stream_out_network_TLAST = stream_out_network_V_last_V_1_data_out;

assign stream_out_network_TUSER = stream_out_network_V_user_V_1_data_out;

assign stream_out_network_TVALID = stream_out_network_V_keep_V_1_state[1'd0];

assign stream_out_network_V_data_V_1_ack_in = stream_out_network_V_data_V_1_state[1'd1];

assign stream_out_network_V_data_V_1_ack_out = stream_out_network_TREADY;

assign stream_out_network_V_data_V_1_load_A = (stream_out_network_V_data_V_1_state_cmp_full & ~stream_out_network_V_data_V_1_sel_wr);

assign stream_out_network_V_data_V_1_load_B = (stream_out_network_V_data_V_1_state_cmp_full & stream_out_network_V_data_V_1_sel_wr);

assign stream_out_network_V_data_V_1_sel = stream_out_network_V_data_V_1_sel_rd;

assign stream_out_network_V_data_V_1_state_cmp_full = ((stream_out_network_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_network_V_data_V_1_vld_out = stream_out_network_V_data_V_1_state[1'd0];

assign stream_out_network_V_dest_V_1_ack_in = stream_out_network_V_dest_V_1_state[1'd1];

assign stream_out_network_V_dest_V_1_ack_out = stream_out_network_TREADY;

assign stream_out_network_V_dest_V_1_load_A = (stream_out_network_V_dest_V_1_state_cmp_full & ~stream_out_network_V_dest_V_1_sel_wr);

assign stream_out_network_V_dest_V_1_load_B = (stream_out_network_V_dest_V_1_state_cmp_full & stream_out_network_V_dest_V_1_sel_wr);

assign stream_out_network_V_dest_V_1_sel = stream_out_network_V_dest_V_1_sel_rd;

assign stream_out_network_V_dest_V_1_state_cmp_full = ((stream_out_network_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_network_V_dest_V_1_vld_out = stream_out_network_V_dest_V_1_state[1'd0];

assign stream_out_network_V_id_V_1_ack_in = stream_out_network_V_id_V_1_state[1'd1];

assign stream_out_network_V_id_V_1_ack_out = stream_out_network_TREADY;

assign stream_out_network_V_id_V_1_load_A = (stream_out_network_V_id_V_1_state_cmp_full & ~stream_out_network_V_id_V_1_sel_wr);

assign stream_out_network_V_id_V_1_load_B = (stream_out_network_V_id_V_1_state_cmp_full & stream_out_network_V_id_V_1_sel_wr);

assign stream_out_network_V_id_V_1_sel = stream_out_network_V_id_V_1_sel_rd;

assign stream_out_network_V_id_V_1_state_cmp_full = ((stream_out_network_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_network_V_id_V_1_vld_out = stream_out_network_V_id_V_1_state[1'd0];

assign stream_out_network_V_keep_V_1_ack_in = stream_out_network_V_keep_V_1_state[1'd1];

assign stream_out_network_V_keep_V_1_ack_out = stream_out_network_TREADY;

assign stream_out_network_V_keep_V_1_load_A = (stream_out_network_V_keep_V_1_state_cmp_full & ~stream_out_network_V_keep_V_1_sel_wr);

assign stream_out_network_V_keep_V_1_load_B = (stream_out_network_V_keep_V_1_state_cmp_full & stream_out_network_V_keep_V_1_sel_wr);

assign stream_out_network_V_keep_V_1_sel = stream_out_network_V_keep_V_1_sel_rd;

assign stream_out_network_V_keep_V_1_state_cmp_full = ((stream_out_network_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_network_V_keep_V_1_vld_out = stream_out_network_V_keep_V_1_state[1'd0];

assign stream_out_network_V_last_V_1_ack_in = stream_out_network_V_last_V_1_state[1'd1];

assign stream_out_network_V_last_V_1_ack_out = stream_out_network_TREADY;

assign stream_out_network_V_last_V_1_load_A = (stream_out_network_V_last_V_1_state_cmp_full & ~stream_out_network_V_last_V_1_sel_wr);

assign stream_out_network_V_last_V_1_load_B = (stream_out_network_V_last_V_1_state_cmp_full & stream_out_network_V_last_V_1_sel_wr);

assign stream_out_network_V_last_V_1_sel = stream_out_network_V_last_V_1_sel_rd;

assign stream_out_network_V_last_V_1_state_cmp_full = ((stream_out_network_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_network_V_last_V_1_vld_out = stream_out_network_V_last_V_1_state[1'd0];

assign stream_out_network_V_user_V_1_ack_in = stream_out_network_V_user_V_1_state[1'd1];

assign stream_out_network_V_user_V_1_ack_out = stream_out_network_TREADY;

assign stream_out_network_V_user_V_1_load_A = (stream_out_network_V_user_V_1_state_cmp_full & ~stream_out_network_V_user_V_1_sel_wr);

assign stream_out_network_V_user_V_1_load_B = (stream_out_network_V_user_V_1_state_cmp_full & stream_out_network_V_user_V_1_sel_wr);

assign stream_out_network_V_user_V_1_sel = stream_out_network_V_user_V_1_sel_rd;

assign stream_out_network_V_user_V_1_state_cmp_full = ((stream_out_network_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_network_V_user_V_1_vld_out = stream_out_network_V_user_V_1_state[1'd0];

assign stream_out_switch_TDATA = stream_out_switch_V_data_V_1_data_out;

assign stream_out_switch_TDEST = stream_out_switch_V_dest_V_1_data_out;

assign stream_out_switch_TID = stream_out_switch_V_id_V_1_data_out;

assign stream_out_switch_TKEEP = stream_out_switch_V_keep_V_1_data_out;

assign stream_out_switch_TLAST = stream_out_switch_V_last_V_1_data_out;

assign stream_out_switch_TUSER = stream_out_switch_V_user_V_1_data_out;

assign stream_out_switch_TVALID = stream_out_switch_V_keep_V_1_state[1'd0];

assign stream_out_switch_V_data_V_1_ack_in = stream_out_switch_V_data_V_1_state[1'd1];

assign stream_out_switch_V_data_V_1_ack_out = stream_out_switch_TREADY;

assign stream_out_switch_V_data_V_1_load_A = (stream_out_switch_V_data_V_1_state_cmp_full & ~stream_out_switch_V_data_V_1_sel_wr);

assign stream_out_switch_V_data_V_1_load_B = (stream_out_switch_V_data_V_1_state_cmp_full & stream_out_switch_V_data_V_1_sel_wr);

assign stream_out_switch_V_data_V_1_sel = stream_out_switch_V_data_V_1_sel_rd;

assign stream_out_switch_V_data_V_1_state_cmp_full = ((stream_out_switch_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_switch_V_data_V_1_vld_out = stream_out_switch_V_data_V_1_state[1'd0];

assign stream_out_switch_V_dest_V_1_ack_in = stream_out_switch_V_dest_V_1_state[1'd1];

assign stream_out_switch_V_dest_V_1_ack_out = stream_out_switch_TREADY;

assign stream_out_switch_V_dest_V_1_load_A = (stream_out_switch_V_dest_V_1_state_cmp_full & ~stream_out_switch_V_dest_V_1_sel_wr);

assign stream_out_switch_V_dest_V_1_load_B = (stream_out_switch_V_dest_V_1_state_cmp_full & stream_out_switch_V_dest_V_1_sel_wr);

assign stream_out_switch_V_dest_V_1_sel = stream_out_switch_V_dest_V_1_sel_rd;

assign stream_out_switch_V_dest_V_1_state_cmp_full = ((stream_out_switch_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_switch_V_dest_V_1_vld_out = stream_out_switch_V_dest_V_1_state[1'd0];

assign stream_out_switch_V_id_V_1_ack_in = stream_out_switch_V_id_V_1_state[1'd1];

assign stream_out_switch_V_id_V_1_ack_out = stream_out_switch_TREADY;

assign stream_out_switch_V_id_V_1_load_A = (stream_out_switch_V_id_V_1_state_cmp_full & ~stream_out_switch_V_id_V_1_sel_wr);

assign stream_out_switch_V_id_V_1_load_B = (stream_out_switch_V_id_V_1_state_cmp_full & stream_out_switch_V_id_V_1_sel_wr);

assign stream_out_switch_V_id_V_1_sel = stream_out_switch_V_id_V_1_sel_rd;

assign stream_out_switch_V_id_V_1_state_cmp_full = ((stream_out_switch_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_switch_V_id_V_1_vld_out = stream_out_switch_V_id_V_1_state[1'd0];

assign stream_out_switch_V_keep_V_1_ack_in = stream_out_switch_V_keep_V_1_state[1'd1];

assign stream_out_switch_V_keep_V_1_ack_out = stream_out_switch_TREADY;

assign stream_out_switch_V_keep_V_1_load_A = (stream_out_switch_V_keep_V_1_state_cmp_full & ~stream_out_switch_V_keep_V_1_sel_wr);

assign stream_out_switch_V_keep_V_1_load_B = (stream_out_switch_V_keep_V_1_state_cmp_full & stream_out_switch_V_keep_V_1_sel_wr);

assign stream_out_switch_V_keep_V_1_sel = stream_out_switch_V_keep_V_1_sel_rd;

assign stream_out_switch_V_keep_V_1_state_cmp_full = ((stream_out_switch_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_switch_V_keep_V_1_vld_out = stream_out_switch_V_keep_V_1_state[1'd0];

assign stream_out_switch_V_last_V_1_ack_in = stream_out_switch_V_last_V_1_state[1'd1];

assign stream_out_switch_V_last_V_1_ack_out = stream_out_switch_TREADY;

assign stream_out_switch_V_last_V_1_load_A = (stream_out_switch_V_last_V_1_state_cmp_full & ~stream_out_switch_V_last_V_1_sel_wr);

assign stream_out_switch_V_last_V_1_load_B = (stream_out_switch_V_last_V_1_state_cmp_full & stream_out_switch_V_last_V_1_sel_wr);

assign stream_out_switch_V_last_V_1_sel = stream_out_switch_V_last_V_1_sel_rd;

assign stream_out_switch_V_last_V_1_state_cmp_full = ((stream_out_switch_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_switch_V_last_V_1_vld_out = stream_out_switch_V_last_V_1_state[1'd0];

assign stream_out_switch_V_user_V_1_ack_in = stream_out_switch_V_user_V_1_state[1'd1];

assign stream_out_switch_V_user_V_1_ack_out = stream_out_switch_TREADY;

assign stream_out_switch_V_user_V_1_load_A = (stream_out_switch_V_user_V_1_state_cmp_full & ~stream_out_switch_V_user_V_1_sel_wr);

assign stream_out_switch_V_user_V_1_load_B = (stream_out_switch_V_user_V_1_state_cmp_full & stream_out_switch_V_user_V_1_sel_wr);

assign stream_out_switch_V_user_V_1_sel = stream_out_switch_V_user_V_1_sel_rd;

assign stream_out_switch_V_user_V_1_state_cmp_full = ((stream_out_switch_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_switch_V_user_V_1_vld_out = stream_out_switch_V_user_V_1_state[1'd0];

assign zext_ln160_fu_380_p1 = ap_phi_reg_pp0_iter1_sinkState_load_16_reg_219;

assign zext_ln162_fu_343_p1 = shl_ln_fu_335_p3;

endmodule //width32router

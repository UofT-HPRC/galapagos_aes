// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kern_enc,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.968000,HLS_SYN_LAT=5,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=2497,HLS_SYN_LUT=4542,HLS_VERSION=2019_1}" *)

module kern_enc (
        ap_clk,
        ap_rst_n,
        id,
        in_r_TDATA,
        in_r_TVALID,
        in_r_TREADY,
        in_r_TDEST,
        in_r_TLAST,
        in_r_TID,
        in_r_TUSER,
        in_r_TKEEP,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        out_r_TDEST,
        out_r_TLAST,
        out_r_TID,
        out_r_TUSER,
        out_r_TKEEP
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_pp0_stage0 = 16'd2048;
parameter    ap_ST_fsm_state14 = 16'd4096;
parameter    ap_ST_fsm_state15 = 16'd8192;
parameter    ap_ST_fsm_state16 = 16'd16384;
parameter    ap_ST_fsm_state17 = 16'd32768;

input   ap_clk;
input   ap_rst_n;
input  [15:0] id;
input  [511:0] in_r_TDATA;
input   in_r_TVALID;
output   in_r_TREADY;
input  [7:0] in_r_TDEST;
input  [0:0] in_r_TLAST;
input  [7:0] in_r_TID;
input  [15:0] in_r_TUSER;
input  [63:0] in_r_TKEEP;
output  [511:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
output  [7:0] out_r_TDEST;
output  [0:0] out_r_TLAST;
output  [7:0] out_r_TID;
output  [15:0] out_r_TUSER;
output  [63:0] out_r_TKEEP;

reg in_r_TREADY;
reg out_r_TVALID;

 reg    ap_rst_n_inv;
reg   [31:0] flag;
reg   [127:0] plainT_V;
reg   [127:0] keyT_V;
reg   [7:0] SBOX_V_address0;
reg    SBOX_V_ce0;
wire   [7:0] SBOX_V_q0;
reg   [7:0] SBOX_V_address1;
reg    SBOX_V_ce1;
wire   [7:0] SBOX_V_q1;
reg   [7:0] SBOX_V_address2;
reg    SBOX_V_ce2;
wire   [7:0] SBOX_V_q2;
reg   [7:0] SBOX_V_address3;
reg    SBOX_V_ce3;
wire   [7:0] SBOX_V_q3;
reg   [7:0] SBOX_V_address4;
reg    SBOX_V_ce4;
wire   [7:0] SBOX_V_q4;
reg   [7:0] SBOX_V_address5;
reg    SBOX_V_ce5;
wire   [7:0] SBOX_V_q5;
reg   [7:0] SBOX_V_address6;
reg    SBOX_V_ce6;
wire   [7:0] SBOX_V_q6;
reg   [7:0] SBOX_V_address7;
reg    SBOX_V_ce7;
wire   [7:0] SBOX_V_q7;
reg   [7:0] SBOX_V_address8;
reg    SBOX_V_ce8;
wire   [7:0] SBOX_V_q8;
reg   [7:0] SBOX_V_address9;
reg    SBOX_V_ce9;
wire   [7:0] SBOX_V_q9;
reg   [7:0] SBOX_V_address10;
reg    SBOX_V_ce10;
wire   [7:0] SBOX_V_q10;
reg   [7:0] SBOX_V_address11;
reg    SBOX_V_ce11;
wire   [7:0] SBOX_V_q11;
reg   [7:0] SBOX_V_address12;
reg    SBOX_V_ce12;
wire   [7:0] SBOX_V_q12;
reg   [7:0] SBOX_V_address13;
reg    SBOX_V_ce13;
wire   [7:0] SBOX_V_q13;
reg   [7:0] SBOX_V_address14;
reg    SBOX_V_ce14;
wire   [7:0] SBOX_V_q14;
reg   [7:0] SBOX_V_address15;
reg    SBOX_V_ce15;
wire   [7:0] SBOX_V_q15;
reg    in_r_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_nbreadreq_fu_208_p8;
wire   [0:0] tmp_1_nbwritereq_fu_226_p8;
wire   [0:0] icmp_ln50_fu_1195_p2;
reg    out_r_TDATA_blk_n;
wire    ap_CS_fsm_state15;
reg   [0:0] tmp_reg_4247;
reg   [0:0] tmp_1_reg_4251;
reg   [0:0] icmp_ln50_reg_4260;
reg   [7:0] cipher_V_11_0_reg_928;
reg   [7:0] cipher_V_10_0_reg_938;
reg   [7:0] cipher_V_9_0_reg_948;
reg   [7:0] cipher_V_8_0_reg_958;
reg   [7:0] cipher_V_7_0_reg_968;
reg   [7:0] cipher_V_6_0_reg_978;
reg   [7:0] cipher_V_5_0_reg_988;
reg   [7:0] cipher_V_4_0_reg_998;
reg   [7:0] cipher_V_3_0_reg_1008;
reg   [7:0] cipher_V_2_0_reg_1018;
reg   [7:0] cipher_V_1_0_reg_1028;
reg   [7:0] cipher_V_0_0_reg_1038;
reg   [7:0] cipher_V_12_0_reg_1048;
reg   [7:0] cipher_V_13_0_reg_1058;
reg   [7:0] cipher_V_14_0_reg_1068;
reg   [7:0] cipher_V_15_0_reg_1078;
reg   [3:0] p_02325_1_reg_1088;
reg   [7:0] reg_1169;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state9;
reg   [7:0] reg_1173;
reg   [7:0] reg_1177;
reg    ap_predicate_op74_read_state1;
reg    ap_block_state1;
wire   [7:0] trunc_ln214_fu_1205_p1;
reg   [7:0] trunc_ln214_reg_4264;
wire   [7:0] trunc_ln214_1_fu_1209_p4;
reg   [7:0] trunc_ln214_1_reg_4273;
wire   [7:0] trunc_ln214_2_fu_1219_p4;
reg   [7:0] trunc_ln214_2_reg_4282;
wire   [7:0] trunc_ln214_3_fu_1229_p4;
reg   [7:0] trunc_ln214_3_reg_4291;
reg   [7:0] trunc_ln214_4_reg_4300;
reg   [7:0] trunc_ln214_5_reg_4307;
reg   [7:0] trunc_ln214_6_reg_4314;
reg   [7:0] trunc_ln214_7_reg_4321;
reg   [7:0] trunc_ln214_8_reg_4328;
reg   [7:0] trunc_ln214_9_reg_4336;
reg   [7:0] trunc_ln214_s_reg_4344;
reg   [7:0] trunc_ln214_10_reg_4352;
reg   [7:0] trunc_ln214_11_reg_4360;
reg   [7:0] trunc_ln214_12_reg_4367;
reg   [7:0] trunc_ln214_13_reg_4374;
reg   [7:0] trunc_ln214_14_reg_4381;
reg   [511:0] tmp_data_V_reg_4407;
wire   [31:0] add_ln59_fu_1409_p2;
wire   [0:0] icmp_ln57_fu_1393_p2;
wire   [0:0] icmp_ln61_fu_1415_p2;
reg   [0:0] icmp_ln61_reg_4420;
wire   [7:0] xor_ln1357_fu_1426_p2;
reg   [7:0] xor_ln1357_reg_4424;
wire    ap_CS_fsm_state2;
wire   [7:0] xor_ln1357_1_fu_1432_p2;
reg   [7:0] xor_ln1357_1_reg_4430;
wire   [7:0] xor_ln1357_2_fu_1437_p2;
reg   [7:0] xor_ln1357_2_reg_4436;
wire   [7:0] xor_ln1357_3_fu_1442_p2;
reg   [7:0] xor_ln1357_3_reg_4442;
wire   [7:0] xor_ln1357_4_fu_1447_p2;
reg   [7:0] xor_ln1357_4_reg_4448;
wire   [7:0] xor_ln1357_5_fu_1452_p2;
reg   [7:0] xor_ln1357_5_reg_4453;
wire   [7:0] xor_ln1357_6_fu_1457_p2;
reg   [7:0] xor_ln1357_6_reg_4458;
wire   [7:0] xor_ln1357_7_fu_1462_p2;
reg   [7:0] xor_ln1357_7_reg_4463;
wire   [7:0] xor_ln1357_8_fu_1467_p2;
reg   [7:0] xor_ln1357_8_reg_4468;
wire   [7:0] xor_ln1357_9_fu_1472_p2;
reg   [7:0] xor_ln1357_9_reg_4475;
wire   [7:0] xor_ln1357_10_fu_1477_p2;
reg   [7:0] xor_ln1357_10_reg_4482;
wire   [7:0] xor_ln1357_11_fu_1482_p2;
reg   [7:0] xor_ln1357_11_reg_4489;
wire   [7:0] xor_ln1357_12_fu_1487_p2;
reg   [7:0] xor_ln1357_12_reg_4496;
wire   [7:0] xor_ln1357_13_fu_1492_p2;
reg   [7:0] xor_ln1357_13_reg_4501;
wire   [7:0] xor_ln1357_14_fu_1497_p2;
reg   [7:0] xor_ln1357_14_reg_4506;
wire   [7:0] xor_ln1357_15_fu_1502_p2;
reg   [7:0] xor_ln1357_15_reg_4511;
wire   [7:0] xor_ln719_fu_1527_p2;
reg   [7:0] xor_ln719_reg_4536;
wire   [7:0] xor_ln1357_20_fu_1533_p2;
reg   [7:0] xor_ln1357_20_reg_4541;
wire   [7:0] xor_ln1357_21_fu_1538_p2;
reg   [7:0] xor_ln1357_21_reg_4549;
wire   [7:0] xor_ln1357_22_fu_1543_p2;
reg   [7:0] xor_ln1357_22_reg_4557;
wire   [7:0] xor_ln1357_23_fu_1548_p2;
reg   [7:0] xor_ln1357_23_reg_4565;
wire   [7:0] xor_ln1357_28_fu_1553_p2;
reg   [7:0] xor_ln1357_28_reg_4573;
wire   [7:0] xor_ln1357_29_fu_1558_p2;
reg   [7:0] xor_ln1357_29_reg_4579;
wire   [7:0] xor_ln1357_30_fu_1563_p2;
reg   [7:0] xor_ln1357_30_reg_4585;
wire   [7:0] xor_ln1357_31_fu_1568_p2;
reg   [7:0] xor_ln1357_31_reg_4591;
wire   [7:0] xor_ln1357_16_fu_1593_p2;
reg   [7:0] xor_ln1357_16_reg_4617;
wire    ap_CS_fsm_state4;
wire   [7:0] xor_ln1357_17_fu_1597_p2;
reg   [7:0] xor_ln1357_17_reg_4622;
wire   [7:0] xor_ln1357_18_fu_1602_p2;
reg   [7:0] xor_ln1357_18_reg_4627;
wire   [7:0] xor_ln1357_19_fu_1607_p2;
reg   [7:0] xor_ln1357_19_reg_4632;
wire   [7:0] xor_ln1357_32_fu_1618_p2;
reg   [7:0] xor_ln1357_32_reg_4637;
wire   [7:0] xor_ln1357_33_fu_1624_p2;
reg   [7:0] xor_ln1357_33_reg_4644;
wire   [7:0] xor_ln1357_34_fu_1630_p2;
reg   [7:0] xor_ln1357_34_reg_4651;
wire   [7:0] xor_ln1357_35_fu_1636_p2;
reg   [7:0] xor_ln1357_35_reg_4658;
wire   [7:0] xor_ln1357_40_fu_1642_p2;
reg   [7:0] xor_ln1357_40_reg_4665;
wire   [7:0] xor_ln1357_41_fu_1647_p2;
reg   [7:0] xor_ln1357_41_reg_4672;
wire   [7:0] xor_ln1357_42_fu_1652_p2;
reg   [7:0] xor_ln1357_42_reg_4679;
wire   [7:0] xor_ln1357_43_fu_1657_p2;
reg   [7:0] xor_ln1357_43_reg_4686;
wire   [7:0] xor_ln1357_44_fu_1662_p2;
reg   [7:0] xor_ln1357_44_reg_4693;
wire   [7:0] xor_ln1357_45_fu_1667_p2;
reg   [7:0] xor_ln1357_45_reg_4698;
wire   [7:0] xor_ln1357_46_fu_1672_p2;
reg   [7:0] xor_ln1357_46_reg_4703;
wire   [7:0] xor_ln1357_47_fu_1677_p2;
reg   [7:0] xor_ln1357_47_reg_4708;
wire   [7:0] xor_ln719_1_fu_1702_p2;
reg   [7:0] xor_ln719_1_reg_4733;
wire   [7:0] xor_ln1357_60_fu_1708_p2;
reg   [7:0] xor_ln1357_60_reg_4739;
wire   [7:0] xor_ln1357_61_fu_1713_p2;
reg   [7:0] xor_ln1357_61_reg_4747;
wire   [7:0] xor_ln1357_62_fu_1718_p2;
reg   [7:0] xor_ln1357_62_reg_4755;
wire   [7:0] xor_ln1357_63_fu_1723_p2;
reg   [7:0] xor_ln1357_63_reg_4763;
wire   [7:0] xor_ln1357_48_fu_1748_p2;
reg   [7:0] xor_ln1357_48_reg_4791;
wire    ap_CS_fsm_state6;
wire   [7:0] xor_ln1357_49_fu_1752_p2;
reg   [7:0] xor_ln1357_49_reg_4796;
wire   [7:0] xor_ln1357_50_fu_1757_p2;
reg   [7:0] xor_ln1357_50_reg_4801;
wire   [7:0] xor_ln1357_51_fu_1762_p2;
reg   [7:0] xor_ln1357_51_reg_4806;
wire   [7:0] xor_ln1357_64_fu_1773_p2;
reg   [7:0] xor_ln1357_64_reg_4811;
wire   [7:0] xor_ln1357_65_fu_1779_p2;
reg   [7:0] xor_ln1357_65_reg_4818;
wire   [7:0] xor_ln1357_66_fu_1785_p2;
reg   [7:0] xor_ln1357_66_reg_4825;
wire   [7:0] xor_ln1357_67_fu_1791_p2;
reg   [7:0] xor_ln1357_67_reg_4832;
wire   [7:0] xor_ln1357_72_fu_1797_p2;
reg   [7:0] xor_ln1357_72_reg_4839;
wire   [7:0] xor_ln1357_73_fu_1802_p2;
reg   [7:0] xor_ln1357_73_reg_4846;
wire   [7:0] xor_ln1357_74_fu_1807_p2;
reg   [7:0] xor_ln1357_74_reg_4853;
wire   [7:0] xor_ln1357_75_fu_1812_p2;
reg   [7:0] xor_ln1357_75_reg_4860;
wire   [7:0] xor_ln1357_76_fu_1817_p2;
reg   [7:0] xor_ln1357_76_reg_4867;
wire   [7:0] xor_ln1357_77_fu_1822_p2;
reg   [7:0] xor_ln1357_77_reg_4872;
wire   [7:0] xor_ln1357_78_fu_1827_p2;
reg   [7:0] xor_ln1357_78_reg_4877;
wire   [7:0] xor_ln1357_79_fu_1832_p2;
reg   [7:0] xor_ln1357_79_reg_4882;
wire   [7:0] xor_ln1357_52_fu_1857_p2;
reg   [7:0] xor_ln1357_52_reg_4907;
wire   [7:0] xor_ln1357_53_fu_1861_p2;
reg   [7:0] xor_ln1357_53_reg_4914;
wire   [7:0] xor_ln1357_54_fu_1866_p2;
reg   [7:0] xor_ln1357_54_reg_4921;
wire   [7:0] xor_ln1357_55_fu_1871_p2;
reg   [7:0] xor_ln1357_55_reg_4928;
wire   [7:0] xor_ln719_2_fu_1876_p2;
reg   [7:0] xor_ln719_2_reg_4935;
wire   [7:0] xor_ln1357_84_fu_1882_p2;
reg   [7:0] xor_ln1357_84_reg_4940;
wire   [7:0] xor_ln1357_85_fu_1888_p2;
reg   [7:0] xor_ln1357_85_reg_4948;
wire   [7:0] xor_ln1357_86_fu_1894_p2;
reg   [7:0] xor_ln1357_86_reg_4956;
wire   [7:0] xor_ln1357_87_fu_1900_p2;
reg   [7:0] xor_ln1357_87_reg_4964;
wire   [7:0] xor_ln1357_92_fu_1906_p2;
reg   [7:0] xor_ln1357_92_reg_4972;
wire   [7:0] xor_ln1357_93_fu_1911_p2;
reg   [7:0] xor_ln1357_93_reg_4978;
wire   [7:0] xor_ln1357_94_fu_1916_p2;
reg   [7:0] xor_ln1357_94_reg_4984;
wire   [7:0] xor_ln1357_95_fu_1921_p2;
reg   [7:0] xor_ln1357_95_reg_4990;
wire   [7:0] xor_ln1357_80_fu_1946_p2;
reg   [7:0] xor_ln1357_80_reg_5016;
wire    ap_CS_fsm_state8;
wire   [7:0] xor_ln1357_81_fu_1950_p2;
reg   [7:0] xor_ln1357_81_reg_5021;
wire   [7:0] xor_ln1357_82_fu_1955_p2;
reg   [7:0] xor_ln1357_82_reg_5026;
wire   [7:0] xor_ln1357_83_fu_1960_p2;
reg   [7:0] xor_ln1357_83_reg_5031;
wire   [7:0] xor_ln1357_96_fu_1971_p2;
reg   [7:0] xor_ln1357_96_reg_5036;
wire   [7:0] xor_ln1357_97_fu_1977_p2;
reg   [7:0] xor_ln1357_97_reg_5043;
wire   [7:0] xor_ln1357_98_fu_1983_p2;
reg   [7:0] xor_ln1357_98_reg_5050;
wire   [7:0] xor_ln1357_99_fu_1989_p2;
reg   [7:0] xor_ln1357_99_reg_5057;
wire   [7:0] xor_ln1357_104_fu_1995_p2;
reg   [7:0] xor_ln1357_104_reg_5064;
wire   [7:0] xor_ln1357_105_fu_2000_p2;
reg   [7:0] xor_ln1357_105_reg_5071;
wire   [7:0] xor_ln1357_106_fu_2005_p2;
reg   [7:0] xor_ln1357_106_reg_5078;
wire   [7:0] xor_ln1357_107_fu_2010_p2;
reg   [7:0] xor_ln1357_107_reg_5085;
wire   [7:0] xor_ln1357_108_fu_2015_p2;
reg   [7:0] xor_ln1357_108_reg_5092;
wire   [7:0] xor_ln1357_109_fu_2020_p2;
reg   [7:0] xor_ln1357_109_reg_5097;
wire   [7:0] xor_ln1357_110_fu_2025_p2;
reg   [7:0] xor_ln1357_110_reg_5102;
wire   [7:0] xor_ln1357_111_fu_2030_p2;
reg   [7:0] xor_ln1357_111_reg_5107;
wire   [7:0] xor_ln719_3_fu_2055_p2;
reg   [7:0] xor_ln719_3_reg_5132;
wire   [7:0] xor_ln1357_124_fu_2061_p2;
reg   [7:0] xor_ln1357_124_reg_5138;
wire   [7:0] xor_ln1357_125_fu_2066_p2;
reg   [7:0] xor_ln1357_125_reg_5145;
wire   [7:0] xor_ln1357_126_fu_2071_p2;
reg   [7:0] xor_ln1357_126_reg_5152;
wire   [7:0] xor_ln1357_127_fu_2076_p2;
reg   [7:0] xor_ln1357_127_reg_5159;
wire   [7:0] xor_ln1357_112_fu_2101_p2;
reg   [7:0] xor_ln1357_112_reg_5186;
wire    ap_CS_fsm_state10;
wire   [7:0] xor_ln1357_113_fu_2105_p2;
reg   [7:0] xor_ln1357_113_reg_5191;
wire   [7:0] xor_ln1357_114_fu_2110_p2;
reg   [7:0] xor_ln1357_114_reg_5196;
wire   [7:0] xor_ln1357_115_fu_2115_p2;
reg   [7:0] xor_ln1357_115_reg_5201;
wire   [7:0] xor_ln1357_128_fu_2126_p2;
reg   [7:0] xor_ln1357_128_reg_5206;
wire   [7:0] xor_ln1357_129_fu_2132_p2;
reg   [7:0] xor_ln1357_129_reg_5213;
wire   [7:0] xor_ln1357_130_fu_2138_p2;
reg   [7:0] xor_ln1357_130_reg_5220;
wire   [7:0] xor_ln1357_131_fu_2144_p2;
reg   [7:0] xor_ln1357_131_reg_5227;
wire   [7:0] xor_ln1357_136_fu_2150_p2;
reg   [7:0] xor_ln1357_136_reg_5234;
wire   [7:0] xor_ln1357_137_fu_2155_p2;
reg   [7:0] xor_ln1357_137_reg_5240;
wire   [7:0] xor_ln1357_138_fu_2160_p2;
reg   [7:0] xor_ln1357_138_reg_5246;
wire   [7:0] xor_ln1357_139_fu_2165_p2;
reg   [7:0] xor_ln1357_139_reg_5252;
wire   [7:0] xor_ln1357_140_fu_2170_p2;
reg   [7:0] xor_ln1357_140_reg_5258;
wire   [7:0] xor_ln1357_141_fu_2175_p2;
reg   [7:0] xor_ln1357_141_reg_5263;
wire   [7:0] xor_ln1357_142_fu_2180_p2;
reg   [7:0] xor_ln1357_142_reg_5268;
wire   [7:0] xor_ln1357_143_fu_2185_p2;
reg   [7:0] xor_ln1357_143_reg_5273;
wire   [7:0] xor_ln1357_24_fu_2210_p2;
reg   [7:0] xor_ln1357_24_reg_5298;
wire    ap_CS_fsm_state11;
wire   [7:0] xor_ln1357_25_fu_2214_p2;
reg   [7:0] xor_ln1357_25_reg_5303;
wire   [7:0] xor_ln1357_26_fu_2218_p2;
reg   [7:0] xor_ln1357_26_reg_5308;
wire   [7:0] xor_ln1357_27_fu_2222_p2;
reg   [7:0] xor_ln1357_27_reg_5313;
wire   [7:0] xor_ln1357_36_fu_2226_p2;
reg   [7:0] xor_ln1357_36_reg_5318;
wire   [7:0] xor_ln1357_37_fu_2230_p2;
reg   [7:0] xor_ln1357_37_reg_5323;
wire   [7:0] xor_ln1357_38_fu_2234_p2;
reg   [7:0] xor_ln1357_38_reg_5328;
wire   [7:0] xor_ln1357_39_fu_2238_p2;
reg   [7:0] xor_ln1357_39_reg_5333;
wire   [7:0] xor_ln1357_56_fu_2242_p2;
reg   [7:0] xor_ln1357_56_reg_5338;
wire   [7:0] xor_ln1357_57_fu_2246_p2;
reg   [7:0] xor_ln1357_57_reg_5343;
wire   [7:0] xor_ln1357_58_fu_2250_p2;
reg   [7:0] xor_ln1357_58_reg_5348;
wire   [7:0] xor_ln1357_59_fu_2254_p2;
reg   [7:0] xor_ln1357_59_reg_5353;
wire   [7:0] xor_ln1357_68_fu_2258_p2;
reg   [7:0] xor_ln1357_68_reg_5358;
wire   [7:0] xor_ln1357_69_fu_2262_p2;
reg   [7:0] xor_ln1357_69_reg_5363;
wire   [7:0] xor_ln1357_70_fu_2266_p2;
reg   [7:0] xor_ln1357_70_reg_5368;
wire   [7:0] xor_ln1357_71_fu_2270_p2;
reg   [7:0] xor_ln1357_71_reg_5373;
wire   [7:0] xor_ln1357_88_fu_2274_p2;
reg   [7:0] xor_ln1357_88_reg_5378;
wire   [7:0] xor_ln1357_89_fu_2278_p2;
reg   [7:0] xor_ln1357_89_reg_5383;
wire   [7:0] xor_ln1357_90_fu_2282_p2;
reg   [7:0] xor_ln1357_90_reg_5388;
wire   [7:0] xor_ln1357_91_fu_2286_p2;
reg   [7:0] xor_ln1357_91_reg_5393;
wire   [7:0] xor_ln1357_100_fu_2290_p2;
reg   [7:0] xor_ln1357_100_reg_5398;
wire   [7:0] xor_ln1357_101_fu_2294_p2;
reg   [7:0] xor_ln1357_101_reg_5403;
wire   [7:0] xor_ln1357_102_fu_2298_p2;
reg   [7:0] xor_ln1357_102_reg_5408;
wire   [7:0] xor_ln1357_103_fu_2302_p2;
reg   [7:0] xor_ln1357_103_reg_5413;
wire   [7:0] xor_ln1357_116_fu_2306_p2;
reg   [7:0] xor_ln1357_116_reg_5418;
wire   [7:0] xor_ln1357_117_fu_2310_p2;
reg   [7:0] xor_ln1357_117_reg_5423;
wire   [7:0] xor_ln1357_118_fu_2315_p2;
reg   [7:0] xor_ln1357_118_reg_5428;
wire   [7:0] xor_ln1357_119_fu_2320_p2;
reg   [7:0] xor_ln1357_119_reg_5433;
wire   [7:0] xor_ln1357_120_fu_2325_p2;
reg   [7:0] xor_ln1357_120_reg_5438;
wire   [7:0] xor_ln1357_121_fu_2330_p2;
reg   [7:0] xor_ln1357_121_reg_5443;
wire   [7:0] xor_ln1357_122_fu_2335_p2;
reg   [7:0] xor_ln1357_122_reg_5448;
wire   [7:0] xor_ln1357_123_fu_2340_p2;
reg   [7:0] xor_ln1357_123_reg_5453;
wire   [7:0] xor_ln1357_132_fu_2345_p2;
reg   [7:0] xor_ln1357_132_reg_5458;
wire   [7:0] xor_ln1357_133_fu_2350_p2;
reg   [7:0] xor_ln1357_133_reg_5463;
wire   [7:0] xor_ln1357_134_fu_2355_p2;
reg   [7:0] xor_ln1357_134_reg_5468;
wire   [7:0] xor_ln1357_135_fu_2360_p2;
reg   [7:0] xor_ln1357_135_reg_5473;
wire   [7:0] xor_ln719_4_fu_2365_p2;
reg   [7:0] xor_ln719_4_reg_5478;
wire   [7:0] xor_ln1357_145_fu_2371_p2;
reg   [7:0] xor_ln1357_145_reg_5483;
wire   [7:0] xor_ln1357_146_fu_2376_p2;
reg   [7:0] xor_ln1357_146_reg_5494;
wire   [7:0] xor_ln1357_147_fu_2381_p2;
reg   [7:0] xor_ln1357_147_reg_5505;
wire   [7:0] xor_ln1357_148_fu_2386_p2;
reg   [7:0] xor_ln1357_148_reg_5516;
wire   [7:0] xor_ln1357_149_fu_2392_p2;
reg   [7:0] xor_ln1357_149_reg_5527;
wire   [7:0] xor_ln1357_150_fu_2398_p2;
reg   [7:0] xor_ln1357_150_reg_5538;
wire   [7:0] xor_ln1357_151_fu_2404_p2;
reg   [7:0] xor_ln1357_151_reg_5549;
wire   [7:0] xor_ln1357_152_fu_2410_p2;
reg   [7:0] xor_ln1357_152_reg_5560;
wire   [7:0] xor_ln1357_153_fu_2415_p2;
reg   [7:0] xor_ln1357_153_reg_5571;
wire   [7:0] xor_ln1357_154_fu_2420_p2;
reg   [7:0] xor_ln1357_154_reg_5582;
wire   [7:0] xor_ln1357_155_fu_2425_p2;
reg   [7:0] xor_ln1357_155_reg_5593;
wire   [7:0] xor_ln1357_156_fu_2430_p2;
reg   [7:0] xor_ln1357_156_reg_5604;
wire   [7:0] xor_ln1357_157_fu_2435_p2;
reg   [7:0] xor_ln1357_157_reg_5615;
wire   [7:0] xor_ln1357_158_fu_2440_p2;
reg   [7:0] xor_ln1357_158_reg_5626;
wire   [7:0] xor_ln1357_159_fu_2445_p2;
reg   [7:0] xor_ln1357_159_reg_5637;
wire   [7:0] cipher_0_V_fu_2614_p2;
wire   [7:0] cipher_1_V_fu_2619_p2;
wire   [7:0] cipher_2_V_fu_2624_p2;
wire   [7:0] cipher_3_V_fu_2629_p2;
wire   [7:0] cipher_4_V_fu_2634_p2;
wire   [7:0] cipher_5_V_fu_2639_p2;
wire   [7:0] cipher_6_V_fu_2644_p2;
wire   [7:0] cipher_7_V_fu_2649_p2;
wire   [7:0] cipher_8_V_fu_2654_p2;
wire   [7:0] cipher_9_V_fu_2659_p2;
wire   [7:0] cipher_10_V_fu_2664_p2;
wire   [7:0] cipher_11_V_fu_2669_p2;
wire   [7:0] cipher_12_V_fu_2674_p2;
wire   [7:0] cipher_13_V_fu_2679_p2;
wire   [7:0] cipher_14_V_fu_2684_p2;
wire   [7:0] cipher_15_V_fu_2689_p2;
wire   [0:0] icmp_ln162_fu_2694_p2;
reg   [0:0] icmp_ln162_reg_5728;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state12_pp0_stage0_iter0;
wire    ap_block_state13_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] j_V_fu_2780_p2;
reg   [3:0] j_V_reg_5812;
reg    ap_enable_reg_pp0_iter0;
wire   [7:0] cipher_0_V_3_fu_3258_p2;
reg    ap_enable_reg_pp0_iter1;
wire   [7:0] cipher_1_V_4_fu_3310_p2;
wire   [7:0] cipher_2_V_4_fu_3356_p2;
wire   [7:0] cipher_3_V_4_fu_3408_p2;
wire   [7:0] cipher_4_V_3_fu_3460_p2;
wire   [7:0] cipher_5_V_4_fu_3512_p2;
wire   [7:0] cipher_6_V_4_fu_3558_p2;
wire   [7:0] cipher_7_V_4_fu_3610_p2;
wire   [7:0] cipher_8_V_3_fu_3662_p2;
wire   [7:0] cipher_9_V_4_fu_3714_p2;
wire   [7:0] cipher_10_V_4_fu_3760_p2;
wire   [7:0] cipher_11_V_4_fu_3812_p2;
wire   [7:0] cipher_12_V_3_fu_3864_p2;
wire   [7:0] cipher_13_V_4_fu_3916_p2;
wire   [7:0] cipher_14_V_4_fu_3962_p2;
wire   [7:0] cipher_15_V_4_fu_4014_p2;
wire    ap_CS_fsm_state14;
wire   [31:0] add_ln63_fu_4235_p2;
wire    ap_CS_fsm_state16;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state12;
reg   [7:0] ap_phi_mux_cipher_V_11_0_phi_fu_931_p4;
wire    ap_block_pp0_stage0;
reg   [7:0] ap_phi_mux_cipher_V_10_0_phi_fu_941_p4;
reg   [7:0] ap_phi_mux_cipher_V_9_0_phi_fu_951_p4;
reg   [7:0] ap_phi_mux_cipher_V_8_0_phi_fu_961_p4;
reg   [7:0] ap_phi_mux_cipher_V_7_0_phi_fu_971_p4;
reg   [7:0] ap_phi_mux_cipher_V_6_0_phi_fu_981_p4;
reg   [7:0] ap_phi_mux_cipher_V_5_0_phi_fu_991_p4;
reg   [7:0] ap_phi_mux_cipher_V_4_0_phi_fu_1001_p4;
reg   [7:0] ap_phi_mux_cipher_V_3_0_phi_fu_1011_p4;
reg   [7:0] ap_phi_mux_cipher_V_2_0_phi_fu_1021_p4;
reg   [7:0] ap_phi_mux_cipher_V_1_0_phi_fu_1031_p4;
reg   [7:0] ap_phi_mux_cipher_V_0_0_phi_fu_1041_p4;
reg   [7:0] ap_phi_mux_cipher_V_12_0_phi_fu_1051_p4;
reg   [7:0] ap_phi_mux_cipher_V_13_0_phi_fu_1061_p4;
reg   [7:0] ap_phi_mux_cipher_V_14_0_phi_fu_1071_p4;
reg   [7:0] ap_phi_mux_cipher_V_15_0_phi_fu_1081_p4;
reg   [3:0] ap_phi_mux_p_02325_1_phi_fu_1092_p4;
wire   [7:0] ap_phi_reg_pp0_iter0_phi_ln719_reg_1100;
reg   [7:0] ap_phi_reg_pp0_iter1_phi_ln719_reg_1100;
reg   [0:0] flag_flag_0_reg_1123;
reg   [31:0] flag_load_2_reg_1137;
wire   [0:0] ap_phi_mux_flag_flag_1_phi_fu_1151_p4;
reg   [0:0] flag_flag_1_reg_1147;
reg   [31:0] flag_new_1_reg_1159;
wire   [63:0] zext_ln544_fu_1365_p1;
wire   [63:0] zext_ln544_1_fu_1370_p1;
wire   [63:0] zext_ln544_2_fu_1375_p1;
wire   [63:0] zext_ln544_3_fu_1380_p1;
wire   [63:0] zext_ln544_4_fu_1507_p1;
wire   [63:0] zext_ln544_5_fu_1512_p1;
wire   [63:0] zext_ln544_6_fu_1517_p1;
wire   [63:0] zext_ln544_7_fu_1522_p1;
wire   [63:0] zext_ln544_8_fu_1573_p1;
wire   [63:0] zext_ln544_9_fu_1578_p1;
wire   [63:0] zext_ln544_10_fu_1583_p1;
wire   [63:0] zext_ln544_11_fu_1588_p1;
wire   [63:0] zext_ln544_12_fu_1682_p1;
wire   [63:0] zext_ln544_13_fu_1687_p1;
wire   [63:0] zext_ln544_14_fu_1692_p1;
wire   [63:0] zext_ln544_15_fu_1697_p1;
wire   [63:0] zext_ln544_16_fu_1728_p1;
wire   [63:0] zext_ln544_17_fu_1733_p1;
wire   [63:0] zext_ln544_18_fu_1738_p1;
wire   [63:0] zext_ln544_19_fu_1743_p1;
wire   [63:0] zext_ln544_20_fu_1837_p1;
wire   [63:0] zext_ln544_21_fu_1842_p1;
wire   [63:0] zext_ln544_22_fu_1847_p1;
wire   [63:0] zext_ln544_23_fu_1852_p1;
wire   [63:0] zext_ln544_24_fu_1926_p1;
wire   [63:0] zext_ln544_25_fu_1931_p1;
wire   [63:0] zext_ln544_26_fu_1936_p1;
wire   [63:0] zext_ln544_27_fu_1941_p1;
wire   [63:0] zext_ln544_28_fu_2035_p1;
wire   [63:0] zext_ln544_29_fu_2040_p1;
wire   [63:0] zext_ln544_30_fu_2045_p1;
wire   [63:0] zext_ln544_31_fu_2050_p1;
wire   [63:0] zext_ln544_32_fu_2081_p1;
wire   [63:0] zext_ln544_33_fu_2086_p1;
wire   [63:0] zext_ln544_34_fu_2091_p1;
wire   [63:0] zext_ln544_35_fu_2096_p1;
wire   [63:0] zext_ln544_36_fu_2190_p1;
wire   [63:0] zext_ln544_37_fu_2195_p1;
wire   [63:0] zext_ln544_38_fu_2200_p1;
wire   [63:0] zext_ln544_39_fu_2205_p1;
wire   [63:0] zext_ln544_56_fu_2700_p1;
wire   [63:0] zext_ln544_57_fu_2705_p1;
wire   [63:0] zext_ln544_58_fu_2710_p1;
wire   [63:0] zext_ln544_59_fu_2715_p1;
wire   [63:0] zext_ln544_60_fu_2720_p1;
wire   [63:0] zext_ln544_61_fu_2725_p1;
wire   [63:0] zext_ln544_62_fu_2730_p1;
wire   [63:0] zext_ln544_63_fu_2735_p1;
wire   [63:0] zext_ln544_64_fu_2740_p1;
wire   [63:0] zext_ln544_65_fu_2745_p1;
wire   [63:0] zext_ln544_66_fu_2750_p1;
wire   [63:0] zext_ln544_67_fu_2755_p1;
wire   [63:0] zext_ln544_68_fu_2760_p1;
wire   [63:0] zext_ln544_69_fu_2765_p1;
wire   [63:0] zext_ln544_70_fu_2770_p1;
wire   [63:0] zext_ln544_71_fu_2775_p1;
wire   [63:0] zext_ln544_40_fu_4020_p1;
wire   [63:0] zext_ln544_41_fu_4025_p1;
wire   [63:0] zext_ln544_42_fu_4030_p1;
wire   [63:0] zext_ln544_43_fu_4035_p1;
wire   [63:0] zext_ln544_44_fu_4040_p1;
wire   [63:0] zext_ln544_45_fu_4045_p1;
wire   [63:0] zext_ln544_46_fu_4050_p1;
wire   [63:0] zext_ln544_47_fu_4055_p1;
wire   [63:0] zext_ln544_48_fu_4060_p1;
wire   [63:0] zext_ln544_49_fu_4065_p1;
wire   [63:0] zext_ln544_50_fu_4070_p1;
wire   [63:0] zext_ln544_51_fu_4075_p1;
wire   [63:0] zext_ln544_52_fu_4080_p1;
wire   [63:0] zext_ln544_53_fu_4085_p1;
wire   [63:0] zext_ln544_54_fu_4090_p1;
wire   [63:0] zext_ln544_55_fu_4095_p1;
wire    ap_CS_fsm_state17;
wire   [127:0] trunc_ln209_fu_1399_p1;
wire   [127:0] trunc_ln209_1_fu_4226_p1;
reg    ap_predicate_op774_write_state15;
reg    ap_block_state15_io;
wire   [30:0] tmp_4_fu_1185_p4;
wire   [7:0] xor_ln1357_144_fu_1421_p2;
wire   [7:0] xor_ln1357_160_fu_1612_p2;
wire   [7:0] xor_ln1357_161_fu_1767_p2;
wire   [7:0] xor_ln1357_162_fu_1965_p2;
wire   [7:0] xor_ln1357_163_fu_2120_p2;
wire   [7:0] trunc_ln214_30_fu_2598_p4;
wire   [7:0] trunc_ln214_29_fu_2588_p4;
wire   [7:0] trunc_ln214_28_fu_2578_p4;
wire   [7:0] trunc_ln214_27_fu_2568_p4;
wire   [7:0] trunc_ln214_26_fu_2558_p4;
wire   [7:0] trunc_ln214_25_fu_2548_p4;
wire   [7:0] trunc_ln214_24_fu_2538_p4;
wire   [7:0] trunc_ln214_23_fu_2528_p4;
wire   [7:0] trunc_ln214_22_fu_2518_p4;
wire   [7:0] trunc_ln214_21_fu_2508_p4;
wire   [7:0] trunc_ln214_20_fu_2498_p4;
wire   [7:0] trunc_ln214_19_fu_2488_p4;
wire   [7:0] trunc_ln214_18_fu_2478_p4;
wire   [7:0] trunc_ln214_17_fu_2468_p4;
wire   [7:0] trunc_ln214_16_fu_2458_p4;
wire   [7:0] trunc_ln214_15_fu_2454_p1;
wire   [7:0] shl_ln1503_fu_2794_p2;
wire   [0:0] tmp_5_fu_2786_p3;
wire   [7:0] xor_ln1503_fu_2800_p2;
wire   [7:0] shl_ln1503_1_fu_2822_p2;
wire   [0:0] tmp_6_fu_2814_p3;
wire   [7:0] xor_ln1503_1_fu_2828_p2;
wire   [7:0] shl_ln1503_2_fu_2850_p2;
wire   [0:0] tmp_7_fu_2842_p3;
wire   [7:0] xor_ln1503_2_fu_2856_p2;
wire   [7:0] shl_ln1503_3_fu_2878_p2;
wire   [0:0] tmp_8_fu_2870_p3;
wire   [7:0] xor_ln1503_3_fu_2884_p2;
wire   [7:0] shl_ln1503_4_fu_2906_p2;
wire   [0:0] tmp_9_fu_2898_p3;
wire   [7:0] xor_ln1503_4_fu_2912_p2;
wire   [7:0] shl_ln1503_5_fu_2934_p2;
wire   [0:0] tmp_10_fu_2926_p3;
wire   [7:0] xor_ln1503_5_fu_2940_p2;
wire   [7:0] shl_ln1503_6_fu_2962_p2;
wire   [0:0] tmp_11_fu_2954_p3;
wire   [7:0] xor_ln1503_6_fu_2968_p2;
wire   [7:0] shl_ln1503_7_fu_2990_p2;
wire   [0:0] tmp_12_fu_2982_p3;
wire   [7:0] xor_ln1503_7_fu_2996_p2;
wire   [7:0] shl_ln1503_8_fu_3018_p2;
wire   [0:0] tmp_13_fu_3010_p3;
wire   [7:0] xor_ln1503_8_fu_3024_p2;
wire   [7:0] shl_ln1503_9_fu_3046_p2;
wire   [0:0] tmp_14_fu_3038_p3;
wire   [7:0] xor_ln1503_9_fu_3052_p2;
wire   [7:0] shl_ln1503_10_fu_3074_p2;
wire   [0:0] tmp_15_fu_3066_p3;
wire   [7:0] xor_ln1503_10_fu_3080_p2;
wire   [7:0] shl_ln1503_11_fu_3102_p2;
wire   [0:0] tmp_16_fu_3094_p3;
wire   [7:0] xor_ln1503_11_fu_3108_p2;
wire   [7:0] shl_ln1503_12_fu_3130_p2;
wire   [0:0] tmp_17_fu_3122_p3;
wire   [7:0] xor_ln1503_12_fu_3136_p2;
wire   [7:0] shl_ln1503_13_fu_3158_p2;
wire   [0:0] tmp_18_fu_3150_p3;
wire   [7:0] xor_ln1503_13_fu_3164_p2;
wire   [7:0] shl_ln1503_14_fu_3186_p2;
wire   [0:0] tmp_19_fu_3178_p3;
wire   [7:0] xor_ln1503_14_fu_3192_p2;
wire   [7:0] shl_ln1503_15_fu_3214_p2;
wire   [0:0] tmp_20_fu_3206_p3;
wire   [7:0] xor_ln1503_15_fu_3220_p2;
wire   [7:0] xor_ln719_22_fu_3234_p2;
wire   [7:0] temp_column_b_1_V_fu_2834_p3;
wire   [7:0] xor_ln719_24_fu_3246_p2;
wire   [7:0] temp_column_b_0_V_fu_2806_p3;
wire   [7:0] xor_ln719_25_fu_3252_p2;
wire   [7:0] xor_ln719_23_fu_3240_p2;
wire   [7:0] xor_ln719_27_fu_3286_p2;
wire   [7:0] temp_column_b_2_V_fu_2862_p3;
wire   [7:0] phi_ln719_1_fu_3264_p18;
wire   [7:0] xor_ln719_29_fu_3298_p2;
wire   [7:0] xor_ln719_30_fu_3304_p2;
wire   [7:0] xor_ln719_28_fu_3292_p2;
wire   [7:0] temp_column_b_3_V_fu_2890_p3;
wire   [7:0] phi_ln719_2_fu_3316_p18;
wire   [7:0] xor_ln719_33_fu_3344_p2;
wire   [7:0] xor_ln719_34_fu_3350_p2;
wire   [7:0] xor_ln719_32_fu_3338_p2;
wire   [7:0] xor_ln719_36_fu_3384_p2;
wire   [7:0] phi_ln719_3_fu_3362_p18;
wire   [7:0] xor_ln719_38_fu_3396_p2;
wire   [7:0] xor_ln719_39_fu_3402_p2;
wire   [7:0] xor_ln719_37_fu_3390_p2;
wire   [7:0] xor_ln719_41_fu_3436_p2;
wire   [7:0] temp_column_b_1_V_1_fu_2946_p3;
wire   [7:0] phi_ln719_4_fu_3414_p18;
wire   [7:0] xor_ln719_43_fu_3448_p2;
wire   [7:0] temp_column_b_0_V_1_fu_2918_p3;
wire   [7:0] xor_ln719_44_fu_3454_p2;
wire   [7:0] xor_ln719_42_fu_3442_p2;
wire   [7:0] xor_ln719_46_fu_3488_p2;
wire   [7:0] temp_column_b_2_V_1_fu_2974_p3;
wire   [7:0] phi_ln719_5_fu_3466_p18;
wire   [7:0] xor_ln719_48_fu_3500_p2;
wire   [7:0] xor_ln719_49_fu_3506_p2;
wire   [7:0] xor_ln719_47_fu_3494_p2;
wire   [7:0] temp_column_b_3_V_1_fu_3002_p3;
wire   [7:0] phi_ln719_6_fu_3518_p18;
wire   [7:0] xor_ln719_52_fu_3546_p2;
wire   [7:0] xor_ln719_53_fu_3552_p2;
wire   [7:0] xor_ln719_51_fu_3540_p2;
wire   [7:0] xor_ln719_55_fu_3586_p2;
wire   [7:0] phi_ln719_7_fu_3564_p18;
wire   [7:0] xor_ln719_57_fu_3598_p2;
wire   [7:0] xor_ln719_58_fu_3604_p2;
wire   [7:0] xor_ln719_56_fu_3592_p2;
wire   [7:0] xor_ln719_60_fu_3638_p2;
wire   [7:0] temp_column_b_1_V_2_fu_3058_p3;
wire   [7:0] phi_ln719_8_fu_3616_p18;
wire   [7:0] xor_ln719_62_fu_3650_p2;
wire   [7:0] temp_column_b_0_V_2_fu_3030_p3;
wire   [7:0] xor_ln719_63_fu_3656_p2;
wire   [7:0] xor_ln719_61_fu_3644_p2;
wire   [7:0] xor_ln719_65_fu_3690_p2;
wire   [7:0] temp_column_b_2_V_2_fu_3086_p3;
wire   [7:0] phi_ln719_9_fu_3668_p18;
wire   [7:0] xor_ln719_67_fu_3702_p2;
wire   [7:0] xor_ln719_68_fu_3708_p2;
wire   [7:0] xor_ln719_66_fu_3696_p2;
wire   [7:0] temp_column_b_3_V_2_fu_3114_p3;
wire   [7:0] phi_ln719_s_fu_3720_p18;
wire   [7:0] xor_ln719_71_fu_3748_p2;
wire   [7:0] xor_ln719_72_fu_3754_p2;
wire   [7:0] xor_ln719_70_fu_3742_p2;
wire   [7:0] xor_ln719_74_fu_3788_p2;
wire   [7:0] phi_ln719_10_fu_3766_p18;
wire   [7:0] xor_ln719_76_fu_3800_p2;
wire   [7:0] xor_ln719_77_fu_3806_p2;
wire   [7:0] xor_ln719_75_fu_3794_p2;
wire   [7:0] xor_ln719_79_fu_3840_p2;
wire   [7:0] temp_column_b_1_V_3_fu_3170_p3;
wire   [7:0] phi_ln719_11_fu_3818_p18;
wire   [7:0] xor_ln719_81_fu_3852_p2;
wire   [7:0] temp_column_b_0_V_3_fu_3142_p3;
wire   [7:0] xor_ln719_82_fu_3858_p2;
wire   [7:0] xor_ln719_80_fu_3846_p2;
wire   [7:0] xor_ln719_84_fu_3892_p2;
wire   [7:0] temp_column_b_2_V_3_fu_3198_p3;
wire   [7:0] phi_ln719_12_fu_3870_p18;
wire   [7:0] xor_ln719_86_fu_3904_p2;
wire   [7:0] xor_ln719_87_fu_3910_p2;
wire   [7:0] xor_ln719_85_fu_3898_p2;
wire   [7:0] temp_column_b_3_V_3_fu_3226_p3;
wire   [7:0] phi_ln719_13_fu_3922_p18;
wire   [7:0] xor_ln719_90_fu_3950_p2;
wire   [7:0] xor_ln719_91_fu_3956_p2;
wire   [7:0] xor_ln719_89_fu_3944_p2;
wire   [7:0] xor_ln719_93_fu_3990_p2;
wire   [7:0] phi_ln719_14_fu_3968_p18;
wire   [7:0] xor_ln719_95_fu_4002_p2;
wire   [7:0] xor_ln719_96_fu_4008_p2;
wire   [7:0] xor_ln719_94_fu_3996_p2;
wire   [7:0] xor_ln719_5_fu_4100_p2;
wire   [7:0] cipher_0_V_2_fu_4104_p2;
wire   [7:0] cipher_1_V_3_fu_4110_p2;
wire   [7:0] cipher_2_V_3_fu_4115_p2;
wire   [7:0] cipher_3_V_3_fu_4120_p2;
wire   [7:0] cipher_4_V_2_fu_4125_p2;
wire   [7:0] cipher_5_V_3_fu_4130_p2;
wire   [7:0] cipher_6_V_3_fu_4135_p2;
wire   [7:0] cipher_7_V_3_fu_4140_p2;
wire   [7:0] cipher_8_V_2_fu_4145_p2;
wire   [7:0] cipher_9_V_3_fu_4150_p2;
wire   [7:0] cipher_10_V_3_fu_4155_p2;
wire   [7:0] cipher_11_V_3_fu_4160_p2;
wire   [7:0] cipher_12_V_2_fu_4165_p2;
wire   [7:0] cipher_13_V_3_fu_4170_p2;
wire   [7:0] cipher_14_V_3_fu_4175_p2;
wire   [7:0] cipher_15_V_3_fu_4180_p2;
wire   [127:0] cipherT_V_fu_4185_p17;
reg   [15:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_955;
reg    ap_condition_789;
reg    ap_condition_265;

// power-on initialization
initial begin
#0 flag = 32'd0;
#0 plainT_V = 128'd0;
#0 keyT_V = 128'd0;
#0 ap_CS_fsm = 16'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

kern_enc_SBOX_V #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
SBOX_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(SBOX_V_address0),
    .ce0(SBOX_V_ce0),
    .q0(SBOX_V_q0),
    .address1(SBOX_V_address1),
    .ce1(SBOX_V_ce1),
    .q1(SBOX_V_q1),
    .address2(SBOX_V_address2),
    .ce2(SBOX_V_ce2),
    .q2(SBOX_V_q2),
    .address3(SBOX_V_address3),
    .ce3(SBOX_V_ce3),
    .q3(SBOX_V_q3),
    .address4(SBOX_V_address4),
    .ce4(SBOX_V_ce4),
    .q4(SBOX_V_q4),
    .address5(SBOX_V_address5),
    .ce5(SBOX_V_ce5),
    .q5(SBOX_V_q5),
    .address6(SBOX_V_address6),
    .ce6(SBOX_V_ce6),
    .q6(SBOX_V_q6),
    .address7(SBOX_V_address7),
    .ce7(SBOX_V_ce7),
    .q7(SBOX_V_q7),
    .address8(SBOX_V_address8),
    .ce8(SBOX_V_ce8),
    .q8(SBOX_V_q8),
    .address9(SBOX_V_address9),
    .ce9(SBOX_V_ce9),
    .q9(SBOX_V_q9),
    .address10(SBOX_V_address10),
    .ce10(SBOX_V_ce10),
    .q10(SBOX_V_q10),
    .address11(SBOX_V_address11),
    .ce11(SBOX_V_ce11),
    .q11(SBOX_V_q11),
    .address12(SBOX_V_address12),
    .ce12(SBOX_V_ce12),
    .q12(SBOX_V_q12),
    .address13(SBOX_V_address13),
    .ce13(SBOX_V_ce13),
    .q13(SBOX_V_q13),
    .address14(SBOX_V_address14),
    .ce14(SBOX_V_ce14),
    .q14(SBOX_V_q14),
    .address15(SBOX_V_address15),
    .ce15(SBOX_V_ce15),
    .q15(SBOX_V_q15)
);

kern_enc_mux_164_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
kern_enc_mux_164_8_1_1_U1(
    .din0(trunc_ln214_13_reg_4374),
    .din1(xor_ln1357_1_reg_4430),
    .din2(xor_ln1357_17_reg_4622),
    .din3(xor_ln1357_33_reg_4644),
    .din4(xor_ln1357_49_reg_4796),
    .din5(xor_ln1357_65_reg_4818),
    .din6(xor_ln1357_81_reg_5021),
    .din7(xor_ln1357_97_reg_5043),
    .din8(xor_ln1357_113_reg_5191),
    .din9(xor_ln1357_129_reg_5213),
    .din10(xor_ln1357_145_reg_5483),
    .din11(xor_ln1357_145_reg_5483),
    .din12(xor_ln1357_145_reg_5483),
    .din13(xor_ln1357_145_reg_5483),
    .din14(xor_ln1357_145_reg_5483),
    .din15(xor_ln1357_145_reg_5483),
    .din16(p_02325_1_reg_1088),
    .dout(phi_ln719_1_fu_3264_p18)
);

kern_enc_mux_164_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
kern_enc_mux_164_8_1_1_U2(
    .din0(trunc_ln214_12_reg_4367),
    .din1(xor_ln1357_2_reg_4436),
    .din2(xor_ln1357_18_reg_4627),
    .din3(xor_ln1357_34_reg_4651),
    .din4(xor_ln1357_50_reg_4801),
    .din5(xor_ln1357_66_reg_4825),
    .din6(xor_ln1357_82_reg_5026),
    .din7(xor_ln1357_98_reg_5050),
    .din8(xor_ln1357_114_reg_5196),
    .din9(xor_ln1357_130_reg_5220),
    .din10(xor_ln1357_146_reg_5494),
    .din11(xor_ln1357_146_reg_5494),
    .din12(xor_ln1357_146_reg_5494),
    .din13(xor_ln1357_146_reg_5494),
    .din14(xor_ln1357_146_reg_5494),
    .din15(xor_ln1357_146_reg_5494),
    .din16(p_02325_1_reg_1088),
    .dout(phi_ln719_2_fu_3316_p18)
);

kern_enc_mux_164_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
kern_enc_mux_164_8_1_1_U3(
    .din0(trunc_ln214_11_reg_4360),
    .din1(xor_ln1357_3_reg_4442),
    .din2(xor_ln1357_19_reg_4632),
    .din3(xor_ln1357_35_reg_4658),
    .din4(xor_ln1357_51_reg_4806),
    .din5(xor_ln1357_67_reg_4832),
    .din6(xor_ln1357_83_reg_5031),
    .din7(xor_ln1357_99_reg_5057),
    .din8(xor_ln1357_115_reg_5201),
    .din9(xor_ln1357_131_reg_5227),
    .din10(xor_ln1357_147_reg_5505),
    .din11(xor_ln1357_147_reg_5505),
    .din12(xor_ln1357_147_reg_5505),
    .din13(xor_ln1357_147_reg_5505),
    .din14(xor_ln1357_147_reg_5505),
    .din15(xor_ln1357_147_reg_5505),
    .din16(p_02325_1_reg_1088),
    .dout(phi_ln719_3_fu_3362_p18)
);

kern_enc_mux_164_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
kern_enc_mux_164_8_1_1_U4(
    .din0(trunc_ln214_10_reg_4352),
    .din1(xor_ln1357_4_reg_4448),
    .din2(xor_ln1357_20_reg_4541),
    .din3(xor_ln1357_36_reg_5318),
    .din4(xor_ln1357_52_reg_4907),
    .din5(xor_ln1357_68_reg_5358),
    .din6(xor_ln1357_84_reg_4940),
    .din7(xor_ln1357_100_reg_5398),
    .din8(xor_ln1357_116_reg_5418),
    .din9(xor_ln1357_132_reg_5458),
    .din10(xor_ln1357_148_reg_5516),
    .din11(xor_ln1357_148_reg_5516),
    .din12(xor_ln1357_148_reg_5516),
    .din13(xor_ln1357_148_reg_5516),
    .din14(xor_ln1357_148_reg_5516),
    .din15(xor_ln1357_148_reg_5516),
    .din16(p_02325_1_reg_1088),
    .dout(phi_ln719_4_fu_3414_p18)
);

kern_enc_mux_164_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
kern_enc_mux_164_8_1_1_U5(
    .din0(trunc_ln214_s_reg_4344),
    .din1(xor_ln1357_5_reg_4453),
    .din2(xor_ln1357_21_reg_4549),
    .din3(xor_ln1357_37_reg_5323),
    .din4(xor_ln1357_53_reg_4914),
    .din5(xor_ln1357_69_reg_5363),
    .din6(xor_ln1357_85_reg_4948),
    .din7(xor_ln1357_101_reg_5403),
    .din8(xor_ln1357_117_reg_5423),
    .din9(xor_ln1357_133_reg_5463),
    .din10(xor_ln1357_149_reg_5527),
    .din11(xor_ln1357_149_reg_5527),
    .din12(xor_ln1357_149_reg_5527),
    .din13(xor_ln1357_149_reg_5527),
    .din14(xor_ln1357_149_reg_5527),
    .din15(xor_ln1357_149_reg_5527),
    .din16(p_02325_1_reg_1088),
    .dout(phi_ln719_5_fu_3466_p18)
);

kern_enc_mux_164_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
kern_enc_mux_164_8_1_1_U6(
    .din0(trunc_ln214_9_reg_4336),
    .din1(xor_ln1357_6_reg_4458),
    .din2(xor_ln1357_22_reg_4557),
    .din3(xor_ln1357_38_reg_5328),
    .din4(xor_ln1357_54_reg_4921),
    .din5(xor_ln1357_70_reg_5368),
    .din6(xor_ln1357_86_reg_4956),
    .din7(xor_ln1357_102_reg_5408),
    .din8(xor_ln1357_118_reg_5428),
    .din9(xor_ln1357_134_reg_5468),
    .din10(xor_ln1357_150_reg_5538),
    .din11(xor_ln1357_150_reg_5538),
    .din12(xor_ln1357_150_reg_5538),
    .din13(xor_ln1357_150_reg_5538),
    .din14(xor_ln1357_150_reg_5538),
    .din15(xor_ln1357_150_reg_5538),
    .din16(p_02325_1_reg_1088),
    .dout(phi_ln719_6_fu_3518_p18)
);

kern_enc_mux_164_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
kern_enc_mux_164_8_1_1_U7(
    .din0(trunc_ln214_8_reg_4328),
    .din1(xor_ln1357_7_reg_4463),
    .din2(xor_ln1357_23_reg_4565),
    .din3(xor_ln1357_39_reg_5333),
    .din4(xor_ln1357_55_reg_4928),
    .din5(xor_ln1357_71_reg_5373),
    .din6(xor_ln1357_87_reg_4964),
    .din7(xor_ln1357_103_reg_5413),
    .din8(xor_ln1357_119_reg_5433),
    .din9(xor_ln1357_135_reg_5473),
    .din10(xor_ln1357_151_reg_5549),
    .din11(xor_ln1357_151_reg_5549),
    .din12(xor_ln1357_151_reg_5549),
    .din13(xor_ln1357_151_reg_5549),
    .din14(xor_ln1357_151_reg_5549),
    .din15(xor_ln1357_151_reg_5549),
    .din16(p_02325_1_reg_1088),
    .dout(phi_ln719_7_fu_3564_p18)
);

kern_enc_mux_164_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
kern_enc_mux_164_8_1_1_U8(
    .din0(trunc_ln214_7_reg_4321),
    .din1(xor_ln1357_8_reg_4468),
    .din2(xor_ln1357_24_reg_5298),
    .din3(xor_ln1357_40_reg_4665),
    .din4(xor_ln1357_56_reg_5338),
    .din5(xor_ln1357_72_reg_4839),
    .din6(xor_ln1357_88_reg_5378),
    .din7(xor_ln1357_104_reg_5064),
    .din8(xor_ln1357_120_reg_5438),
    .din9(xor_ln1357_136_reg_5234),
    .din10(xor_ln1357_152_reg_5560),
    .din11(xor_ln1357_152_reg_5560),
    .din12(xor_ln1357_152_reg_5560),
    .din13(xor_ln1357_152_reg_5560),
    .din14(xor_ln1357_152_reg_5560),
    .din15(xor_ln1357_152_reg_5560),
    .din16(p_02325_1_reg_1088),
    .dout(phi_ln719_8_fu_3616_p18)
);

kern_enc_mux_164_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
kern_enc_mux_164_8_1_1_U9(
    .din0(trunc_ln214_6_reg_4314),
    .din1(xor_ln1357_9_reg_4475),
    .din2(xor_ln1357_25_reg_5303),
    .din3(xor_ln1357_41_reg_4672),
    .din4(xor_ln1357_57_reg_5343),
    .din5(xor_ln1357_73_reg_4846),
    .din6(xor_ln1357_89_reg_5383),
    .din7(xor_ln1357_105_reg_5071),
    .din8(xor_ln1357_121_reg_5443),
    .din9(xor_ln1357_137_reg_5240),
    .din10(xor_ln1357_153_reg_5571),
    .din11(xor_ln1357_153_reg_5571),
    .din12(xor_ln1357_153_reg_5571),
    .din13(xor_ln1357_153_reg_5571),
    .din14(xor_ln1357_153_reg_5571),
    .din15(xor_ln1357_153_reg_5571),
    .din16(p_02325_1_reg_1088),
    .dout(phi_ln719_9_fu_3668_p18)
);

kern_enc_mux_164_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
kern_enc_mux_164_8_1_1_U10(
    .din0(trunc_ln214_5_reg_4307),
    .din1(xor_ln1357_10_reg_4482),
    .din2(xor_ln1357_26_reg_5308),
    .din3(xor_ln1357_42_reg_4679),
    .din4(xor_ln1357_58_reg_5348),
    .din5(xor_ln1357_74_reg_4853),
    .din6(xor_ln1357_90_reg_5388),
    .din7(xor_ln1357_106_reg_5078),
    .din8(xor_ln1357_122_reg_5448),
    .din9(xor_ln1357_138_reg_5246),
    .din10(xor_ln1357_154_reg_5582),
    .din11(xor_ln1357_154_reg_5582),
    .din12(xor_ln1357_154_reg_5582),
    .din13(xor_ln1357_154_reg_5582),
    .din14(xor_ln1357_154_reg_5582),
    .din15(xor_ln1357_154_reg_5582),
    .din16(p_02325_1_reg_1088),
    .dout(phi_ln719_s_fu_3720_p18)
);

kern_enc_mux_164_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
kern_enc_mux_164_8_1_1_U11(
    .din0(trunc_ln214_4_reg_4300),
    .din1(xor_ln1357_11_reg_4489),
    .din2(xor_ln1357_27_reg_5313),
    .din3(xor_ln1357_43_reg_4686),
    .din4(xor_ln1357_59_reg_5353),
    .din5(xor_ln1357_75_reg_4860),
    .din6(xor_ln1357_91_reg_5393),
    .din7(xor_ln1357_107_reg_5085),
    .din8(xor_ln1357_123_reg_5453),
    .din9(xor_ln1357_139_reg_5252),
    .din10(xor_ln1357_155_reg_5593),
    .din11(xor_ln1357_155_reg_5593),
    .din12(xor_ln1357_155_reg_5593),
    .din13(xor_ln1357_155_reg_5593),
    .din14(xor_ln1357_155_reg_5593),
    .din15(xor_ln1357_155_reg_5593),
    .din16(p_02325_1_reg_1088),
    .dout(phi_ln719_10_fu_3766_p18)
);

kern_enc_mux_164_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
kern_enc_mux_164_8_1_1_U12(
    .din0(trunc_ln214_3_reg_4291),
    .din1(xor_ln1357_12_reg_4496),
    .din2(xor_ln1357_28_reg_4573),
    .din3(xor_ln1357_44_reg_4693),
    .din4(xor_ln1357_60_reg_4739),
    .din5(xor_ln1357_76_reg_4867),
    .din6(xor_ln1357_92_reg_4972),
    .din7(xor_ln1357_108_reg_5092),
    .din8(xor_ln1357_124_reg_5138),
    .din9(xor_ln1357_140_reg_5258),
    .din10(xor_ln1357_156_reg_5604),
    .din11(xor_ln1357_156_reg_5604),
    .din12(xor_ln1357_156_reg_5604),
    .din13(xor_ln1357_156_reg_5604),
    .din14(xor_ln1357_156_reg_5604),
    .din15(xor_ln1357_156_reg_5604),
    .din16(p_02325_1_reg_1088),
    .dout(phi_ln719_11_fu_3818_p18)
);

kern_enc_mux_164_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
kern_enc_mux_164_8_1_1_U13(
    .din0(trunc_ln214_2_reg_4282),
    .din1(xor_ln1357_13_reg_4501),
    .din2(xor_ln1357_29_reg_4579),
    .din3(xor_ln1357_45_reg_4698),
    .din4(xor_ln1357_61_reg_4747),
    .din5(xor_ln1357_77_reg_4872),
    .din6(xor_ln1357_93_reg_4978),
    .din7(xor_ln1357_109_reg_5097),
    .din8(xor_ln1357_125_reg_5145),
    .din9(xor_ln1357_141_reg_5263),
    .din10(xor_ln1357_157_reg_5615),
    .din11(xor_ln1357_157_reg_5615),
    .din12(xor_ln1357_157_reg_5615),
    .din13(xor_ln1357_157_reg_5615),
    .din14(xor_ln1357_157_reg_5615),
    .din15(xor_ln1357_157_reg_5615),
    .din16(p_02325_1_reg_1088),
    .dout(phi_ln719_12_fu_3870_p18)
);

kern_enc_mux_164_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
kern_enc_mux_164_8_1_1_U14(
    .din0(trunc_ln214_1_reg_4273),
    .din1(xor_ln1357_14_reg_4506),
    .din2(xor_ln1357_30_reg_4585),
    .din3(xor_ln1357_46_reg_4703),
    .din4(xor_ln1357_62_reg_4755),
    .din5(xor_ln1357_78_reg_4877),
    .din6(xor_ln1357_94_reg_4984),
    .din7(xor_ln1357_110_reg_5102),
    .din8(xor_ln1357_126_reg_5152),
    .din9(xor_ln1357_142_reg_5268),
    .din10(xor_ln1357_158_reg_5626),
    .din11(xor_ln1357_158_reg_5626),
    .din12(xor_ln1357_158_reg_5626),
    .din13(xor_ln1357_158_reg_5626),
    .din14(xor_ln1357_158_reg_5626),
    .din15(xor_ln1357_158_reg_5626),
    .din16(p_02325_1_reg_1088),
    .dout(phi_ln719_13_fu_3922_p18)
);

kern_enc_mux_164_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
kern_enc_mux_164_8_1_1_U15(
    .din0(trunc_ln214_reg_4264),
    .din1(xor_ln1357_15_reg_4511),
    .din2(xor_ln1357_31_reg_4591),
    .din3(xor_ln1357_47_reg_4708),
    .din4(xor_ln1357_63_reg_4763),
    .din5(xor_ln1357_79_reg_4882),
    .din6(xor_ln1357_95_reg_4990),
    .din7(xor_ln1357_111_reg_5107),
    .din8(xor_ln1357_127_reg_5159),
    .din9(xor_ln1357_143_reg_5273),
    .din10(xor_ln1357_159_reg_5637),
    .din11(xor_ln1357_159_reg_5637),
    .din12(xor_ln1357_159_reg_5637),
    .din13(xor_ln1357_159_reg_5637),
    .din14(xor_ln1357_159_reg_5637),
    .din15(xor_ln1357_159_reg_5637),
    .din16(p_02325_1_reg_1088),
    .dout(phi_ln719_14_fu_3968_p18)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state12) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state12))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state12);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_789)) begin
        if (((ap_phi_mux_p_02325_1_phi_fu_1092_p4 == 4'd1) & (icmp_ln162_fu_2694_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_phi_ln719_reg_1100 <= xor_ln1357_reg_4424;
        end else if ((1'b1 == ap_condition_955)) begin
            ap_phi_reg_pp0_iter1_phi_ln719_reg_1100 <= xor_ln1357_128_reg_5206;
        end else if (((ap_phi_mux_p_02325_1_phi_fu_1092_p4 == 4'd8) & (icmp_ln162_fu_2694_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_phi_ln719_reg_1100 <= xor_ln1357_112_reg_5186;
        end else if (((ap_phi_mux_p_02325_1_phi_fu_1092_p4 == 4'd7) & (icmp_ln162_fu_2694_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_phi_ln719_reg_1100 <= xor_ln1357_96_reg_5036;
        end else if (((ap_phi_mux_p_02325_1_phi_fu_1092_p4 == 4'd6) & (icmp_ln162_fu_2694_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_phi_ln719_reg_1100 <= xor_ln1357_80_reg_5016;
        end else if (((ap_phi_mux_p_02325_1_phi_fu_1092_p4 == 4'd5) & (icmp_ln162_fu_2694_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_phi_ln719_reg_1100 <= xor_ln1357_64_reg_4811;
        end else if (((ap_phi_mux_p_02325_1_phi_fu_1092_p4 == 4'd4) & (icmp_ln162_fu_2694_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_phi_ln719_reg_1100 <= xor_ln1357_48_reg_4791;
        end else if (((ap_phi_mux_p_02325_1_phi_fu_1092_p4 == 4'd3) & (icmp_ln162_fu_2694_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_phi_ln719_reg_1100 <= xor_ln1357_32_reg_4637;
        end else if (((ap_phi_mux_p_02325_1_phi_fu_1092_p4 == 4'd2) & (icmp_ln162_fu_2694_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_phi_ln719_reg_1100 <= xor_ln1357_16_reg_4617;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_phi_ln719_reg_1100 <= ap_phi_reg_pp0_iter0_phi_ln719_reg_1100;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_reg_5728 == 1'd0))) begin
        cipher_V_0_0_reg_1038 <= cipher_0_V_3_fu_3258_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cipher_V_0_0_reg_1038 <= cipher_0_V_fu_2614_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_reg_5728 == 1'd0))) begin
        cipher_V_10_0_reg_938 <= cipher_10_V_4_fu_3760_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cipher_V_10_0_reg_938 <= cipher_10_V_fu_2664_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_reg_5728 == 1'd0))) begin
        cipher_V_11_0_reg_928 <= cipher_11_V_4_fu_3812_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cipher_V_11_0_reg_928 <= cipher_11_V_fu_2669_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_reg_5728 == 1'd0))) begin
        cipher_V_12_0_reg_1048 <= cipher_12_V_3_fu_3864_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cipher_V_12_0_reg_1048 <= cipher_12_V_fu_2674_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_reg_5728 == 1'd0))) begin
        cipher_V_13_0_reg_1058 <= cipher_13_V_4_fu_3916_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cipher_V_13_0_reg_1058 <= cipher_13_V_fu_2679_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_reg_5728 == 1'd0))) begin
        cipher_V_14_0_reg_1068 <= cipher_14_V_4_fu_3962_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cipher_V_14_0_reg_1068 <= cipher_14_V_fu_2684_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_reg_5728 == 1'd0))) begin
        cipher_V_15_0_reg_1078 <= cipher_15_V_4_fu_4014_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cipher_V_15_0_reg_1078 <= cipher_15_V_fu_2689_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_reg_5728 == 1'd0))) begin
        cipher_V_1_0_reg_1028 <= cipher_1_V_4_fu_3310_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cipher_V_1_0_reg_1028 <= cipher_1_V_fu_2619_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_reg_5728 == 1'd0))) begin
        cipher_V_2_0_reg_1018 <= cipher_2_V_4_fu_3356_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cipher_V_2_0_reg_1018 <= cipher_2_V_fu_2624_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_reg_5728 == 1'd0))) begin
        cipher_V_3_0_reg_1008 <= cipher_3_V_4_fu_3408_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cipher_V_3_0_reg_1008 <= cipher_3_V_fu_2629_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_reg_5728 == 1'd0))) begin
        cipher_V_4_0_reg_998 <= cipher_4_V_3_fu_3460_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cipher_V_4_0_reg_998 <= cipher_4_V_fu_2634_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_reg_5728 == 1'd0))) begin
        cipher_V_5_0_reg_988 <= cipher_5_V_4_fu_3512_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cipher_V_5_0_reg_988 <= cipher_5_V_fu_2639_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_reg_5728 == 1'd0))) begin
        cipher_V_6_0_reg_978 <= cipher_6_V_4_fu_3558_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cipher_V_6_0_reg_978 <= cipher_6_V_fu_2644_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_reg_5728 == 1'd0))) begin
        cipher_V_7_0_reg_968 <= cipher_7_V_4_fu_3610_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cipher_V_7_0_reg_968 <= cipher_7_V_fu_2649_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_reg_5728 == 1'd0))) begin
        cipher_V_8_0_reg_958 <= cipher_8_V_3_fu_3662_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cipher_V_8_0_reg_958 <= cipher_8_V_fu_2654_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_reg_5728 == 1'd0))) begin
        cipher_V_9_0_reg_948 <= cipher_9_V_4_fu_3714_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cipher_V_9_0_reg_948 <= cipher_9_V_fu_2659_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_265)) begin
        if ((icmp_ln57_fu_1393_p2 == 1'd0)) begin
            flag_flag_0_reg_1123 <= 1'd0;
        end else if ((icmp_ln57_fu_1393_p2 == 1'd1)) begin
            flag_flag_0_reg_1123 <= 1'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        if ((icmp_ln61_reg_4420 == 1'd0)) begin
            flag_flag_1_reg_1147 <= flag_flag_0_reg_1123;
        end else if ((icmp_ln61_reg_4420 == 1'd1)) begin
            flag_flag_1_reg_1147 <= 1'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_265)) begin
        if ((icmp_ln57_fu_1393_p2 == 1'd0)) begin
            flag_load_2_reg_1137 <= flag;
        end else if ((icmp_ln57_fu_1393_p2 == 1'd1)) begin
            flag_load_2_reg_1137 <= add_ln59_fu_1409_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        if ((icmp_ln61_reg_4420 == 1'd0)) begin
            flag_new_1_reg_1159 <= flag_load_2_reg_1137;
        end else if ((icmp_ln61_reg_4420 == 1'd1)) begin
            flag_new_1_reg_1159 <= add_ln63_fu_4235_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (icmp_ln61_reg_4420 == 1'd1))) begin
        keyT_V <= trunc_ln209_1_fu_4226_p1;
    end else if ((~((in_r_TVALID == 1'b0) & (ap_predicate_op74_read_state1 == 1'b1)) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln50_fu_1195_p2 == 1'd0) & (tmp_1_nbwritereq_fu_226_p8 == 1'd1) & (tmp_nbreadreq_fu_208_p8 == 1'd1))) begin
        keyT_V <= 128'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_reg_5728 == 1'd0))) begin
        p_02325_1_reg_1088 <= j_V_reg_5812;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        p_02325_1_reg_1088 <= 4'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        plainT_V <= 128'd0;
    end else if ((~((in_r_TVALID == 1'b0) & (ap_predicate_op74_read_state1 == 1'b1)) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln57_fu_1393_p2 == 1'd1) & (icmp_ln50_fu_1195_p2 == 1'd1) & (tmp_1_nbwritereq_fu_226_p8 == 1'd1) & (tmp_nbreadreq_fu_208_p8 == 1'd1))) begin
        plainT_V <= trunc_ln209_fu_1399_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & (ap_phi_mux_flag_flag_1_phi_fu_1151_p4 == 1'd1))) begin
        flag <= flag_new_1_reg_1159;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln162_reg_5728 <= icmp_ln162_fu_2694_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((in_r_TVALID == 1'b0) & (ap_predicate_op74_read_state1 == 1'b1)) & (1'b1 == ap_CS_fsm_state1) & (tmp_1_nbwritereq_fu_226_p8 == 1'd1) & (tmp_nbreadreq_fu_208_p8 == 1'd1))) begin
        icmp_ln50_reg_4260 <= icmp_ln50_fu_1195_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((in_r_TVALID == 1'b0) & (ap_predicate_op74_read_state1 == 1'b1)) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln50_fu_1195_p2 == 1'd1) & (tmp_1_nbwritereq_fu_226_p8 == 1'd1) & (tmp_nbreadreq_fu_208_p8 == 1'd1))) begin
        icmp_ln61_reg_4420 <= icmp_ln61_fu_1415_p2;
        tmp_data_V_reg_4407 <= in_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_fu_2694_p2 == 1'd0))) begin
        j_V_reg_5812 <= j_V_fu_2780_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_1169 <= SBOX_V_q0;
        reg_1173 <= SBOX_V_q2;
        reg_1177 <= SBOX_V_q3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((in_r_TVALID == 1'b0) & (ap_predicate_op74_read_state1 == 1'b1)) & (1'b1 == ap_CS_fsm_state1) & (tmp_nbreadreq_fu_208_p8 == 1'd1))) begin
        tmp_1_reg_4251 <= out_r_TREADY;
    end
end

always @ (posedge ap_clk) begin
    if ((~((in_r_TVALID == 1'b0) & (ap_predicate_op74_read_state1 == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_reg_4247 <= tmp_nbreadreq_fu_208_p8;
    end
end

always @ (posedge ap_clk) begin
    if ((~((in_r_TVALID == 1'b0) & (ap_predicate_op74_read_state1 == 1'b1)) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln50_fu_1195_p2 == 1'd0) & (tmp_1_nbwritereq_fu_226_p8 == 1'd1) & (tmp_nbreadreq_fu_208_p8 == 1'd1))) begin
        trunc_ln214_10_reg_4352 <= {{keyT_V[95:88]}};
        trunc_ln214_11_reg_4360 <= {{keyT_V[103:96]}};
        trunc_ln214_12_reg_4367 <= {{keyT_V[111:104]}};
        trunc_ln214_13_reg_4374 <= {{keyT_V[119:112]}};
        trunc_ln214_14_reg_4381 <= {{keyT_V[127:120]}};
        trunc_ln214_1_reg_4273 <= {{keyT_V[15:8]}};
        trunc_ln214_2_reg_4282 <= {{keyT_V[23:16]}};
        trunc_ln214_3_reg_4291 <= {{keyT_V[31:24]}};
        trunc_ln214_4_reg_4300 <= {{keyT_V[39:32]}};
        trunc_ln214_5_reg_4307 <= {{keyT_V[47:40]}};
        trunc_ln214_6_reg_4314 <= {{keyT_V[55:48]}};
        trunc_ln214_7_reg_4321 <= {{keyT_V[63:56]}};
        trunc_ln214_8_reg_4328 <= {{keyT_V[71:64]}};
        trunc_ln214_9_reg_4336 <= {{keyT_V[79:72]}};
        trunc_ln214_reg_4264 <= trunc_ln214_fu_1205_p1;
        trunc_ln214_s_reg_4344 <= {{keyT_V[87:80]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        xor_ln1357_100_reg_5398 <= xor_ln1357_100_fu_2290_p2;
        xor_ln1357_101_reg_5403 <= xor_ln1357_101_fu_2294_p2;
        xor_ln1357_102_reg_5408 <= xor_ln1357_102_fu_2298_p2;
        xor_ln1357_103_reg_5413 <= xor_ln1357_103_fu_2302_p2;
        xor_ln1357_116_reg_5418 <= xor_ln1357_116_fu_2306_p2;
        xor_ln1357_117_reg_5423 <= xor_ln1357_117_fu_2310_p2;
        xor_ln1357_118_reg_5428 <= xor_ln1357_118_fu_2315_p2;
        xor_ln1357_119_reg_5433 <= xor_ln1357_119_fu_2320_p2;
        xor_ln1357_120_reg_5438 <= xor_ln1357_120_fu_2325_p2;
        xor_ln1357_121_reg_5443 <= xor_ln1357_121_fu_2330_p2;
        xor_ln1357_122_reg_5448 <= xor_ln1357_122_fu_2335_p2;
        xor_ln1357_123_reg_5453 <= xor_ln1357_123_fu_2340_p2;
        xor_ln1357_132_reg_5458 <= xor_ln1357_132_fu_2345_p2;
        xor_ln1357_133_reg_5463 <= xor_ln1357_133_fu_2350_p2;
        xor_ln1357_134_reg_5468 <= xor_ln1357_134_fu_2355_p2;
        xor_ln1357_135_reg_5473 <= xor_ln1357_135_fu_2360_p2;
        xor_ln1357_145_reg_5483 <= xor_ln1357_145_fu_2371_p2;
        xor_ln1357_146_reg_5494 <= xor_ln1357_146_fu_2376_p2;
        xor_ln1357_147_reg_5505 <= xor_ln1357_147_fu_2381_p2;
        xor_ln1357_148_reg_5516 <= xor_ln1357_148_fu_2386_p2;
        xor_ln1357_149_reg_5527 <= xor_ln1357_149_fu_2392_p2;
        xor_ln1357_150_reg_5538 <= xor_ln1357_150_fu_2398_p2;
        xor_ln1357_151_reg_5549 <= xor_ln1357_151_fu_2404_p2;
        xor_ln1357_152_reg_5560 <= xor_ln1357_152_fu_2410_p2;
        xor_ln1357_153_reg_5571 <= xor_ln1357_153_fu_2415_p2;
        xor_ln1357_154_reg_5582 <= xor_ln1357_154_fu_2420_p2;
        xor_ln1357_155_reg_5593 <= xor_ln1357_155_fu_2425_p2;
        xor_ln1357_156_reg_5604 <= xor_ln1357_156_fu_2430_p2;
        xor_ln1357_157_reg_5615 <= xor_ln1357_157_fu_2435_p2;
        xor_ln1357_158_reg_5626 <= xor_ln1357_158_fu_2440_p2;
        xor_ln1357_159_reg_5637 <= xor_ln1357_159_fu_2445_p2;
        xor_ln1357_24_reg_5298 <= xor_ln1357_24_fu_2210_p2;
        xor_ln1357_25_reg_5303 <= xor_ln1357_25_fu_2214_p2;
        xor_ln1357_26_reg_5308 <= xor_ln1357_26_fu_2218_p2;
        xor_ln1357_27_reg_5313 <= xor_ln1357_27_fu_2222_p2;
        xor_ln1357_36_reg_5318 <= xor_ln1357_36_fu_2226_p2;
        xor_ln1357_37_reg_5323 <= xor_ln1357_37_fu_2230_p2;
        xor_ln1357_38_reg_5328 <= xor_ln1357_38_fu_2234_p2;
        xor_ln1357_39_reg_5333 <= xor_ln1357_39_fu_2238_p2;
        xor_ln1357_56_reg_5338 <= xor_ln1357_56_fu_2242_p2;
        xor_ln1357_57_reg_5343 <= xor_ln1357_57_fu_2246_p2;
        xor_ln1357_58_reg_5348 <= xor_ln1357_58_fu_2250_p2;
        xor_ln1357_59_reg_5353 <= xor_ln1357_59_fu_2254_p2;
        xor_ln1357_68_reg_5358 <= xor_ln1357_68_fu_2258_p2;
        xor_ln1357_69_reg_5363 <= xor_ln1357_69_fu_2262_p2;
        xor_ln1357_70_reg_5368 <= xor_ln1357_70_fu_2266_p2;
        xor_ln1357_71_reg_5373 <= xor_ln1357_71_fu_2270_p2;
        xor_ln1357_88_reg_5378 <= xor_ln1357_88_fu_2274_p2;
        xor_ln1357_89_reg_5383 <= xor_ln1357_89_fu_2278_p2;
        xor_ln1357_90_reg_5388 <= xor_ln1357_90_fu_2282_p2;
        xor_ln1357_91_reg_5393 <= xor_ln1357_91_fu_2286_p2;
        xor_ln719_4_reg_5478 <= xor_ln719_4_fu_2365_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        xor_ln1357_104_reg_5064 <= xor_ln1357_104_fu_1995_p2;
        xor_ln1357_105_reg_5071 <= xor_ln1357_105_fu_2000_p2;
        xor_ln1357_106_reg_5078 <= xor_ln1357_106_fu_2005_p2;
        xor_ln1357_107_reg_5085 <= xor_ln1357_107_fu_2010_p2;
        xor_ln1357_108_reg_5092 <= xor_ln1357_108_fu_2015_p2;
        xor_ln1357_109_reg_5097 <= xor_ln1357_109_fu_2020_p2;
        xor_ln1357_110_reg_5102 <= xor_ln1357_110_fu_2025_p2;
        xor_ln1357_111_reg_5107 <= xor_ln1357_111_fu_2030_p2;
        xor_ln1357_80_reg_5016 <= xor_ln1357_80_fu_1946_p2;
        xor_ln1357_81_reg_5021 <= xor_ln1357_81_fu_1950_p2;
        xor_ln1357_82_reg_5026 <= xor_ln1357_82_fu_1955_p2;
        xor_ln1357_83_reg_5031 <= xor_ln1357_83_fu_1960_p2;
        xor_ln1357_96_reg_5036 <= xor_ln1357_96_fu_1971_p2;
        xor_ln1357_97_reg_5043 <= xor_ln1357_97_fu_1977_p2;
        xor_ln1357_98_reg_5050 <= xor_ln1357_98_fu_1983_p2;
        xor_ln1357_99_reg_5057 <= xor_ln1357_99_fu_1989_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        xor_ln1357_10_reg_4482 <= xor_ln1357_10_fu_1477_p2;
        xor_ln1357_11_reg_4489 <= xor_ln1357_11_fu_1482_p2;
        xor_ln1357_12_reg_4496 <= xor_ln1357_12_fu_1487_p2;
        xor_ln1357_13_reg_4501 <= xor_ln1357_13_fu_1492_p2;
        xor_ln1357_14_reg_4506 <= xor_ln1357_14_fu_1497_p2;
        xor_ln1357_15_reg_4511 <= xor_ln1357_15_fu_1502_p2;
        xor_ln1357_1_reg_4430 <= xor_ln1357_1_fu_1432_p2;
        xor_ln1357_2_reg_4436 <= xor_ln1357_2_fu_1437_p2;
        xor_ln1357_3_reg_4442 <= xor_ln1357_3_fu_1442_p2;
        xor_ln1357_4_reg_4448 <= xor_ln1357_4_fu_1447_p2;
        xor_ln1357_5_reg_4453 <= xor_ln1357_5_fu_1452_p2;
        xor_ln1357_6_reg_4458 <= xor_ln1357_6_fu_1457_p2;
        xor_ln1357_7_reg_4463 <= xor_ln1357_7_fu_1462_p2;
        xor_ln1357_8_reg_4468 <= xor_ln1357_8_fu_1467_p2;
        xor_ln1357_9_reg_4475 <= xor_ln1357_9_fu_1472_p2;
        xor_ln1357_reg_4424 <= xor_ln1357_fu_1426_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        xor_ln1357_112_reg_5186 <= xor_ln1357_112_fu_2101_p2;
        xor_ln1357_113_reg_5191 <= xor_ln1357_113_fu_2105_p2;
        xor_ln1357_114_reg_5196 <= xor_ln1357_114_fu_2110_p2;
        xor_ln1357_115_reg_5201 <= xor_ln1357_115_fu_2115_p2;
        xor_ln1357_128_reg_5206 <= xor_ln1357_128_fu_2126_p2;
        xor_ln1357_129_reg_5213 <= xor_ln1357_129_fu_2132_p2;
        xor_ln1357_130_reg_5220 <= xor_ln1357_130_fu_2138_p2;
        xor_ln1357_131_reg_5227 <= xor_ln1357_131_fu_2144_p2;
        xor_ln1357_136_reg_5234 <= xor_ln1357_136_fu_2150_p2;
        xor_ln1357_137_reg_5240 <= xor_ln1357_137_fu_2155_p2;
        xor_ln1357_138_reg_5246 <= xor_ln1357_138_fu_2160_p2;
        xor_ln1357_139_reg_5252 <= xor_ln1357_139_fu_2165_p2;
        xor_ln1357_140_reg_5258 <= xor_ln1357_140_fu_2170_p2;
        xor_ln1357_141_reg_5263 <= xor_ln1357_141_fu_2175_p2;
        xor_ln1357_142_reg_5268 <= xor_ln1357_142_fu_2180_p2;
        xor_ln1357_143_reg_5273 <= xor_ln1357_143_fu_2185_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        xor_ln1357_124_reg_5138 <= xor_ln1357_124_fu_2061_p2;
        xor_ln1357_125_reg_5145 <= xor_ln1357_125_fu_2066_p2;
        xor_ln1357_126_reg_5152 <= xor_ln1357_126_fu_2071_p2;
        xor_ln1357_127_reg_5159 <= xor_ln1357_127_fu_2076_p2;
        xor_ln719_3_reg_5132 <= xor_ln719_3_fu_2055_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        xor_ln1357_16_reg_4617 <= xor_ln1357_16_fu_1593_p2;
        xor_ln1357_17_reg_4622 <= xor_ln1357_17_fu_1597_p2;
        xor_ln1357_18_reg_4627 <= xor_ln1357_18_fu_1602_p2;
        xor_ln1357_19_reg_4632 <= xor_ln1357_19_fu_1607_p2;
        xor_ln1357_32_reg_4637 <= xor_ln1357_32_fu_1618_p2;
        xor_ln1357_33_reg_4644 <= xor_ln1357_33_fu_1624_p2;
        xor_ln1357_34_reg_4651 <= xor_ln1357_34_fu_1630_p2;
        xor_ln1357_35_reg_4658 <= xor_ln1357_35_fu_1636_p2;
        xor_ln1357_40_reg_4665 <= xor_ln1357_40_fu_1642_p2;
        xor_ln1357_41_reg_4672 <= xor_ln1357_41_fu_1647_p2;
        xor_ln1357_42_reg_4679 <= xor_ln1357_42_fu_1652_p2;
        xor_ln1357_43_reg_4686 <= xor_ln1357_43_fu_1657_p2;
        xor_ln1357_44_reg_4693 <= xor_ln1357_44_fu_1662_p2;
        xor_ln1357_45_reg_4698 <= xor_ln1357_45_fu_1667_p2;
        xor_ln1357_46_reg_4703 <= xor_ln1357_46_fu_1672_p2;
        xor_ln1357_47_reg_4708 <= xor_ln1357_47_fu_1677_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        xor_ln1357_20_reg_4541 <= xor_ln1357_20_fu_1533_p2;
        xor_ln1357_21_reg_4549 <= xor_ln1357_21_fu_1538_p2;
        xor_ln1357_22_reg_4557 <= xor_ln1357_22_fu_1543_p2;
        xor_ln1357_23_reg_4565 <= xor_ln1357_23_fu_1548_p2;
        xor_ln1357_28_reg_4573 <= xor_ln1357_28_fu_1553_p2;
        xor_ln1357_29_reg_4579 <= xor_ln1357_29_fu_1558_p2;
        xor_ln1357_30_reg_4585 <= xor_ln1357_30_fu_1563_p2;
        xor_ln1357_31_reg_4591 <= xor_ln1357_31_fu_1568_p2;
        xor_ln719_reg_4536 <= xor_ln719_fu_1527_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        xor_ln1357_48_reg_4791 <= xor_ln1357_48_fu_1748_p2;
        xor_ln1357_49_reg_4796 <= xor_ln1357_49_fu_1752_p2;
        xor_ln1357_50_reg_4801 <= xor_ln1357_50_fu_1757_p2;
        xor_ln1357_51_reg_4806 <= xor_ln1357_51_fu_1762_p2;
        xor_ln1357_64_reg_4811 <= xor_ln1357_64_fu_1773_p2;
        xor_ln1357_65_reg_4818 <= xor_ln1357_65_fu_1779_p2;
        xor_ln1357_66_reg_4825 <= xor_ln1357_66_fu_1785_p2;
        xor_ln1357_67_reg_4832 <= xor_ln1357_67_fu_1791_p2;
        xor_ln1357_72_reg_4839 <= xor_ln1357_72_fu_1797_p2;
        xor_ln1357_73_reg_4846 <= xor_ln1357_73_fu_1802_p2;
        xor_ln1357_74_reg_4853 <= xor_ln1357_74_fu_1807_p2;
        xor_ln1357_75_reg_4860 <= xor_ln1357_75_fu_1812_p2;
        xor_ln1357_76_reg_4867 <= xor_ln1357_76_fu_1817_p2;
        xor_ln1357_77_reg_4872 <= xor_ln1357_77_fu_1822_p2;
        xor_ln1357_78_reg_4877 <= xor_ln1357_78_fu_1827_p2;
        xor_ln1357_79_reg_4882 <= xor_ln1357_79_fu_1832_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        xor_ln1357_52_reg_4907 <= xor_ln1357_52_fu_1857_p2;
        xor_ln1357_53_reg_4914 <= xor_ln1357_53_fu_1861_p2;
        xor_ln1357_54_reg_4921 <= xor_ln1357_54_fu_1866_p2;
        xor_ln1357_55_reg_4928 <= xor_ln1357_55_fu_1871_p2;
        xor_ln1357_84_reg_4940 <= xor_ln1357_84_fu_1882_p2;
        xor_ln1357_85_reg_4948 <= xor_ln1357_85_fu_1888_p2;
        xor_ln1357_86_reg_4956 <= xor_ln1357_86_fu_1894_p2;
        xor_ln1357_87_reg_4964 <= xor_ln1357_87_fu_1900_p2;
        xor_ln1357_92_reg_4972 <= xor_ln1357_92_fu_1906_p2;
        xor_ln1357_93_reg_4978 <= xor_ln1357_93_fu_1911_p2;
        xor_ln1357_94_reg_4984 <= xor_ln1357_94_fu_1916_p2;
        xor_ln1357_95_reg_4990 <= xor_ln1357_95_fu_1921_p2;
        xor_ln719_2_reg_4935 <= xor_ln719_2_fu_1876_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        xor_ln1357_60_reg_4739 <= xor_ln1357_60_fu_1708_p2;
        xor_ln1357_61_reg_4747 <= xor_ln1357_61_fu_1713_p2;
        xor_ln1357_62_reg_4755 <= xor_ln1357_62_fu_1718_p2;
        xor_ln1357_63_reg_4763 <= xor_ln1357_63_fu_1723_p2;
        xor_ln719_1_reg_4733 <= xor_ln719_1_fu_1702_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        SBOX_V_address0 = zext_ln544_40_fu_4020_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        SBOX_V_address0 = zext_ln544_56_fu_2700_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        SBOX_V_address0 = zext_ln544_36_fu_2190_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        SBOX_V_address0 = zext_ln544_32_fu_2081_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        SBOX_V_address0 = zext_ln544_28_fu_2035_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        SBOX_V_address0 = zext_ln544_24_fu_1926_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        SBOX_V_address0 = zext_ln544_20_fu_1837_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        SBOX_V_address0 = zext_ln544_16_fu_1728_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        SBOX_V_address0 = zext_ln544_12_fu_1682_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        SBOX_V_address0 = zext_ln544_8_fu_1573_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        SBOX_V_address0 = zext_ln544_4_fu_1507_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        SBOX_V_address0 = zext_ln544_fu_1365_p1;
    end else begin
        SBOX_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        SBOX_V_address1 = zext_ln544_41_fu_4025_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        SBOX_V_address1 = zext_ln544_57_fu_2705_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        SBOX_V_address1 = zext_ln544_37_fu_2195_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        SBOX_V_address1 = zext_ln544_33_fu_2086_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        SBOX_V_address1 = zext_ln544_29_fu_2040_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        SBOX_V_address1 = zext_ln544_25_fu_1931_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        SBOX_V_address1 = zext_ln544_21_fu_1842_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        SBOX_V_address1 = zext_ln544_17_fu_1733_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        SBOX_V_address1 = zext_ln544_13_fu_1687_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        SBOX_V_address1 = zext_ln544_9_fu_1578_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        SBOX_V_address1 = zext_ln544_5_fu_1512_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        SBOX_V_address1 = zext_ln544_1_fu_1370_p1;
    end else begin
        SBOX_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        SBOX_V_address10 = zext_ln544_50_fu_4070_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        SBOX_V_address10 = zext_ln544_66_fu_2750_p1;
    end else begin
        SBOX_V_address10 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        SBOX_V_address11 = zext_ln544_51_fu_4075_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        SBOX_V_address11 = zext_ln544_67_fu_2755_p1;
    end else begin
        SBOX_V_address11 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        SBOX_V_address12 = zext_ln544_52_fu_4080_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        SBOX_V_address12 = zext_ln544_68_fu_2760_p1;
    end else begin
        SBOX_V_address12 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        SBOX_V_address13 = zext_ln544_53_fu_4085_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        SBOX_V_address13 = zext_ln544_69_fu_2765_p1;
    end else begin
        SBOX_V_address13 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        SBOX_V_address14 = zext_ln544_54_fu_4090_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        SBOX_V_address14 = zext_ln544_70_fu_2770_p1;
    end else begin
        SBOX_V_address14 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        SBOX_V_address15 = zext_ln544_55_fu_4095_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        SBOX_V_address15 = zext_ln544_71_fu_2775_p1;
    end else begin
        SBOX_V_address15 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        SBOX_V_address2 = zext_ln544_42_fu_4030_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        SBOX_V_address2 = zext_ln544_58_fu_2710_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        SBOX_V_address2 = zext_ln544_38_fu_2200_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        SBOX_V_address2 = zext_ln544_34_fu_2091_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        SBOX_V_address2 = zext_ln544_30_fu_2045_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        SBOX_V_address2 = zext_ln544_26_fu_1936_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        SBOX_V_address2 = zext_ln544_22_fu_1847_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        SBOX_V_address2 = zext_ln544_18_fu_1738_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        SBOX_V_address2 = zext_ln544_14_fu_1692_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        SBOX_V_address2 = zext_ln544_10_fu_1583_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        SBOX_V_address2 = zext_ln544_6_fu_1517_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        SBOX_V_address2 = zext_ln544_2_fu_1375_p1;
    end else begin
        SBOX_V_address2 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        SBOX_V_address3 = zext_ln544_43_fu_4035_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        SBOX_V_address3 = zext_ln544_59_fu_2715_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        SBOX_V_address3 = zext_ln544_39_fu_2205_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        SBOX_V_address3 = zext_ln544_35_fu_2096_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        SBOX_V_address3 = zext_ln544_31_fu_2050_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        SBOX_V_address3 = zext_ln544_27_fu_1941_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        SBOX_V_address3 = zext_ln544_23_fu_1852_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        SBOX_V_address3 = zext_ln544_19_fu_1743_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        SBOX_V_address3 = zext_ln544_15_fu_1697_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        SBOX_V_address3 = zext_ln544_11_fu_1588_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        SBOX_V_address3 = zext_ln544_7_fu_1522_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        SBOX_V_address3 = zext_ln544_3_fu_1380_p1;
    end else begin
        SBOX_V_address3 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        SBOX_V_address4 = zext_ln544_44_fu_4040_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        SBOX_V_address4 = zext_ln544_60_fu_2720_p1;
    end else begin
        SBOX_V_address4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        SBOX_V_address5 = zext_ln544_45_fu_4045_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        SBOX_V_address5 = zext_ln544_61_fu_2725_p1;
    end else begin
        SBOX_V_address5 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        SBOX_V_address6 = zext_ln544_46_fu_4050_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        SBOX_V_address6 = zext_ln544_62_fu_2730_p1;
    end else begin
        SBOX_V_address6 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        SBOX_V_address7 = zext_ln544_47_fu_4055_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        SBOX_V_address7 = zext_ln544_63_fu_2735_p1;
    end else begin
        SBOX_V_address7 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        SBOX_V_address8 = zext_ln544_48_fu_4060_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        SBOX_V_address8 = zext_ln544_64_fu_2740_p1;
    end else begin
        SBOX_V_address8 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        SBOX_V_address9 = zext_ln544_49_fu_4065_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        SBOX_V_address9 = zext_ln544_65_fu_2745_p1;
    end else begin
        SBOX_V_address9 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((in_r_TVALID == 1'b0) & (ap_predicate_op74_read_state1 == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        SBOX_V_ce0 = 1'b1;
    end else begin
        SBOX_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((in_r_TVALID == 1'b0) & (ap_predicate_op74_read_state1 == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        SBOX_V_ce1 = 1'b1;
    end else begin
        SBOX_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        SBOX_V_ce10 = 1'b1;
    end else begin
        SBOX_V_ce10 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        SBOX_V_ce11 = 1'b1;
    end else begin
        SBOX_V_ce11 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        SBOX_V_ce12 = 1'b1;
    end else begin
        SBOX_V_ce12 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        SBOX_V_ce13 = 1'b1;
    end else begin
        SBOX_V_ce13 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        SBOX_V_ce14 = 1'b1;
    end else begin
        SBOX_V_ce14 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        SBOX_V_ce15 = 1'b1;
    end else begin
        SBOX_V_ce15 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((in_r_TVALID == 1'b0) & (ap_predicate_op74_read_state1 == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        SBOX_V_ce2 = 1'b1;
    end else begin
        SBOX_V_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((in_r_TVALID == 1'b0) & (ap_predicate_op74_read_state1 == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        SBOX_V_ce3 = 1'b1;
    end else begin
        SBOX_V_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        SBOX_V_ce4 = 1'b1;
    end else begin
        SBOX_V_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        SBOX_V_ce5 = 1'b1;
    end else begin
        SBOX_V_ce5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        SBOX_V_ce6 = 1'b1;
    end else begin
        SBOX_V_ce6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        SBOX_V_ce7 = 1'b1;
    end else begin
        SBOX_V_ce7 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        SBOX_V_ce8 = 1'b1;
    end else begin
        SBOX_V_ce8 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        SBOX_V_ce9 = 1'b1;
    end else begin
        SBOX_V_ce9 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln162_fu_2694_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state12 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state12 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_reg_5728 == 1'd0))) begin
        ap_phi_mux_cipher_V_0_0_phi_fu_1041_p4 = cipher_0_V_3_fu_3258_p2;
    end else begin
        ap_phi_mux_cipher_V_0_0_phi_fu_1041_p4 = cipher_V_0_0_reg_1038;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_reg_5728 == 1'd0))) begin
        ap_phi_mux_cipher_V_10_0_phi_fu_941_p4 = cipher_10_V_4_fu_3760_p2;
    end else begin
        ap_phi_mux_cipher_V_10_0_phi_fu_941_p4 = cipher_V_10_0_reg_938;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_reg_5728 == 1'd0))) begin
        ap_phi_mux_cipher_V_11_0_phi_fu_931_p4 = cipher_11_V_4_fu_3812_p2;
    end else begin
        ap_phi_mux_cipher_V_11_0_phi_fu_931_p4 = cipher_V_11_0_reg_928;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_reg_5728 == 1'd0))) begin
        ap_phi_mux_cipher_V_12_0_phi_fu_1051_p4 = cipher_12_V_3_fu_3864_p2;
    end else begin
        ap_phi_mux_cipher_V_12_0_phi_fu_1051_p4 = cipher_V_12_0_reg_1048;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_reg_5728 == 1'd0))) begin
        ap_phi_mux_cipher_V_13_0_phi_fu_1061_p4 = cipher_13_V_4_fu_3916_p2;
    end else begin
        ap_phi_mux_cipher_V_13_0_phi_fu_1061_p4 = cipher_V_13_0_reg_1058;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_reg_5728 == 1'd0))) begin
        ap_phi_mux_cipher_V_14_0_phi_fu_1071_p4 = cipher_14_V_4_fu_3962_p2;
    end else begin
        ap_phi_mux_cipher_V_14_0_phi_fu_1071_p4 = cipher_V_14_0_reg_1068;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_reg_5728 == 1'd0))) begin
        ap_phi_mux_cipher_V_15_0_phi_fu_1081_p4 = cipher_15_V_4_fu_4014_p2;
    end else begin
        ap_phi_mux_cipher_V_15_0_phi_fu_1081_p4 = cipher_V_15_0_reg_1078;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_reg_5728 == 1'd0))) begin
        ap_phi_mux_cipher_V_1_0_phi_fu_1031_p4 = cipher_1_V_4_fu_3310_p2;
    end else begin
        ap_phi_mux_cipher_V_1_0_phi_fu_1031_p4 = cipher_V_1_0_reg_1028;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_reg_5728 == 1'd0))) begin
        ap_phi_mux_cipher_V_2_0_phi_fu_1021_p4 = cipher_2_V_4_fu_3356_p2;
    end else begin
        ap_phi_mux_cipher_V_2_0_phi_fu_1021_p4 = cipher_V_2_0_reg_1018;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_reg_5728 == 1'd0))) begin
        ap_phi_mux_cipher_V_3_0_phi_fu_1011_p4 = cipher_3_V_4_fu_3408_p2;
    end else begin
        ap_phi_mux_cipher_V_3_0_phi_fu_1011_p4 = cipher_V_3_0_reg_1008;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_reg_5728 == 1'd0))) begin
        ap_phi_mux_cipher_V_4_0_phi_fu_1001_p4 = cipher_4_V_3_fu_3460_p2;
    end else begin
        ap_phi_mux_cipher_V_4_0_phi_fu_1001_p4 = cipher_V_4_0_reg_998;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_reg_5728 == 1'd0))) begin
        ap_phi_mux_cipher_V_5_0_phi_fu_991_p4 = cipher_5_V_4_fu_3512_p2;
    end else begin
        ap_phi_mux_cipher_V_5_0_phi_fu_991_p4 = cipher_V_5_0_reg_988;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_reg_5728 == 1'd0))) begin
        ap_phi_mux_cipher_V_6_0_phi_fu_981_p4 = cipher_6_V_4_fu_3558_p2;
    end else begin
        ap_phi_mux_cipher_V_6_0_phi_fu_981_p4 = cipher_V_6_0_reg_978;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_reg_5728 == 1'd0))) begin
        ap_phi_mux_cipher_V_7_0_phi_fu_971_p4 = cipher_7_V_4_fu_3610_p2;
    end else begin
        ap_phi_mux_cipher_V_7_0_phi_fu_971_p4 = cipher_V_7_0_reg_968;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_reg_5728 == 1'd0))) begin
        ap_phi_mux_cipher_V_8_0_phi_fu_961_p4 = cipher_8_V_3_fu_3662_p2;
    end else begin
        ap_phi_mux_cipher_V_8_0_phi_fu_961_p4 = cipher_V_8_0_reg_958;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_reg_5728 == 1'd0))) begin
        ap_phi_mux_cipher_V_9_0_phi_fu_951_p4 = cipher_9_V_4_fu_3714_p2;
    end else begin
        ap_phi_mux_cipher_V_9_0_phi_fu_951_p4 = cipher_V_9_0_reg_948;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_reg_5728 == 1'd0))) begin
        ap_phi_mux_p_02325_1_phi_fu_1092_p4 = j_V_reg_5812;
    end else begin
        ap_phi_mux_p_02325_1_phi_fu_1092_p4 = p_02325_1_reg_1088;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (icmp_ln50_fu_1195_p2 == 1'd1) & (tmp_1_nbwritereq_fu_226_p8 == 1'd1) & (tmp_nbreadreq_fu_208_p8 == 1'd1))) begin
        in_r_TDATA_blk_n = in_r_TVALID;
    end else begin
        in_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((in_r_TVALID == 1'b0) & (ap_predicate_op74_read_state1 == 1'b1)) & (1'b1 == ap_CS_fsm_state1) & (ap_predicate_op74_read_state1 == 1'b1))) begin
        in_r_TREADY = 1'b1;
    end else begin
        in_r_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln50_reg_4260 == 1'd0) & (tmp_1_reg_4251 == 1'd1) & (tmp_reg_4247 == 1'd1))) begin
        out_r_TDATA_blk_n = out_r_TREADY;
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) & (ap_predicate_op774_write_state15 == 1'b1) & (1'b0 == ap_block_state15_io))) begin
        out_r_TVALID = 1'b1;
    end else begin
        out_r_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((in_r_TVALID == 1'b0) & (ap_predicate_op74_read_state1 == 1'b1)) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln50_fu_1195_p2 == 1'd1) & (tmp_1_nbwritereq_fu_226_p8 == 1'd1) & (tmp_nbreadreq_fu_208_p8 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else if ((~((in_r_TVALID == 1'b0) & (ap_predicate_op74_read_state1 == 1'b1)) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln50_fu_1195_p2 == 1'd0) & (tmp_1_nbwritereq_fu_226_p8 == 1'd1) & (tmp_nbreadreq_fu_208_p8 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((in_r_TVALID == 1'b0) & (ap_predicate_op74_read_state1 == 1'b1)) & (1'b1 == ap_CS_fsm_state1) & ((tmp_1_nbwritereq_fu_226_p8 == 1'd0) | (tmp_nbreadreq_fu_208_p8 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln162_fu_2694_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln162_fu_2694_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (1'b0 == ap_block_state15_io))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln59_fu_1409_p2 = (32'd1 + flag);

assign add_ln63_fu_4235_p2 = (32'd1 + flag_load_2_reg_1137);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((in_r_TVALID == 1'b0) & (ap_predicate_op74_read_state1 == 1'b1));
end

assign ap_block_state12_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state15_io = ((out_r_TREADY == 1'b0) & (ap_predicate_op774_write_state15 == 1'b1));
end

always @ (*) begin
    ap_condition_265 = (~((in_r_TVALID == 1'b0) & (ap_predicate_op74_read_state1 == 1'b1)) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln50_fu_1195_p2 == 1'd1) & (tmp_1_nbwritereq_fu_226_p8 == 1'd1) & (tmp_nbreadreq_fu_208_p8 == 1'd1));
end

always @ (*) begin
    ap_condition_789 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_955 = (~(ap_phi_mux_p_02325_1_phi_fu_1092_p4 == 4'd1) & ~(ap_phi_mux_p_02325_1_phi_fu_1092_p4 == 4'd8) & ~(ap_phi_mux_p_02325_1_phi_fu_1092_p4 == 4'd7) & ~(ap_phi_mux_p_02325_1_phi_fu_1092_p4 == 4'd6) & ~(ap_phi_mux_p_02325_1_phi_fu_1092_p4 == 4'd5) & ~(ap_phi_mux_p_02325_1_phi_fu_1092_p4 == 4'd4) & ~(ap_phi_mux_p_02325_1_phi_fu_1092_p4 == 4'd3) & ~(ap_phi_mux_p_02325_1_phi_fu_1092_p4 == 4'd2) & (icmp_ln162_fu_2694_p2 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_mux_flag_flag_1_phi_fu_1151_p4 = flag_flag_1_reg_1147;

assign ap_phi_reg_pp0_iter0_phi_ln719_reg_1100 = 'bx;

always @ (*) begin
    ap_predicate_op74_read_state1 = ((icmp_ln50_fu_1195_p2 == 1'd1) & (tmp_1_nbwritereq_fu_226_p8 == 1'd1) & (tmp_nbreadreq_fu_208_p8 == 1'd1));
end

always @ (*) begin
    ap_predicate_op774_write_state15 = ((icmp_ln50_reg_4260 == 1'd0) & (tmp_1_reg_4251 == 1'd1) & (tmp_reg_4247 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cipherT_V_fu_4185_p17 = {{{{{{{{{{{{{{{{cipher_0_V_2_fu_4104_p2}, {cipher_1_V_3_fu_4110_p2}}, {cipher_2_V_3_fu_4115_p2}}, {cipher_3_V_3_fu_4120_p2}}, {cipher_4_V_2_fu_4125_p2}}, {cipher_5_V_3_fu_4130_p2}}, {cipher_6_V_3_fu_4135_p2}}, {cipher_7_V_3_fu_4140_p2}}, {cipher_8_V_2_fu_4145_p2}}, {cipher_9_V_3_fu_4150_p2}}, {cipher_10_V_3_fu_4155_p2}}, {cipher_11_V_3_fu_4160_p2}}, {cipher_12_V_2_fu_4165_p2}}, {cipher_13_V_3_fu_4170_p2}}, {cipher_14_V_3_fu_4175_p2}}, {cipher_15_V_3_fu_4180_p2}};

assign cipher_0_V_2_fu_4104_p2 = (xor_ln719_5_fu_4100_p2 ^ SBOX_V_q0);

assign cipher_0_V_3_fu_3258_p2 = (xor_ln719_25_fu_3252_p2 ^ xor_ln719_23_fu_3240_p2);

assign cipher_0_V_fu_2614_p2 = (trunc_ln214_30_fu_2598_p4 ^ trunc_ln214_14_reg_4381);

assign cipher_10_V_3_fu_4155_p2 = (xor_ln1357_154_reg_5582 ^ SBOX_V_q2);

assign cipher_10_V_4_fu_3760_p2 = (xor_ln719_72_fu_3754_p2 ^ xor_ln719_70_fu_3742_p2);

assign cipher_10_V_fu_2664_p2 = (trunc_ln214_5_reg_4307 ^ trunc_ln214_20_fu_2498_p4);

assign cipher_11_V_3_fu_4160_p2 = (xor_ln1357_155_reg_5593 ^ SBOX_V_q7);

assign cipher_11_V_4_fu_3812_p2 = (xor_ln719_77_fu_3806_p2 ^ xor_ln719_75_fu_3794_p2);

assign cipher_11_V_fu_2669_p2 = (trunc_ln214_4_reg_4300 ^ trunc_ln214_19_fu_2488_p4);

assign cipher_12_V_2_fu_4165_p2 = (xor_ln1357_156_reg_5604 ^ SBOX_V_q12);

assign cipher_12_V_3_fu_3864_p2 = (xor_ln719_82_fu_3858_p2 ^ xor_ln719_80_fu_3846_p2);

assign cipher_12_V_fu_2674_p2 = (trunc_ln214_3_reg_4291 ^ trunc_ln214_18_fu_2478_p4);

assign cipher_13_V_3_fu_4170_p2 = (xor_ln1357_157_reg_5615 ^ SBOX_V_q1);

assign cipher_13_V_4_fu_3916_p2 = (xor_ln719_87_fu_3910_p2 ^ xor_ln719_85_fu_3898_p2);

assign cipher_13_V_fu_2679_p2 = (trunc_ln214_2_reg_4282 ^ trunc_ln214_17_fu_2468_p4);

assign cipher_14_V_3_fu_4175_p2 = (xor_ln1357_158_reg_5626 ^ SBOX_V_q6);

assign cipher_14_V_4_fu_3962_p2 = (xor_ln719_91_fu_3956_p2 ^ xor_ln719_89_fu_3944_p2);

assign cipher_14_V_fu_2684_p2 = (trunc_ln214_1_reg_4273 ^ trunc_ln214_16_fu_2458_p4);

assign cipher_15_V_3_fu_4180_p2 = (xor_ln1357_159_reg_5637 ^ SBOX_V_q11);

assign cipher_15_V_4_fu_4014_p2 = (xor_ln719_96_fu_4008_p2 ^ xor_ln719_94_fu_3996_p2);

assign cipher_15_V_fu_2689_p2 = (trunc_ln214_reg_4264 ^ trunc_ln214_15_fu_2454_p1);

assign cipher_1_V_3_fu_4110_p2 = (xor_ln1357_145_reg_5483 ^ SBOX_V_q5);

assign cipher_1_V_4_fu_3310_p2 = (xor_ln719_30_fu_3304_p2 ^ xor_ln719_28_fu_3292_p2);

assign cipher_1_V_fu_2619_p2 = (trunc_ln214_29_fu_2588_p4 ^ trunc_ln214_13_reg_4374);

assign cipher_2_V_3_fu_4115_p2 = (xor_ln1357_146_reg_5494 ^ SBOX_V_q10);

assign cipher_2_V_4_fu_3356_p2 = (xor_ln719_34_fu_3350_p2 ^ xor_ln719_32_fu_3338_p2);

assign cipher_2_V_fu_2624_p2 = (trunc_ln214_28_fu_2578_p4 ^ trunc_ln214_12_reg_4367);

assign cipher_3_V_3_fu_4120_p2 = (xor_ln1357_147_reg_5505 ^ SBOX_V_q15);

assign cipher_3_V_4_fu_3408_p2 = (xor_ln719_39_fu_3402_p2 ^ xor_ln719_37_fu_3390_p2);

assign cipher_3_V_fu_2629_p2 = (trunc_ln214_27_fu_2568_p4 ^ trunc_ln214_11_reg_4360);

assign cipher_4_V_2_fu_4125_p2 = (xor_ln1357_148_reg_5516 ^ SBOX_V_q4);

assign cipher_4_V_3_fu_3460_p2 = (xor_ln719_44_fu_3454_p2 ^ xor_ln719_42_fu_3442_p2);

assign cipher_4_V_fu_2634_p2 = (trunc_ln214_26_fu_2558_p4 ^ trunc_ln214_10_reg_4352);

assign cipher_5_V_3_fu_4130_p2 = (xor_ln1357_149_reg_5527 ^ SBOX_V_q9);

assign cipher_5_V_4_fu_3512_p2 = (xor_ln719_49_fu_3506_p2 ^ xor_ln719_47_fu_3494_p2);

assign cipher_5_V_fu_2639_p2 = (trunc_ln214_s_reg_4344 ^ trunc_ln214_25_fu_2548_p4);

assign cipher_6_V_3_fu_4135_p2 = (xor_ln1357_150_reg_5538 ^ SBOX_V_q14);

assign cipher_6_V_4_fu_3558_p2 = (xor_ln719_53_fu_3552_p2 ^ xor_ln719_51_fu_3540_p2);

assign cipher_6_V_fu_2644_p2 = (trunc_ln214_9_reg_4336 ^ trunc_ln214_24_fu_2538_p4);

assign cipher_7_V_3_fu_4140_p2 = (xor_ln1357_151_reg_5549 ^ SBOX_V_q3);

assign cipher_7_V_4_fu_3610_p2 = (xor_ln719_58_fu_3604_p2 ^ xor_ln719_56_fu_3592_p2);

assign cipher_7_V_fu_2649_p2 = (trunc_ln214_8_reg_4328 ^ trunc_ln214_23_fu_2528_p4);

assign cipher_8_V_2_fu_4145_p2 = (xor_ln1357_152_reg_5560 ^ SBOX_V_q8);

assign cipher_8_V_3_fu_3662_p2 = (xor_ln719_63_fu_3656_p2 ^ xor_ln719_61_fu_3644_p2);

assign cipher_8_V_fu_2654_p2 = (trunc_ln214_7_reg_4321 ^ trunc_ln214_22_fu_2518_p4);

assign cipher_9_V_3_fu_4150_p2 = (xor_ln1357_153_reg_5571 ^ SBOX_V_q13);

assign cipher_9_V_4_fu_3714_p2 = (xor_ln719_68_fu_3708_p2 ^ xor_ln719_66_fu_3696_p2);

assign cipher_9_V_fu_2659_p2 = (trunc_ln214_6_reg_4314 ^ trunc_ln214_21_fu_2508_p4);

assign icmp_ln162_fu_2694_p2 = ((ap_phi_mux_p_02325_1_phi_fu_1092_p4 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_1195_p2 = (($signed(tmp_4_fu_1185_p4) < $signed(31'd1)) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_1393_p2 = ((in_r_TID == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln61_fu_1415_p2 = ((in_r_TID == 8'd1) ? 1'b1 : 1'b0);

assign j_V_fu_2780_p2 = (ap_phi_mux_p_02325_1_phi_fu_1092_p4 + 4'd1);

assign out_r_TDATA = cipherT_V_fu_4185_p17;

assign out_r_TDEST = 8'd4;

assign out_r_TID = 8'd3;

assign out_r_TKEEP = 64'd18446744073709551615;

assign out_r_TLAST = 1'd1;

assign out_r_TUSER = 16'd0;

assign shl_ln1503_10_fu_3074_p2 = SBOX_V_q2 << 8'd1;

assign shl_ln1503_11_fu_3102_p2 = SBOX_V_q7 << 8'd1;

assign shl_ln1503_12_fu_3130_p2 = SBOX_V_q12 << 8'd1;

assign shl_ln1503_13_fu_3158_p2 = SBOX_V_q1 << 8'd1;

assign shl_ln1503_14_fu_3186_p2 = SBOX_V_q6 << 8'd1;

assign shl_ln1503_15_fu_3214_p2 = SBOX_V_q11 << 8'd1;

assign shl_ln1503_1_fu_2822_p2 = SBOX_V_q5 << 8'd1;

assign shl_ln1503_2_fu_2850_p2 = SBOX_V_q10 << 8'd1;

assign shl_ln1503_3_fu_2878_p2 = SBOX_V_q15 << 8'd1;

assign shl_ln1503_4_fu_2906_p2 = SBOX_V_q4 << 8'd1;

assign shl_ln1503_5_fu_2934_p2 = SBOX_V_q9 << 8'd1;

assign shl_ln1503_6_fu_2962_p2 = SBOX_V_q14 << 8'd1;

assign shl_ln1503_7_fu_2990_p2 = SBOX_V_q3 << 8'd1;

assign shl_ln1503_8_fu_3018_p2 = SBOX_V_q8 << 8'd1;

assign shl_ln1503_9_fu_3046_p2 = SBOX_V_q13 << 8'd1;

assign shl_ln1503_fu_2794_p2 = SBOX_V_q0 << 8'd1;

assign temp_column_b_0_V_1_fu_2918_p3 = ((tmp_9_fu_2898_p3[0:0] === 1'b1) ? xor_ln1503_4_fu_2912_p2 : shl_ln1503_4_fu_2906_p2);

assign temp_column_b_0_V_2_fu_3030_p3 = ((tmp_13_fu_3010_p3[0:0] === 1'b1) ? xor_ln1503_8_fu_3024_p2 : shl_ln1503_8_fu_3018_p2);

assign temp_column_b_0_V_3_fu_3142_p3 = ((tmp_17_fu_3122_p3[0:0] === 1'b1) ? xor_ln1503_12_fu_3136_p2 : shl_ln1503_12_fu_3130_p2);

assign temp_column_b_0_V_fu_2806_p3 = ((tmp_5_fu_2786_p3[0:0] === 1'b1) ? xor_ln1503_fu_2800_p2 : shl_ln1503_fu_2794_p2);

assign temp_column_b_1_V_1_fu_2946_p3 = ((tmp_10_fu_2926_p3[0:0] === 1'b1) ? xor_ln1503_5_fu_2940_p2 : shl_ln1503_5_fu_2934_p2);

assign temp_column_b_1_V_2_fu_3058_p3 = ((tmp_14_fu_3038_p3[0:0] === 1'b1) ? xor_ln1503_9_fu_3052_p2 : shl_ln1503_9_fu_3046_p2);

assign temp_column_b_1_V_3_fu_3170_p3 = ((tmp_18_fu_3150_p3[0:0] === 1'b1) ? xor_ln1503_13_fu_3164_p2 : shl_ln1503_13_fu_3158_p2);

assign temp_column_b_1_V_fu_2834_p3 = ((tmp_6_fu_2814_p3[0:0] === 1'b1) ? xor_ln1503_1_fu_2828_p2 : shl_ln1503_1_fu_2822_p2);

assign temp_column_b_2_V_1_fu_2974_p3 = ((tmp_11_fu_2954_p3[0:0] === 1'b1) ? xor_ln1503_6_fu_2968_p2 : shl_ln1503_6_fu_2962_p2);

assign temp_column_b_2_V_2_fu_3086_p3 = ((tmp_15_fu_3066_p3[0:0] === 1'b1) ? xor_ln1503_10_fu_3080_p2 : shl_ln1503_10_fu_3074_p2);

assign temp_column_b_2_V_3_fu_3198_p3 = ((tmp_19_fu_3178_p3[0:0] === 1'b1) ? xor_ln1503_14_fu_3192_p2 : shl_ln1503_14_fu_3186_p2);

assign temp_column_b_2_V_fu_2862_p3 = ((tmp_7_fu_2842_p3[0:0] === 1'b1) ? xor_ln1503_2_fu_2856_p2 : shl_ln1503_2_fu_2850_p2);

assign temp_column_b_3_V_1_fu_3002_p3 = ((tmp_12_fu_2982_p3[0:0] === 1'b1) ? xor_ln1503_7_fu_2996_p2 : shl_ln1503_7_fu_2990_p2);

assign temp_column_b_3_V_2_fu_3114_p3 = ((tmp_16_fu_3094_p3[0:0] === 1'b1) ? xor_ln1503_11_fu_3108_p2 : shl_ln1503_11_fu_3102_p2);

assign temp_column_b_3_V_3_fu_3226_p3 = ((tmp_20_fu_3206_p3[0:0] === 1'b1) ? xor_ln1503_15_fu_3220_p2 : shl_ln1503_15_fu_3214_p2);

assign temp_column_b_3_V_fu_2890_p3 = ((tmp_8_fu_2870_p3[0:0] === 1'b1) ? xor_ln1503_3_fu_2884_p2 : shl_ln1503_3_fu_2878_p2);

assign tmp_10_fu_2926_p3 = SBOX_V_q9[32'd7];

assign tmp_11_fu_2954_p3 = SBOX_V_q14[32'd7];

assign tmp_12_fu_2982_p3 = SBOX_V_q3[32'd7];

assign tmp_13_fu_3010_p3 = SBOX_V_q8[32'd7];

assign tmp_14_fu_3038_p3 = SBOX_V_q13[32'd7];

assign tmp_15_fu_3066_p3 = SBOX_V_q2[32'd7];

assign tmp_16_fu_3094_p3 = SBOX_V_q7[32'd7];

assign tmp_17_fu_3122_p3 = SBOX_V_q12[32'd7];

assign tmp_18_fu_3150_p3 = SBOX_V_q1[32'd7];

assign tmp_19_fu_3178_p3 = SBOX_V_q6[32'd7];

assign tmp_1_nbwritereq_fu_226_p8 = out_r_TREADY;

assign tmp_20_fu_3206_p3 = SBOX_V_q11[32'd7];

assign tmp_4_fu_1185_p4 = {{flag[31:1]}};

assign tmp_5_fu_2786_p3 = SBOX_V_q0[32'd7];

assign tmp_6_fu_2814_p3 = SBOX_V_q5[32'd7];

assign tmp_7_fu_2842_p3 = SBOX_V_q10[32'd7];

assign tmp_8_fu_2870_p3 = SBOX_V_q15[32'd7];

assign tmp_9_fu_2898_p3 = SBOX_V_q4[32'd7];

assign tmp_nbreadreq_fu_208_p8 = in_r_TVALID;

assign trunc_ln209_1_fu_4226_p1 = tmp_data_V_reg_4407[127:0];

assign trunc_ln209_fu_1399_p1 = in_r_TDATA[127:0];

assign trunc_ln214_15_fu_2454_p1 = plainT_V[7:0];

assign trunc_ln214_16_fu_2458_p4 = {{plainT_V[15:8]}};

assign trunc_ln214_17_fu_2468_p4 = {{plainT_V[23:16]}};

assign trunc_ln214_18_fu_2478_p4 = {{plainT_V[31:24]}};

assign trunc_ln214_19_fu_2488_p4 = {{plainT_V[39:32]}};

assign trunc_ln214_1_fu_1209_p4 = {{keyT_V[15:8]}};

assign trunc_ln214_20_fu_2498_p4 = {{plainT_V[47:40]}};

assign trunc_ln214_21_fu_2508_p4 = {{plainT_V[55:48]}};

assign trunc_ln214_22_fu_2518_p4 = {{plainT_V[63:56]}};

assign trunc_ln214_23_fu_2528_p4 = {{plainT_V[71:64]}};

assign trunc_ln214_24_fu_2538_p4 = {{plainT_V[79:72]}};

assign trunc_ln214_25_fu_2548_p4 = {{plainT_V[87:80]}};

assign trunc_ln214_26_fu_2558_p4 = {{plainT_V[95:88]}};

assign trunc_ln214_27_fu_2568_p4 = {{plainT_V[103:96]}};

assign trunc_ln214_28_fu_2578_p4 = {{plainT_V[111:104]}};

assign trunc_ln214_29_fu_2588_p4 = {{plainT_V[119:112]}};

assign trunc_ln214_2_fu_1219_p4 = {{keyT_V[23:16]}};

assign trunc_ln214_30_fu_2598_p4 = {{plainT_V[127:120]}};

assign trunc_ln214_3_fu_1229_p4 = {{keyT_V[31:24]}};

assign trunc_ln214_fu_1205_p1 = keyT_V[7:0];

assign xor_ln1357_100_fu_2290_p2 = (xor_ln1357_96_reg_5036 ^ xor_ln1357_84_reg_4940);

assign xor_ln1357_101_fu_2294_p2 = (xor_ln1357_97_reg_5043 ^ xor_ln1357_85_reg_4948);

assign xor_ln1357_102_fu_2298_p2 = (xor_ln1357_98_reg_5050 ^ xor_ln1357_86_reg_4956);

assign xor_ln1357_103_fu_2302_p2 = (xor_ln1357_99_reg_5057 ^ xor_ln1357_87_reg_4964);

assign xor_ln1357_104_fu_1995_p2 = (xor_ln1357_96_fu_1971_p2 ^ xor_ln1357_72_reg_4839);

assign xor_ln1357_105_fu_2000_p2 = (xor_ln1357_97_fu_1977_p2 ^ xor_ln1357_73_reg_4846);

assign xor_ln1357_106_fu_2005_p2 = (xor_ln1357_98_fu_1983_p2 ^ xor_ln1357_74_reg_4853);

assign xor_ln1357_107_fu_2010_p2 = (xor_ln1357_99_fu_1989_p2 ^ xor_ln1357_75_reg_4860);

assign xor_ln1357_108_fu_2015_p2 = (xor_ln1357_92_reg_4972 ^ xor_ln1357_104_fu_1995_p2);

assign xor_ln1357_109_fu_2020_p2 = (xor_ln1357_93_reg_4978 ^ xor_ln1357_105_fu_2000_p2);

assign xor_ln1357_10_fu_1477_p2 = (xor_ln1357_6_fu_1457_p2 ^ trunc_ln214_5_reg_4307);

assign xor_ln1357_110_fu_2025_p2 = (xor_ln1357_94_reg_4984 ^ xor_ln1357_106_fu_2005_p2);

assign xor_ln1357_111_fu_2030_p2 = (xor_ln1357_95_reg_4990 ^ xor_ln1357_107_fu_2010_p2);

assign xor_ln1357_112_fu_2101_p2 = (xor_ln719_3_reg_5132 ^ xor_ln1357_96_reg_5036);

assign xor_ln1357_113_fu_2105_p2 = (xor_ln1357_97_reg_5043 ^ reg_1173);

assign xor_ln1357_114_fu_2110_p2 = (xor_ln1357_98_reg_5050 ^ reg_1177);

assign xor_ln1357_115_fu_2115_p2 = (xor_ln1357_99_reg_5057 ^ reg_1169);

assign xor_ln1357_116_fu_2306_p2 = (xor_ln719_3_reg_5132 ^ xor_ln1357_84_reg_4940);

assign xor_ln1357_117_fu_2310_p2 = (xor_ln1357_85_reg_4948 ^ reg_1173);

assign xor_ln1357_118_fu_2315_p2 = (xor_ln1357_86_reg_4956 ^ reg_1177);

assign xor_ln1357_119_fu_2320_p2 = (xor_ln1357_87_reg_4964 ^ reg_1169);

assign xor_ln1357_11_fu_1482_p2 = (xor_ln1357_7_fu_1462_p2 ^ trunc_ln214_4_reg_4300);

assign xor_ln1357_120_fu_2325_p2 = (xor_ln1357_116_fu_2306_p2 ^ xor_ln1357_104_reg_5064);

assign xor_ln1357_121_fu_2330_p2 = (xor_ln1357_117_fu_2310_p2 ^ xor_ln1357_105_reg_5071);

assign xor_ln1357_122_fu_2335_p2 = (xor_ln1357_118_fu_2315_p2 ^ xor_ln1357_106_reg_5078);

assign xor_ln1357_123_fu_2340_p2 = (xor_ln1357_119_fu_2320_p2 ^ xor_ln1357_107_reg_5085);

assign xor_ln1357_124_fu_2061_p2 = (xor_ln719_3_fu_2055_p2 ^ xor_ln1357_60_reg_4739);

assign xor_ln1357_125_fu_2066_p2 = (xor_ln1357_61_reg_4747 ^ SBOX_V_q2);

assign xor_ln1357_126_fu_2071_p2 = (xor_ln1357_62_reg_4755 ^ SBOX_V_q3);

assign xor_ln1357_127_fu_2076_p2 = (xor_ln1357_63_reg_4763 ^ SBOX_V_q0);

assign xor_ln1357_128_fu_2126_p2 = (xor_ln1357_163_fu_2120_p2 ^ SBOX_V_q1);

assign xor_ln1357_129_fu_2132_p2 = (xor_ln1357_113_fu_2105_p2 ^ SBOX_V_q2);

assign xor_ln1357_12_fu_1487_p2 = (xor_ln1357_8_fu_1467_p2 ^ trunc_ln214_3_reg_4291);

assign xor_ln1357_130_fu_2138_p2 = (xor_ln1357_114_fu_2110_p2 ^ SBOX_V_q3);

assign xor_ln1357_131_fu_2144_p2 = (xor_ln1357_115_fu_2115_p2 ^ SBOX_V_q0);

assign xor_ln1357_132_fu_2345_p2 = (xor_ln1357_128_reg_5206 ^ xor_ln1357_116_fu_2306_p2);

assign xor_ln1357_133_fu_2350_p2 = (xor_ln1357_129_reg_5213 ^ xor_ln1357_117_fu_2310_p2);

assign xor_ln1357_134_fu_2355_p2 = (xor_ln1357_130_reg_5220 ^ xor_ln1357_118_fu_2315_p2);

assign xor_ln1357_135_fu_2360_p2 = (xor_ln1357_131_reg_5227 ^ xor_ln1357_119_fu_2320_p2);

assign xor_ln1357_136_fu_2150_p2 = (xor_ln1357_128_fu_2126_p2 ^ xor_ln1357_104_reg_5064);

assign xor_ln1357_137_fu_2155_p2 = (xor_ln1357_129_fu_2132_p2 ^ xor_ln1357_105_reg_5071);

assign xor_ln1357_138_fu_2160_p2 = (xor_ln1357_130_fu_2138_p2 ^ xor_ln1357_106_reg_5078);

assign xor_ln1357_139_fu_2165_p2 = (xor_ln1357_131_fu_2144_p2 ^ xor_ln1357_107_reg_5085);

assign xor_ln1357_13_fu_1492_p2 = (xor_ln1357_9_fu_1472_p2 ^ trunc_ln214_2_reg_4282);

assign xor_ln1357_140_fu_2170_p2 = (xor_ln1357_136_fu_2150_p2 ^ xor_ln1357_124_reg_5138);

assign xor_ln1357_141_fu_2175_p2 = (xor_ln1357_137_fu_2155_p2 ^ xor_ln1357_125_reg_5145);

assign xor_ln1357_142_fu_2180_p2 = (xor_ln1357_138_fu_2160_p2 ^ xor_ln1357_126_reg_5152);

assign xor_ln1357_143_fu_2185_p2 = (xor_ln1357_139_fu_2165_p2 ^ xor_ln1357_127_reg_5159);

assign xor_ln1357_144_fu_1421_p2 = (trunc_ln214_14_reg_4381 ^ 8'd1);

assign xor_ln1357_145_fu_2371_p2 = (xor_ln1357_129_reg_5213 ^ SBOX_V_q2);

assign xor_ln1357_146_fu_2376_p2 = (xor_ln1357_130_reg_5220 ^ SBOX_V_q3);

assign xor_ln1357_147_fu_2381_p2 = (xor_ln1357_131_reg_5227 ^ SBOX_V_q0);

assign xor_ln1357_148_fu_2386_p2 = (xor_ln719_4_fu_2365_p2 ^ xor_ln1357_116_fu_2306_p2);

assign xor_ln1357_149_fu_2392_p2 = (xor_ln1357_117_fu_2310_p2 ^ SBOX_V_q2);

assign xor_ln1357_14_fu_1497_p2 = (xor_ln1357_10_fu_1477_p2 ^ trunc_ln214_1_reg_4273);

assign xor_ln1357_150_fu_2398_p2 = (xor_ln1357_118_fu_2315_p2 ^ SBOX_V_q3);

assign xor_ln1357_151_fu_2404_p2 = (xor_ln1357_119_fu_2320_p2 ^ SBOX_V_q0);

assign xor_ln1357_152_fu_2410_p2 = (xor_ln1357_148_fu_2386_p2 ^ xor_ln1357_136_reg_5234);

assign xor_ln1357_153_fu_2415_p2 = (xor_ln1357_149_fu_2392_p2 ^ xor_ln1357_137_reg_5240);

assign xor_ln1357_154_fu_2420_p2 = (xor_ln1357_150_fu_2398_p2 ^ xor_ln1357_138_reg_5246);

assign xor_ln1357_155_fu_2425_p2 = (xor_ln1357_151_fu_2404_p2 ^ xor_ln1357_139_reg_5252);

assign xor_ln1357_156_fu_2430_p2 = (xor_ln1357_148_fu_2386_p2 ^ xor_ln1357_124_reg_5138);

assign xor_ln1357_157_fu_2435_p2 = (xor_ln1357_149_fu_2392_p2 ^ xor_ln1357_125_reg_5145);

assign xor_ln1357_158_fu_2440_p2 = (xor_ln1357_150_fu_2398_p2 ^ xor_ln1357_126_reg_5152);

assign xor_ln1357_159_fu_2445_p2 = (xor_ln1357_151_fu_2404_p2 ^ xor_ln1357_127_reg_5159);

assign xor_ln1357_15_fu_1502_p2 = (xor_ln1357_11_fu_1482_p2 ^ trunc_ln214_reg_4264);

assign xor_ln1357_160_fu_1612_p2 = (xor_ln1357_16_fu_1593_p2 ^ 8'd4);

assign xor_ln1357_161_fu_1767_p2 = (xor_ln1357_48_fu_1748_p2 ^ 8'd16);

assign xor_ln1357_162_fu_1965_p2 = (xor_ln1357_80_fu_1946_p2 ^ 8'd64);

assign xor_ln1357_163_fu_2120_p2 = (xor_ln1357_112_fu_2101_p2 ^ 8'd27);

assign xor_ln1357_16_fu_1593_p2 = (xor_ln719_reg_4536 ^ xor_ln1357_reg_4424);

assign xor_ln1357_17_fu_1597_p2 = (xor_ln1357_1_reg_4430 ^ reg_1173);

assign xor_ln1357_18_fu_1602_p2 = (xor_ln1357_2_reg_4436 ^ reg_1177);

assign xor_ln1357_19_fu_1607_p2 = (xor_ln1357_3_reg_4442 ^ reg_1169);

assign xor_ln1357_1_fu_1432_p2 = (trunc_ln214_13_reg_4374 ^ SBOX_V_q2);

assign xor_ln1357_20_fu_1533_p2 = (xor_ln719_fu_1527_p2 ^ trunc_ln214_10_reg_4352);

assign xor_ln1357_21_fu_1538_p2 = (trunc_ln214_s_reg_4344 ^ SBOX_V_q2);

assign xor_ln1357_22_fu_1543_p2 = (trunc_ln214_9_reg_4336 ^ SBOX_V_q3);

assign xor_ln1357_23_fu_1548_p2 = (trunc_ln214_8_reg_4328 ^ SBOX_V_q0);

assign xor_ln1357_24_fu_2210_p2 = (xor_ln1357_8_reg_4468 ^ xor_ln1357_20_reg_4541);

assign xor_ln1357_25_fu_2214_p2 = (xor_ln1357_9_reg_4475 ^ xor_ln1357_21_reg_4549);

assign xor_ln1357_26_fu_2218_p2 = (xor_ln1357_22_reg_4557 ^ xor_ln1357_10_reg_4482);

assign xor_ln1357_27_fu_2222_p2 = (xor_ln1357_23_reg_4565 ^ xor_ln1357_11_reg_4489);

assign xor_ln1357_28_fu_1553_p2 = (xor_ln1357_20_fu_1533_p2 ^ trunc_ln214_3_reg_4291);

assign xor_ln1357_29_fu_1558_p2 = (xor_ln1357_21_fu_1538_p2 ^ trunc_ln214_2_reg_4282);

assign xor_ln1357_2_fu_1437_p2 = (trunc_ln214_12_reg_4367 ^ SBOX_V_q3);

assign xor_ln1357_30_fu_1563_p2 = (xor_ln1357_22_fu_1543_p2 ^ trunc_ln214_1_reg_4273);

assign xor_ln1357_31_fu_1568_p2 = (xor_ln1357_23_fu_1548_p2 ^ trunc_ln214_reg_4264);

assign xor_ln1357_32_fu_1618_p2 = (xor_ln1357_160_fu_1612_p2 ^ SBOX_V_q1);

assign xor_ln1357_33_fu_1624_p2 = (xor_ln1357_17_fu_1597_p2 ^ SBOX_V_q2);

assign xor_ln1357_34_fu_1630_p2 = (xor_ln1357_18_fu_1602_p2 ^ SBOX_V_q3);

assign xor_ln1357_35_fu_1636_p2 = (xor_ln1357_19_fu_1607_p2 ^ SBOX_V_q0);

assign xor_ln1357_36_fu_2226_p2 = (xor_ln1357_32_reg_4637 ^ xor_ln1357_20_reg_4541);

assign xor_ln1357_37_fu_2230_p2 = (xor_ln1357_33_reg_4644 ^ xor_ln1357_21_reg_4549);

assign xor_ln1357_38_fu_2234_p2 = (xor_ln1357_34_reg_4651 ^ xor_ln1357_22_reg_4557);

assign xor_ln1357_39_fu_2238_p2 = (xor_ln1357_35_reg_4658 ^ xor_ln1357_23_reg_4565);

assign xor_ln1357_3_fu_1442_p2 = (trunc_ln214_11_reg_4360 ^ SBOX_V_q0);

assign xor_ln1357_40_fu_1642_p2 = (xor_ln1357_8_reg_4468 ^ xor_ln1357_32_fu_1618_p2);

assign xor_ln1357_41_fu_1647_p2 = (xor_ln1357_9_reg_4475 ^ xor_ln1357_33_fu_1624_p2);

assign xor_ln1357_42_fu_1652_p2 = (xor_ln1357_34_fu_1630_p2 ^ xor_ln1357_10_reg_4482);

assign xor_ln1357_43_fu_1657_p2 = (xor_ln1357_35_fu_1636_p2 ^ xor_ln1357_11_reg_4489);

assign xor_ln1357_44_fu_1662_p2 = (xor_ln1357_40_fu_1642_p2 ^ xor_ln1357_28_reg_4573);

assign xor_ln1357_45_fu_1667_p2 = (xor_ln1357_41_fu_1647_p2 ^ xor_ln1357_29_reg_4579);

assign xor_ln1357_46_fu_1672_p2 = (xor_ln1357_42_fu_1652_p2 ^ xor_ln1357_30_reg_4585);

assign xor_ln1357_47_fu_1677_p2 = (xor_ln1357_43_fu_1657_p2 ^ xor_ln1357_31_reg_4591);

assign xor_ln1357_48_fu_1748_p2 = (xor_ln719_1_reg_4733 ^ xor_ln1357_32_reg_4637);

assign xor_ln1357_49_fu_1752_p2 = (xor_ln1357_33_reg_4644 ^ reg_1173);

assign xor_ln1357_4_fu_1447_p2 = (xor_ln1357_fu_1426_p2 ^ trunc_ln214_10_reg_4352);

assign xor_ln1357_50_fu_1757_p2 = (xor_ln1357_34_reg_4651 ^ reg_1177);

assign xor_ln1357_51_fu_1762_p2 = (xor_ln1357_35_reg_4658 ^ reg_1169);

assign xor_ln1357_52_fu_1857_p2 = (xor_ln719_1_reg_4733 ^ xor_ln1357_20_reg_4541);

assign xor_ln1357_53_fu_1861_p2 = (xor_ln1357_21_reg_4549 ^ reg_1173);

assign xor_ln1357_54_fu_1866_p2 = (xor_ln1357_22_reg_4557 ^ reg_1177);

assign xor_ln1357_55_fu_1871_p2 = (xor_ln1357_23_reg_4565 ^ reg_1169);

assign xor_ln1357_56_fu_2242_p2 = (xor_ln1357_52_reg_4907 ^ xor_ln1357_40_reg_4665);

assign xor_ln1357_57_fu_2246_p2 = (xor_ln1357_53_reg_4914 ^ xor_ln1357_41_reg_4672);

assign xor_ln1357_58_fu_2250_p2 = (xor_ln1357_54_reg_4921 ^ xor_ln1357_42_reg_4679);

assign xor_ln1357_59_fu_2254_p2 = (xor_ln1357_55_reg_4928 ^ xor_ln1357_43_reg_4686);

assign xor_ln1357_5_fu_1452_p2 = (xor_ln1357_1_fu_1432_p2 ^ trunc_ln214_s_reg_4344);

assign xor_ln1357_60_fu_1708_p2 = (xor_ln719_1_fu_1702_p2 ^ trunc_ln214_3_reg_4291);

assign xor_ln1357_61_fu_1713_p2 = (trunc_ln214_2_reg_4282 ^ SBOX_V_q2);

assign xor_ln1357_62_fu_1718_p2 = (trunc_ln214_1_reg_4273 ^ SBOX_V_q3);

assign xor_ln1357_63_fu_1723_p2 = (trunc_ln214_reg_4264 ^ SBOX_V_q0);

assign xor_ln1357_64_fu_1773_p2 = (xor_ln1357_161_fu_1767_p2 ^ SBOX_V_q1);

assign xor_ln1357_65_fu_1779_p2 = (xor_ln1357_49_fu_1752_p2 ^ SBOX_V_q2);

assign xor_ln1357_66_fu_1785_p2 = (xor_ln1357_50_fu_1757_p2 ^ SBOX_V_q3);

assign xor_ln1357_67_fu_1791_p2 = (xor_ln1357_51_fu_1762_p2 ^ SBOX_V_q0);

assign xor_ln1357_68_fu_2258_p2 = (xor_ln1357_64_reg_4811 ^ xor_ln1357_52_reg_4907);

assign xor_ln1357_69_fu_2262_p2 = (xor_ln1357_65_reg_4818 ^ xor_ln1357_53_reg_4914);

assign xor_ln1357_6_fu_1457_p2 = (xor_ln1357_2_fu_1437_p2 ^ trunc_ln214_9_reg_4336);

assign xor_ln1357_70_fu_2266_p2 = (xor_ln1357_66_reg_4825 ^ xor_ln1357_54_reg_4921);

assign xor_ln1357_71_fu_2270_p2 = (xor_ln1357_67_reg_4832 ^ xor_ln1357_55_reg_4928);

assign xor_ln1357_72_fu_1797_p2 = (xor_ln1357_64_fu_1773_p2 ^ xor_ln1357_40_reg_4665);

assign xor_ln1357_73_fu_1802_p2 = (xor_ln1357_65_fu_1779_p2 ^ xor_ln1357_41_reg_4672);

assign xor_ln1357_74_fu_1807_p2 = (xor_ln1357_66_fu_1785_p2 ^ xor_ln1357_42_reg_4679);

assign xor_ln1357_75_fu_1812_p2 = (xor_ln1357_67_fu_1791_p2 ^ xor_ln1357_43_reg_4686);

assign xor_ln1357_76_fu_1817_p2 = (xor_ln1357_72_fu_1797_p2 ^ xor_ln1357_60_reg_4739);

assign xor_ln1357_77_fu_1822_p2 = (xor_ln1357_73_fu_1802_p2 ^ xor_ln1357_61_reg_4747);

assign xor_ln1357_78_fu_1827_p2 = (xor_ln1357_74_fu_1807_p2 ^ xor_ln1357_62_reg_4755);

assign xor_ln1357_79_fu_1832_p2 = (xor_ln1357_75_fu_1812_p2 ^ xor_ln1357_63_reg_4763);

assign xor_ln1357_7_fu_1462_p2 = (xor_ln1357_3_fu_1442_p2 ^ trunc_ln214_8_reg_4328);

assign xor_ln1357_80_fu_1946_p2 = (xor_ln719_2_reg_4935 ^ xor_ln1357_64_reg_4811);

assign xor_ln1357_81_fu_1950_p2 = (xor_ln1357_65_reg_4818 ^ reg_1173);

assign xor_ln1357_82_fu_1955_p2 = (xor_ln1357_66_reg_4825 ^ reg_1177);

assign xor_ln1357_83_fu_1960_p2 = (xor_ln1357_67_reg_4832 ^ reg_1169);

assign xor_ln1357_84_fu_1882_p2 = (xor_ln719_2_fu_1876_p2 ^ xor_ln1357_52_fu_1857_p2);

assign xor_ln1357_85_fu_1888_p2 = (xor_ln1357_53_fu_1861_p2 ^ SBOX_V_q2);

assign xor_ln1357_86_fu_1894_p2 = (xor_ln1357_54_fu_1866_p2 ^ SBOX_V_q3);

assign xor_ln1357_87_fu_1900_p2 = (xor_ln1357_55_fu_1871_p2 ^ SBOX_V_q0);

assign xor_ln1357_88_fu_2274_p2 = (xor_ln1357_84_reg_4940 ^ xor_ln1357_72_reg_4839);

assign xor_ln1357_89_fu_2278_p2 = (xor_ln1357_85_reg_4948 ^ xor_ln1357_73_reg_4846);

assign xor_ln1357_8_fu_1467_p2 = (xor_ln1357_4_fu_1447_p2 ^ trunc_ln214_7_reg_4321);

assign xor_ln1357_90_fu_2282_p2 = (xor_ln1357_86_reg_4956 ^ xor_ln1357_74_reg_4853);

assign xor_ln1357_91_fu_2286_p2 = (xor_ln1357_87_reg_4964 ^ xor_ln1357_75_reg_4860);

assign xor_ln1357_92_fu_1906_p2 = (xor_ln1357_84_fu_1882_p2 ^ xor_ln1357_60_reg_4739);

assign xor_ln1357_93_fu_1911_p2 = (xor_ln1357_85_fu_1888_p2 ^ xor_ln1357_61_reg_4747);

assign xor_ln1357_94_fu_1916_p2 = (xor_ln1357_86_fu_1894_p2 ^ xor_ln1357_62_reg_4755);

assign xor_ln1357_95_fu_1921_p2 = (xor_ln1357_87_fu_1900_p2 ^ xor_ln1357_63_reg_4763);

assign xor_ln1357_96_fu_1971_p2 = (xor_ln1357_162_fu_1965_p2 ^ SBOX_V_q1);

assign xor_ln1357_97_fu_1977_p2 = (xor_ln1357_81_fu_1950_p2 ^ SBOX_V_q2);

assign xor_ln1357_98_fu_1983_p2 = (xor_ln1357_82_fu_1955_p2 ^ SBOX_V_q3);

assign xor_ln1357_99_fu_1989_p2 = (xor_ln1357_83_fu_1960_p2 ^ SBOX_V_q0);

assign xor_ln1357_9_fu_1472_p2 = (xor_ln1357_5_fu_1452_p2 ^ trunc_ln214_6_reg_4314);

assign xor_ln1357_fu_1426_p2 = (xor_ln1357_144_fu_1421_p2 ^ SBOX_V_q1);

assign xor_ln1503_10_fu_3080_p2 = (shl_ln1503_10_fu_3074_p2 ^ 8'd27);

assign xor_ln1503_11_fu_3108_p2 = (shl_ln1503_11_fu_3102_p2 ^ 8'd27);

assign xor_ln1503_12_fu_3136_p2 = (shl_ln1503_12_fu_3130_p2 ^ 8'd27);

assign xor_ln1503_13_fu_3164_p2 = (shl_ln1503_13_fu_3158_p2 ^ 8'd27);

assign xor_ln1503_14_fu_3192_p2 = (shl_ln1503_14_fu_3186_p2 ^ 8'd27);

assign xor_ln1503_15_fu_3220_p2 = (shl_ln1503_15_fu_3214_p2 ^ 8'd27);

assign xor_ln1503_1_fu_2828_p2 = (shl_ln1503_1_fu_2822_p2 ^ 8'd27);

assign xor_ln1503_2_fu_2856_p2 = (shl_ln1503_2_fu_2850_p2 ^ 8'd27);

assign xor_ln1503_3_fu_2884_p2 = (shl_ln1503_3_fu_2878_p2 ^ 8'd27);

assign xor_ln1503_4_fu_2912_p2 = (shl_ln1503_4_fu_2906_p2 ^ 8'd27);

assign xor_ln1503_5_fu_2940_p2 = (shl_ln1503_5_fu_2934_p2 ^ 8'd27);

assign xor_ln1503_6_fu_2968_p2 = (shl_ln1503_6_fu_2962_p2 ^ 8'd27);

assign xor_ln1503_7_fu_2996_p2 = (shl_ln1503_7_fu_2990_p2 ^ 8'd27);

assign xor_ln1503_8_fu_3024_p2 = (shl_ln1503_8_fu_3018_p2 ^ 8'd27);

assign xor_ln1503_9_fu_3052_p2 = (shl_ln1503_9_fu_3046_p2 ^ 8'd27);

assign xor_ln1503_fu_2800_p2 = (shl_ln1503_fu_2794_p2 ^ 8'd27);

assign xor_ln719_1_fu_1702_p2 = (8'd8 ^ SBOX_V_q1);

assign xor_ln719_22_fu_3234_p2 = (SBOX_V_q5 ^ SBOX_V_q10);

assign xor_ln719_23_fu_3240_p2 = (xor_ln719_22_fu_3234_p2 ^ SBOX_V_q15);

assign xor_ln719_24_fu_3246_p2 = (temp_column_b_1_V_fu_2834_p3 ^ ap_phi_reg_pp0_iter1_phi_ln719_reg_1100);

assign xor_ln719_25_fu_3252_p2 = (xor_ln719_24_fu_3246_p2 ^ temp_column_b_0_V_fu_2806_p3);

assign xor_ln719_27_fu_3286_p2 = (SBOX_V_q15 ^ SBOX_V_q0);

assign xor_ln719_28_fu_3292_p2 = (xor_ln719_27_fu_3286_p2 ^ SBOX_V_q10);

assign xor_ln719_29_fu_3298_p2 = (temp_column_b_2_V_fu_2862_p3 ^ phi_ln719_1_fu_3264_p18);

assign xor_ln719_2_fu_1876_p2 = (8'd32 ^ SBOX_V_q1);

assign xor_ln719_30_fu_3304_p2 = (xor_ln719_29_fu_3298_p2 ^ temp_column_b_1_V_fu_2834_p3);

assign xor_ln719_32_fu_3338_p2 = (xor_ln719_27_fu_3286_p2 ^ SBOX_V_q5);

assign xor_ln719_33_fu_3344_p2 = (temp_column_b_3_V_fu_2890_p3 ^ phi_ln719_2_fu_3316_p18);

assign xor_ln719_34_fu_3350_p2 = (xor_ln719_33_fu_3344_p2 ^ temp_column_b_2_V_fu_2862_p3);

assign xor_ln719_36_fu_3384_p2 = (SBOX_V_q5 ^ SBOX_V_q0);

assign xor_ln719_37_fu_3390_p2 = (xor_ln719_36_fu_3384_p2 ^ SBOX_V_q10);

assign xor_ln719_38_fu_3396_p2 = (temp_column_b_3_V_fu_2890_p3 ^ phi_ln719_3_fu_3362_p18);

assign xor_ln719_39_fu_3402_p2 = (xor_ln719_38_fu_3396_p2 ^ temp_column_b_0_V_fu_2806_p3);

assign xor_ln719_3_fu_2055_p2 = (8'd128 ^ SBOX_V_q1);

assign xor_ln719_41_fu_3436_p2 = (SBOX_V_q9 ^ SBOX_V_q14);

assign xor_ln719_42_fu_3442_p2 = (xor_ln719_41_fu_3436_p2 ^ SBOX_V_q3);

assign xor_ln719_43_fu_3448_p2 = (temp_column_b_1_V_1_fu_2946_p3 ^ phi_ln719_4_fu_3414_p18);

assign xor_ln719_44_fu_3454_p2 = (xor_ln719_43_fu_3448_p2 ^ temp_column_b_0_V_1_fu_2918_p3);

assign xor_ln719_46_fu_3488_p2 = (SBOX_V_q4 ^ SBOX_V_q3);

assign xor_ln719_47_fu_3494_p2 = (xor_ln719_46_fu_3488_p2 ^ SBOX_V_q14);

assign xor_ln719_48_fu_3500_p2 = (temp_column_b_2_V_1_fu_2974_p3 ^ phi_ln719_5_fu_3466_p18);

assign xor_ln719_49_fu_3506_p2 = (xor_ln719_48_fu_3500_p2 ^ temp_column_b_1_V_1_fu_2946_p3);

assign xor_ln719_4_fu_2365_p2 = (8'd54 ^ SBOX_V_q1);

assign xor_ln719_51_fu_3540_p2 = (xor_ln719_46_fu_3488_p2 ^ SBOX_V_q9);

assign xor_ln719_52_fu_3546_p2 = (temp_column_b_3_V_1_fu_3002_p3 ^ phi_ln719_6_fu_3518_p18);

assign xor_ln719_53_fu_3552_p2 = (xor_ln719_52_fu_3546_p2 ^ temp_column_b_2_V_1_fu_2974_p3);

assign xor_ln719_55_fu_3586_p2 = (SBOX_V_q9 ^ SBOX_V_q4);

assign xor_ln719_56_fu_3592_p2 = (xor_ln719_55_fu_3586_p2 ^ SBOX_V_q14);

assign xor_ln719_57_fu_3598_p2 = (temp_column_b_3_V_1_fu_3002_p3 ^ phi_ln719_7_fu_3564_p18);

assign xor_ln719_58_fu_3604_p2 = (xor_ln719_57_fu_3598_p2 ^ temp_column_b_0_V_1_fu_2918_p3);

assign xor_ln719_5_fu_4100_p2 = (xor_ln719_4_reg_5478 ^ xor_ln1357_128_reg_5206);

assign xor_ln719_60_fu_3638_p2 = (SBOX_V_q2 ^ SBOX_V_q13);

assign xor_ln719_61_fu_3644_p2 = (xor_ln719_60_fu_3638_p2 ^ SBOX_V_q7);

assign xor_ln719_62_fu_3650_p2 = (temp_column_b_1_V_2_fu_3058_p3 ^ phi_ln719_8_fu_3616_p18);

assign xor_ln719_63_fu_3656_p2 = (xor_ln719_62_fu_3650_p2 ^ temp_column_b_0_V_2_fu_3030_p3);

assign xor_ln719_65_fu_3690_p2 = (SBOX_V_q8 ^ SBOX_V_q7);

assign xor_ln719_66_fu_3696_p2 = (xor_ln719_65_fu_3690_p2 ^ SBOX_V_q2);

assign xor_ln719_67_fu_3702_p2 = (temp_column_b_2_V_2_fu_3086_p3 ^ phi_ln719_9_fu_3668_p18);

assign xor_ln719_68_fu_3708_p2 = (xor_ln719_67_fu_3702_p2 ^ temp_column_b_1_V_2_fu_3058_p3);

assign xor_ln719_70_fu_3742_p2 = (xor_ln719_65_fu_3690_p2 ^ SBOX_V_q13);

assign xor_ln719_71_fu_3748_p2 = (temp_column_b_3_V_2_fu_3114_p3 ^ phi_ln719_s_fu_3720_p18);

assign xor_ln719_72_fu_3754_p2 = (xor_ln719_71_fu_3748_p2 ^ temp_column_b_2_V_2_fu_3086_p3);

assign xor_ln719_74_fu_3788_p2 = (SBOX_V_q8 ^ SBOX_V_q13);

assign xor_ln719_75_fu_3794_p2 = (xor_ln719_74_fu_3788_p2 ^ SBOX_V_q2);

assign xor_ln719_76_fu_3800_p2 = (temp_column_b_3_V_2_fu_3114_p3 ^ phi_ln719_10_fu_3766_p18);

assign xor_ln719_77_fu_3806_p2 = (xor_ln719_76_fu_3800_p2 ^ temp_column_b_0_V_2_fu_3030_p3);

assign xor_ln719_79_fu_3840_p2 = (SBOX_V_q6 ^ SBOX_V_q1);

assign xor_ln719_80_fu_3846_p2 = (xor_ln719_79_fu_3840_p2 ^ SBOX_V_q11);

assign xor_ln719_81_fu_3852_p2 = (temp_column_b_1_V_3_fu_3170_p3 ^ phi_ln719_11_fu_3818_p18);

assign xor_ln719_82_fu_3858_p2 = (xor_ln719_81_fu_3852_p2 ^ temp_column_b_0_V_3_fu_3142_p3);

assign xor_ln719_84_fu_3892_p2 = (SBOX_V_q12 ^ SBOX_V_q11);

assign xor_ln719_85_fu_3898_p2 = (xor_ln719_84_fu_3892_p2 ^ SBOX_V_q6);

assign xor_ln719_86_fu_3904_p2 = (temp_column_b_2_V_3_fu_3198_p3 ^ phi_ln719_12_fu_3870_p18);

assign xor_ln719_87_fu_3910_p2 = (xor_ln719_86_fu_3904_p2 ^ temp_column_b_1_V_3_fu_3170_p3);

assign xor_ln719_89_fu_3944_p2 = (xor_ln719_84_fu_3892_p2 ^ SBOX_V_q1);

assign xor_ln719_90_fu_3950_p2 = (temp_column_b_3_V_3_fu_3226_p3 ^ phi_ln719_13_fu_3922_p18);

assign xor_ln719_91_fu_3956_p2 = (xor_ln719_90_fu_3950_p2 ^ temp_column_b_2_V_3_fu_3198_p3);

assign xor_ln719_93_fu_3990_p2 = (SBOX_V_q12 ^ SBOX_V_q1);

assign xor_ln719_94_fu_3996_p2 = (xor_ln719_93_fu_3990_p2 ^ SBOX_V_q6);

assign xor_ln719_95_fu_4002_p2 = (temp_column_b_3_V_3_fu_3226_p3 ^ phi_ln719_14_fu_3968_p18);

assign xor_ln719_96_fu_4008_p2 = (xor_ln719_95_fu_4002_p2 ^ temp_column_b_0_V_3_fu_3142_p3);

assign xor_ln719_fu_1527_p2 = (8'd2 ^ SBOX_V_q1);

assign zext_ln544_10_fu_1583_p1 = xor_ln1357_30_fu_1563_p2;

assign zext_ln544_11_fu_1588_p1 = xor_ln1357_31_fu_1568_p2;

assign zext_ln544_12_fu_1682_p1 = xor_ln1357_44_fu_1662_p2;

assign zext_ln544_13_fu_1687_p1 = xor_ln1357_45_fu_1667_p2;

assign zext_ln544_14_fu_1692_p1 = xor_ln1357_46_fu_1672_p2;

assign zext_ln544_15_fu_1697_p1 = xor_ln1357_47_fu_1677_p2;

assign zext_ln544_16_fu_1728_p1 = xor_ln1357_60_fu_1708_p2;

assign zext_ln544_17_fu_1733_p1 = xor_ln1357_61_fu_1713_p2;

assign zext_ln544_18_fu_1738_p1 = xor_ln1357_62_fu_1718_p2;

assign zext_ln544_19_fu_1743_p1 = xor_ln1357_63_fu_1723_p2;

assign zext_ln544_1_fu_1370_p1 = trunc_ln214_2_fu_1219_p4;

assign zext_ln544_20_fu_1837_p1 = xor_ln1357_76_fu_1817_p2;

assign zext_ln544_21_fu_1842_p1 = xor_ln1357_77_fu_1822_p2;

assign zext_ln544_22_fu_1847_p1 = xor_ln1357_78_fu_1827_p2;

assign zext_ln544_23_fu_1852_p1 = xor_ln1357_79_fu_1832_p2;

assign zext_ln544_24_fu_1926_p1 = xor_ln1357_92_fu_1906_p2;

assign zext_ln544_25_fu_1931_p1 = xor_ln1357_93_fu_1911_p2;

assign zext_ln544_26_fu_1936_p1 = xor_ln1357_94_fu_1916_p2;

assign zext_ln544_27_fu_1941_p1 = xor_ln1357_95_fu_1921_p2;

assign zext_ln544_28_fu_2035_p1 = xor_ln1357_108_fu_2015_p2;

assign zext_ln544_29_fu_2040_p1 = xor_ln1357_109_fu_2020_p2;

assign zext_ln544_2_fu_1375_p1 = trunc_ln214_1_fu_1209_p4;

assign zext_ln544_30_fu_2045_p1 = xor_ln1357_110_fu_2025_p2;

assign zext_ln544_31_fu_2050_p1 = xor_ln1357_111_fu_2030_p2;

assign zext_ln544_32_fu_2081_p1 = xor_ln1357_124_fu_2061_p2;

assign zext_ln544_33_fu_2086_p1 = xor_ln1357_125_fu_2066_p2;

assign zext_ln544_34_fu_2091_p1 = xor_ln1357_126_fu_2071_p2;

assign zext_ln544_35_fu_2096_p1 = xor_ln1357_127_fu_2076_p2;

assign zext_ln544_36_fu_2190_p1 = xor_ln1357_140_fu_2170_p2;

assign zext_ln544_37_fu_2195_p1 = xor_ln1357_141_fu_2175_p2;

assign zext_ln544_38_fu_2200_p1 = xor_ln1357_142_fu_2180_p2;

assign zext_ln544_39_fu_2205_p1 = xor_ln1357_143_fu_2185_p2;

assign zext_ln544_3_fu_1380_p1 = trunc_ln214_fu_1205_p1;

assign zext_ln544_40_fu_4020_p1 = cipher_V_0_0_reg_1038;

assign zext_ln544_41_fu_4025_p1 = cipher_V_1_0_reg_1028;

assign zext_ln544_42_fu_4030_p1 = cipher_V_2_0_reg_1018;

assign zext_ln544_43_fu_4035_p1 = cipher_V_3_0_reg_1008;

assign zext_ln544_44_fu_4040_p1 = cipher_V_4_0_reg_998;

assign zext_ln544_45_fu_4045_p1 = cipher_V_5_0_reg_988;

assign zext_ln544_46_fu_4050_p1 = cipher_V_6_0_reg_978;

assign zext_ln544_47_fu_4055_p1 = cipher_V_7_0_reg_968;

assign zext_ln544_48_fu_4060_p1 = cipher_V_8_0_reg_958;

assign zext_ln544_49_fu_4065_p1 = cipher_V_9_0_reg_948;

assign zext_ln544_4_fu_1507_p1 = xor_ln1357_12_fu_1487_p2;

assign zext_ln544_50_fu_4070_p1 = cipher_V_10_0_reg_938;

assign zext_ln544_51_fu_4075_p1 = cipher_V_11_0_reg_928;

assign zext_ln544_52_fu_4080_p1 = cipher_V_12_0_reg_1048;

assign zext_ln544_53_fu_4085_p1 = cipher_V_13_0_reg_1058;

assign zext_ln544_54_fu_4090_p1 = cipher_V_14_0_reg_1068;

assign zext_ln544_55_fu_4095_p1 = cipher_V_15_0_reg_1078;

assign zext_ln544_56_fu_2700_p1 = ap_phi_mux_cipher_V_0_0_phi_fu_1041_p4;

assign zext_ln544_57_fu_2705_p1 = ap_phi_mux_cipher_V_1_0_phi_fu_1031_p4;

assign zext_ln544_58_fu_2710_p1 = ap_phi_mux_cipher_V_2_0_phi_fu_1021_p4;

assign zext_ln544_59_fu_2715_p1 = ap_phi_mux_cipher_V_3_0_phi_fu_1011_p4;

assign zext_ln544_5_fu_1512_p1 = xor_ln1357_13_fu_1492_p2;

assign zext_ln544_60_fu_2720_p1 = ap_phi_mux_cipher_V_4_0_phi_fu_1001_p4;

assign zext_ln544_61_fu_2725_p1 = ap_phi_mux_cipher_V_5_0_phi_fu_991_p4;

assign zext_ln544_62_fu_2730_p1 = ap_phi_mux_cipher_V_6_0_phi_fu_981_p4;

assign zext_ln544_63_fu_2735_p1 = ap_phi_mux_cipher_V_7_0_phi_fu_971_p4;

assign zext_ln544_64_fu_2740_p1 = ap_phi_mux_cipher_V_8_0_phi_fu_961_p4;

assign zext_ln544_65_fu_2745_p1 = ap_phi_mux_cipher_V_9_0_phi_fu_951_p4;

assign zext_ln544_66_fu_2750_p1 = ap_phi_mux_cipher_V_10_0_phi_fu_941_p4;

assign zext_ln544_67_fu_2755_p1 = ap_phi_mux_cipher_V_11_0_phi_fu_931_p4;

assign zext_ln544_68_fu_2760_p1 = ap_phi_mux_cipher_V_12_0_phi_fu_1051_p4;

assign zext_ln544_69_fu_2765_p1 = ap_phi_mux_cipher_V_13_0_phi_fu_1061_p4;

assign zext_ln544_6_fu_1517_p1 = xor_ln1357_14_fu_1497_p2;

assign zext_ln544_70_fu_2770_p1 = ap_phi_mux_cipher_V_14_0_phi_fu_1071_p4;

assign zext_ln544_71_fu_2775_p1 = ap_phi_mux_cipher_V_15_0_phi_fu_1081_p4;

assign zext_ln544_7_fu_1522_p1 = xor_ln1357_15_fu_1502_p2;

assign zext_ln544_8_fu_1573_p1 = xor_ln1357_28_fu_1553_p2;

assign zext_ln544_9_fu_1578_p1 = xor_ln1357_29_fu_1558_p2;

assign zext_ln544_fu_1365_p1 = trunc_ln214_3_fu_1229_p4;

endmodule //kern_enc
